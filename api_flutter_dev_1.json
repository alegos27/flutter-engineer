[
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/animation/Curve2D-class.html",
  "title": "Curve2D class - animation library - Dart API",
  "documentation_content": "Curve2D class - animation library - Dart API\nmenu\nFlutter\nanimation\nCurve2D class\nCurve2D\nbrightness_4\nbrightness_5\ndescription\nCurve2D class\nabstract\nAbstract class that defines an API for evaluating 2D parametric curves.\nCurve2D differs from Curve in that the values interpolated are Offset\nvalues instead of double values, hence the \"2D\" in the name. They both\ntake a single double t that has a range of 0.0 to 1.0, inclusive, as input\nto the transform function . Unlike Curve, Curve2D is not required to\nmap t=0.0 and t=1.0 to specific output values.\nThe interpolated t value given to transform represents the progression\nalong the curve, but it doesn't necessarily progress at a constant velocity, so\nincrementing t by, say, 0.1 might move along the curve by quite a lot at one\npart of the curve, or hardly at all in another part of the curve, depending\non the definition of the curve.\nThis example shows how to use a Curve2D to modify the position of a widget\nso that it can follow an arbitrary path.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=animation.Curve2D.1 mysample\nInheritance\nObject\nParametricCurve<Offset>\nCurve2D\nImplementers\nCatmullRomSpline\nConstructors\nCurve2D()\nAbstract const constructor to enable subclasses to provide const\nconstructors so that they can be used in const expressions.\nconst\nProperties\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsamplingSeed\n\u2192 int\nReturns a seed value used by generateSamples to seed a random number\ngenerator to avoid sample aliasing.\nread-only\nMethods\nfindInverse(double x)\n\u2192 double\nReturns the parameter t that corresponds to the given x value of the spline.\ngenerateSamples({double start = 0.0, double end = 1.0, double tolerance = 1e-10})\n\u2192 Iterable<Curve2DSample>\nGenerates a list of samples with a recursive subdivision until a tolerance\nof tolerance is reached.\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoString()\n\u2192 String\nA string representation of this object.\ninherited\ntransform(double t)\n\u2192 Offset\nReturns the value of the curve at point t.\ninherited\ntransformInternal(double t)\n\u2192 Offset\nReturns the value of the curve at point t.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nanimation\nCurve2D class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Curve2D].\n\nvoid main() => runApp(const Curve2DExampleApp());\n\nclass Curve2DExampleApp extends StatelessWidget {\n  const Curve2DExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: Curve2DExample(),\n    );\n  }\n}\n\n// This is the path that the child will follow. It's a CatmullRomSpline so\n// that the coordinates can be specified that it must pass through. If the\n// tension is set to 1.0, it will linearly interpolate between those points,\n// instead of interpolating smoothly.\nfinal CatmullRomSpline path = CatmullRomSpline(\n  const <Offset>[\n    Offset(0.05, 0.75),\n    Offset(0.18, 0.23),\n    Offset(0.32, 0.04),\n    Offset(0.73, 0.5),\n    Offset(0.42, 0.74),\n    Offset(0.73, 0.01),\n    Offset(0.93, 0.93),\n    Offset(0.05, 0.75),\n  ],\n  startHandle: const Offset(0.93, 0.93),\n  endHandle: const Offset(0.18, 0.23),\n);\n\nclass FollowCurve2D extends StatefulWidget {\n  const FollowCurve2D({\n    super.key,\n    required this.path,\n    this.curve = Curves.easeInOut,\n    required this.child,\n    this.duration = const Duration(seconds: 1),\n  });\n\n  final Curve2D path;\n  final Curve curve;\n  final Duration duration;\n  final Widget child;\n\n  @override\n  State<FollowCurve2D> createState() => _FollowCurve2DState();\n}\n\nclass _FollowCurve2DState extends State<FollowCurve2D>\n    with TickerProviderStateMixin {\n  // The animation controller for this animation.\n  late AnimationController controller;\n  // The animation that will be used to apply the widget's animation curve.\n  late Animation<double> animation;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(duration: widget.duration, vsync: this);\n    animation = CurvedAnimation(parent: controller, curve: widget.curve);\n    // Have the controller repeat indefinitely. If you want it to \"bounce\" back\n    // and forth, set the reverse parameter to true.\n    controller.repeat();\n    controller.addListener(() => setState(() {}));\n  }\n\n  @override\n  void dispose() {\n    // Always have to dispose of animation controllers when done.\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Scale the path values to match the -1.0 to 1.0 domain of the Alignment widget.\n    final Offset position =\n        widget.path.transform(animation.value) * 2.0 - const Offset(1.0, 1.0);\n    return Align(\n      alignment: Alignment(position.dx, position.dy),\n      child: widget.child,\n    );\n  }\n}\n\nclass Curve2DExample extends StatelessWidget {\n  const Curve2DExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      color: Colors.white,\n      alignment: Alignment.center,\n      child: FollowCurve2D(\n        path: path,\n        duration: const Duration(seconds: 3),\n        child: CircleAvatar(\n          backgroundColor: Colors.yellow,\n          child: DefaultTextStyle(\n            style: Theme.of(context).textTheme.titleLarge!,\n            child: const Text('B'), // Buzz, buzz!\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoActionSheet-class.html",
  "title": "CupertinoActionSheet class - cupertino library - Dart API",
  "documentation_content": "CupertinoActionSheet class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoActionSheet class\nCupertinoActionSheet\nbrightness_4\nbrightness_5\ndescription\nCupertinoActionSheet class\nAn iOS-style action sheet.\nAn action sheet is a specific style of alert that presents the user\nwith a set of two or more choices related to the current context.\nAn action sheet can have a title, an additional message, and a list\nof actions. The title is displayed above the message and the actions\nare displayed below this content.\nThis action sheet styles its title and message to match standard iOS action\nsheet title and message text style.\nTo display action buttons that look like standard iOS action sheet buttons,\nprovide CupertinoActionSheetActions for the actions given to this action\nsheet.\nTo include a iOS-style cancel button separate from the other buttons,\nprovide an CupertinoActionSheetAction for the cancelButton given to this\naction sheet.\nAn action sheet is typically passed as the child widget to\nshowCupertinoModalPopup, which displays the action sheet by sliding it up\nfrom the bottom of the screen.\nThis sample shows how to use a CupertinoActionSheet.\nThe CupertinoActionSheet shows a modal popup that slides in from the\nbottom when CupertinoButton is pressed.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoActionSheet.1 mysample\nSee also:\nCupertinoActionSheetAction, which is an iOS-style action sheet button.\ndeveloper.apple.com/design/human-interface-guidelines/ios/views/action-sheets/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoActionSheet\nConstructors\nCupertinoActionSheet({Key? key, Widget? title, Widget? message, List<Widget>? actions, ScrollController? messageScrollController, ScrollController? actionScrollController, Widget? cancelButton})\nCreates an iOS-style action sheet.\nconst\nProperties\nactions\n\u2192 List<Widget>?\nThe set of actions that are displayed for the user to select.\nfinal\nactionScrollController\n\u2192 ScrollController?\nA scroll controller that can be used to control the scrolling of the\nactions in the action sheet.\nfinal\ncancelButton\n\u2192 Widget?\nThe optional cancel button that is grouped separately from the other\nactions.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmessage\n\u2192 Widget?\nAn optional descriptive message that provides more details about the\nreason for the alert.\nfinal\nmessageScrollController\n\u2192 ScrollController?\nA scroll controller that can be used to control the scrolling of the\nmessage in the action sheet.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\ntitle\n\u2192 Widget?\nAn optional title of the action sheet. When the message is non-null,\nthe font of the title is bold.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoActionSheet>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoActionSheet class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoActionSheet].\n\nvoid main() => runApp(const ActionSheetApp());\n\nclass ActionSheetApp extends StatelessWidget {\n  const ActionSheetApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: ActionSheetExample(),\n    );\n  }\n}\n\nclass ActionSheetExample extends StatelessWidget {\n  const ActionSheetExample({super.key});\n\n  // This shows a CupertinoModalPopup which hosts a CupertinoActionSheet.\n  void _showActionSheet(BuildContext context) {\n    showCupertinoModalPopup<void>(\n      context: context,\n      builder: (BuildContext context) => CupertinoActionSheet(\n        title: const Text('Title'),\n        message: const Text('Message'),\n        actions: <CupertinoActionSheetAction>[\n          CupertinoActionSheetAction(\n            /// This parameter indicates the action would be a default\n            /// default behavior, turns the action's text to bold text.\n            isDefaultAction: true,\n            onPressed: () {\n              Navigator.pop(context);\n            },\n            child: const Text('Default Action'),\n          ),\n          CupertinoActionSheetAction(\n            onPressed: () {\n              Navigator.pop(context);\n            },\n            child: const Text('Action'),\n          ),\n          CupertinoActionSheetAction(\n            /// This parameter indicates the action would perform\n            /// a destructive action such as delete or exit and turns\n            /// the action's text color to red.\n            isDestructiveAction: true,\n            onPressed: () {\n              Navigator.pop(context);\n            },\n            child: const Text('Destructive Action'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoActionSheet Sample'),\n      ),\n      child: Center(\n        child: CupertinoButton(\n          onPressed: () => _showActionSheet(context),\n          child: const Text('CupertinoActionSheet'),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoActivityIndicator-class.html",
  "title": "CupertinoActivityIndicator class - cupertino library - Dart API",
  "documentation_content": "CupertinoActivityIndicator class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoActivityIndicator class\nCupertinoActivityIndicator\nbrightness_4\nbrightness_5\ndescription\nCupertinoActivityIndicator class\nAn iOS-style activity indicator that spins clockwise.\nThis example shows how CupertinoActivityIndicator can be customized.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoActivityIndicator.1 mysample\nSee also:\ndeveloper.apple.com/ios/human-interface-guidelines/controls/progress-indicators/#activity-indicators\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoActivityIndicator\nConstructors\nCupertinoActivityIndicator({Key? key, Color? color, bool animating = true, double radius = _kDefaultIndicatorRadius})\nCreates an iOS-style activity indicator that spins clockwise.\nconst\nCupertinoActivityIndicator.partiallyRevealed({Key? key, Color? color, double radius = _kDefaultIndicatorRadius, double progress = 1.0})\nCreates a non-animated iOS-style activity indicator that displays\na partial count of ticks based on the value of progress.\nconst\nProperties\nanimating\n\u2192 bool\nWhether the activity indicator is running its animation.\nfinal\ncolor\n\u2192 Color?\nColor of the activity indicator.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nprogress\n\u2192 double\nDetermines the percentage of spinner ticks that will be shown. Typical usage would\ndisplay all ticks, however, this allows for more fine-grained control such as\nduring pull-to-refresh when the drag-down action shows one tick at a time as\nthe user continues to drag down.\nfinal\nradius\n\u2192 double\nRadius of the spinner widget.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoActivityIndicator>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoActivityIndicator class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoActivityIndicator].\n\nvoid main() => runApp(const CupertinoIndicatorApp());\n\nclass CupertinoIndicatorApp extends StatelessWidget {\n  const CupertinoIndicatorApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoIndicatorExample(),\n    );\n  }\n}\n\nclass CupertinoIndicatorExample extends StatelessWidget {\n  const CupertinoIndicatorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoPageScaffold(\n      navigationBar: CupertinoNavigationBar(\n        middle: Text('CupertinoActivityIndicator Sample'),\n      ),\n      child: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: <Widget>[\n            Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                // Cupertino activity indicator with default properties.\n                CupertinoActivityIndicator(),\n                SizedBox(height: 10),\n                Text('Default'),\n              ],\n            ),\n            Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                // Cupertino activity indicator with custom radius and color.\n                CupertinoActivityIndicator(\n                    radius: 20.0, color: CupertinoColors.activeBlue),\n                SizedBox(height: 10),\n                Text(\n                  'radius: 20.0\\ncolor: CupertinoColors.activeBlue',\n                  textAlign: TextAlign.center,\n                ),\n              ],\n            ),\n            Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                // Cupertino activity indicator with custom radius and disabled\n                // animation.\n                CupertinoActivityIndicator(radius: 20.0, animating: false),\n                SizedBox(height: 10),\n                Text(\n                  'radius: 20.0\\nanimating: false',\n                  textAlign: TextAlign.center,\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoAlertDialog-class.html",
  "title": "CupertinoAlertDialog class - cupertino library - Dart API",
  "documentation_content": "CupertinoAlertDialog class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoAlertDialog class\nCupertinoAlertDialog\nbrightness_4\nbrightness_5\ndescription\nCupertinoAlertDialog class\nAn iOS-style alert dialog.\nAn alert dialog informs the user about situations that require\nacknowledgment. An alert dialog has an optional title, optional content,\nand an optional list of actions. The title is displayed above the content\nand the actions are displayed below the content.\nThis dialog styles its title and content (typically a message) to match the\nstandard iOS title and message dialog text style. These default styles can\nbe overridden by explicitly defining TextStyles for Text widgets that\nare part of the title or content.\nTo display action buttons that look like standard iOS dialog buttons,\nprovide CupertinoDialogActions for the actions given to this dialog.\nTypically passed as the child widget to showDialog, which displays the\ndialog.\nThis sample shows how to use a CupertinoAlertDialog.\nThe CupertinoAlertDialog shows an alert with a set of two choices\nwhen CupertinoButton is pressed.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoAlertDialog.1 mysample\nSee also:\nCupertinoPopupSurface, which is a generic iOS-style popup surface that\nholds arbitrary content to create custom popups.\nCupertinoDialogAction, which is an iOS-style dialog button.\nAlertDialog, a Material Design alert dialog.\ndeveloper.apple.com/ios/human-interface-guidelines/views/alerts/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoAlertDialog\nConstructors\nCupertinoAlertDialog({Key? key, Widget? title, Widget? content, List<Widget> actions = const <Widget>[], ScrollController? scrollController, ScrollController? actionScrollController, Duration insetAnimationDuration = const Duration(milliseconds: 100), Curve insetAnimationCurve = Curves.decelerate})\nCreates an iOS-style alert dialog.\nconst\nProperties\nactions\n\u2192 List<Widget>\nThe (optional) set of actions that are displayed at the bottom of the\ndialog.\nfinal\nactionScrollController\n\u2192 ScrollController?\nA scroll controller that can be used to control the scrolling of the\nactions in the dialog.\nfinal\ncontent\n\u2192 Widget?\nThe (optional) content of the dialog is displayed in the center of the\ndialog in a lighter font.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninsetAnimationCurve\n\u2192 Curve\nThe curve to use for the animation shown when the system keyboard intrudes\ninto the space that the dialog is placed in.\nfinal\ninsetAnimationDuration\n\u2192 Duration\nThe duration of the animation to show when the system keyboard intrudes\ninto the space that the dialog is placed in.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nscrollController\n\u2192 ScrollController?\nA scroll controller that can be used to control the scrolling of the\ncontent in the dialog.\nfinal\ntitle\n\u2192 Widget?\nThe (optional) title of the dialog is displayed in a large font at the top\nof the dialog.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoAlertDialog>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoAlertDialog class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoAlertDialog].\n\nvoid main() => runApp(const AlertDialogApp());\n\nclass AlertDialogApp extends StatelessWidget {\n  const AlertDialogApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: AlertDialogExample(),\n    );\n  }\n}\n\nclass AlertDialogExample extends StatelessWidget {\n  const AlertDialogExample({super.key});\n\n  // This shows a CupertinoModalPopup which hosts a CupertinoAlertDialog.\n  void _showAlertDialog(BuildContext context) {\n    showCupertinoModalPopup<void>(\n      context: context,\n      builder: (BuildContext context) => CupertinoAlertDialog(\n        title: const Text('Alert'),\n        content: const Text('Proceed with destructive action?'),\n        actions: <CupertinoDialogAction>[\n          CupertinoDialogAction(\n            /// This parameter indicates this action is the default,\n            /// and turns the action's text to bold text.\n            isDefaultAction: true,\n            onPressed: () {\n              Navigator.pop(context);\n            },\n            child: const Text('No'),\n          ),\n          CupertinoDialogAction(\n            /// This parameter indicates the action would perform\n            /// a destructive action such as deletion, and turns\n            /// the action's text color to red.\n            isDestructiveAction: true,\n            onPressed: () {\n              Navigator.pop(context);\n            },\n            child: const Text('Yes'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoAlertDialog Sample'),\n      ),\n      child: Center(\n        child: CupertinoButton(\n          onPressed: () => _showAlertDialog(context),\n          child: const Text('CupertinoAlertDialog'),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoButton-class.html",
  "title": "CupertinoButton class - cupertino library - Dart API",
  "documentation_content": "CupertinoButton class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoButton class\nCupertinoButton\nbrightness_4\nbrightness_5\ndescription\nCupertinoButton class\nAn iOS-style button.\nTakes in a text or an icon that fades out and in on touch. May optionally have a\nbackground.\nThe padding defaults to 16.0 pixels. When using a CupertinoButton within\na fixed height parent, like a CupertinoNavigationBar, a smaller, or even\nEdgeInsets.zero, should be used to prevent clipping larger child\nwidgets.\nThis sample shows produces an enabled and disabled CupertinoButton and\nCupertinoButton.filled.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoButton.1 mysample\nSee also:\ndeveloper.apple.com/ios/human-interface-guidelines/controls/buttons/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoButton\nConstructors\nCupertinoButton({Key? key, required Widget child, EdgeInsetsGeometry? padding, Color? color, Color disabledColor = CupertinoColors.quaternarySystemFill, double? minSize = kMinInteractiveDimensionCupertino, double? pressedOpacity = 0.4, BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0)), AlignmentGeometry alignment = Alignment.center, required VoidCallback? onPressed})\nCreates an iOS-style button.\nconst\nCupertinoButton.filled({Key? key, required Widget child, EdgeInsetsGeometry? padding, Color disabledColor = CupertinoColors.quaternarySystemFill, double? minSize = kMinInteractiveDimensionCupertino, double? pressedOpacity = 0.4, BorderRadius? borderRadius = const BorderRadius.all(Radius.circular(8.0)), AlignmentGeometry alignment = Alignment.center, required VoidCallback? onPressed})\nCreates an iOS-style button with a filled background.\nconst\nProperties\nalignment\n\u2192 AlignmentGeometry\nThe alignment of the button's child.\nfinal\nborderRadius\n\u2192 BorderRadius?\nThe radius of the button's corners when it has a background color.\nfinal\nchild\n\u2192 Widget\nThe widget below this widget in the tree.\nfinal\ncolor\n\u2192 Color?\nThe color of the button's background.\nfinal\ndisabledColor\n\u2192 Color\nThe color of the button's background when the button is disabled.\nfinal\nenabled\n\u2192 bool\nWhether the button is enabled or disabled. Buttons are disabled by default. To\nenable a button, set its onPressed property to a non-null value.\nread-only\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nminSize\n\u2192 double?\nMinimum size of the button.\nfinal\nonPressed\n\u2192 VoidCallback?\nThe callback that is called when the button is tapped or otherwise activated.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe amount of space to surround the child inside the bounds of the button.\nfinal\npressedOpacity\n\u2192 double?\nThe opacity that the button will fade to when it is pressed.\nThe button will have an opacity of 1.0 when it is not pressed.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoButton>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoButton class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoButton].\n\nvoid main() => runApp(const CupertinoButtonApp());\n\nclass CupertinoButtonApp extends StatelessWidget {\n  const CupertinoButtonApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoButtonExample(),\n    );\n  }\n}\n\nclass CupertinoButtonExample extends StatelessWidget {\n  const CupertinoButtonExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoButton Sample'),\n      ),\n      child: Center(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: <Widget>[\n            const CupertinoButton(\n              onPressed: null,\n              child: Text('Disabled'),\n            ),\n            const SizedBox(height: 30),\n            const CupertinoButton.filled(\n              onPressed: null,\n              child: Text('Disabled'),\n            ),\n            const SizedBox(height: 30),\n            CupertinoButton(\n              onPressed: () {},\n              child: const Text('Enabled'),\n            ),\n            const SizedBox(height: 30),\n            CupertinoButton.filled(\n              onPressed: () {},\n              child: const Text('Enabled'),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoContextMenu-class.html",
  "title": "CupertinoContextMenu class - cupertino library - Dart API",
  "documentation_content": "CupertinoContextMenu class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoContextMenu class\nCupertinoContextMenu\nbrightness_4\nbrightness_5\ndescription\nCupertinoContextMenu class\nA full-screen modal route that opens when the child is long-pressed.\nWhen open, the CupertinoContextMenu shows the child, or the widget returned\nby previewBuilder if given, in a large full-screen Overlay with a list\nof buttons specified by actions. The child/preview is placed in an\nExpanded widget so that it will grow to fill the Overlay if its size is\nunconstrained.\nWhen closed, the CupertinoContextMenu displays the child as if the\nCupertinoContextMenu were not there. Sizing and positioning is unaffected.\nThe menu can be closed like other PopupRoutes, such as by tapping the\nbackground or by calling Navigator.pop(context). Unlike PopupRoute, it can\nalso be closed by swiping downwards.\nThe previewBuilder parameter is most commonly used to display a slight\nvariation of child. See previewBuilder for an example of rounding the\nchild's corners and allowing its aspect ratio to expand, similar to the\nPhotos app on iOS.\nThis sample shows a very simple CupertinoContextMenu for the Flutter logo.\nLong press on it to open.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoContextMenu.1 mysample\nThis sample shows a similar CupertinoContextMenu, this time using builder\nto add a border radius to the widget.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoContextMenu.2 mysample\nSee also:\ndeveloper.apple.com/design/human-interface-guidelines/ios/controls/context-menus/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoContextMenu\nConstructors\nCupertinoContextMenu({Key? key, required List<Widget> actions, required Widget child, bool enableHapticFeedback = false, @Deprecated('Use CupertinoContextMenu.builder instead. ' 'This feature was deprecated after v3.4.0-34.1.pre.') ContextMenuPreviewBuilder? previewBuilder = _defaultPreviewBuilder})\nCreate a context menu.\nCupertinoContextMenu.builder({Key? key, required List<Widget> actions, required CupertinoContextMenuBuilder builder, bool enableHapticFeedback = false})\nCreates a context menu with a custom builder controlling the widget.\nProperties\nactions\n\u2192 List<Widget>\nThe actions that are shown in the menu.\nfinal\nbuilder\n\u2192 CupertinoContextMenuBuilder\nA function that returns a widget to be used alternatively from child.\nfinal\nchild\n\u2192 Widget?\nThe widget that can be \"opened\" with the CupertinoContextMenu.\nfinal\nenableHapticFeedback\n\u2192 bool\nIf true, clicking on the CupertinoContextMenuActions will\nproduce haptic feedback.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\npreviewBuilder\n\u2192 ContextMenuPreviewBuilder?\nA function that returns an alternative widget to show when the\nCupertinoContextMenu is open.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoContextMenu>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Properties\nanimationOpensAt\n\u2192 double\nThe point at which the CupertinoContextMenu begins to animate\ninto the open position.\nfinal\nConstants\nkEndBoxShadow\n\u2192 const List<BoxShadow>\nExposes the final box shadow of the opening animation of the child widget\nto match the default behavior of the native iOS widget. This value was\neyeballed from the iOS simulator running iOS 16.0.\n_endBoxShadow\nkOpenBorderRadius\n\u2192 const double\nExposes the default border radius for matching iOS 16.0 behavior. This\nvalue was eyeballed from the iOS simulator running iOS 16.0.\n_previewBorderRadiusRatio\nFlutter\ncupertino\nCupertinoContextMenu class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [CupertinoContextMenu].\n\nvoid main() => runApp(const ContextMenuApp());\n\nclass ContextMenuApp extends StatelessWidget {\n  const ContextMenuApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: ContextMenuExample(),\n    );\n  }\n}\n\nclass ContextMenuExample extends StatelessWidget {\n  const ContextMenuExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoContextMenu Sample'),\n      ),\n      child: Center(\n        child: SizedBox(\n          width: 100,\n          height: 100,\n          child: CupertinoContextMenu(\n            actions: <Widget>[\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                isDefaultAction: true,\n                trailingIcon: CupertinoIcons.doc_on_clipboard_fill,\n                child: const Text('Copy'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                trailingIcon: CupertinoIcons.share,\n                child: const Text('Share'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                trailingIcon: CupertinoIcons.heart,\n                child: const Text('Favorite'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                isDestructiveAction: true,\n                trailingIcon: CupertinoIcons.delete,\n                child: const Text('Delete'),\n              ),\n            ],\n            child: const ColoredBox(\n              color: CupertinoColors.systemYellow,\n              child: FlutterLogo(size: 500.0),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [CupertinoContextMenu].\n\nfinal DecorationTween _tween = DecorationTween(\n  begin: BoxDecoration(\n    color: CupertinoColors.systemYellow,\n    boxShadow: const <BoxShadow>[],\n    borderRadius: BorderRadius.circular(20.0),\n  ),\n  end: BoxDecoration(\n    color: CupertinoColors.systemYellow,\n    boxShadow: CupertinoContextMenu.kEndBoxShadow,\n    borderRadius: BorderRadius.circular(20.0),\n  ),\n);\n\nvoid main() => runApp(const ContextMenuApp());\n\nclass ContextMenuApp extends StatelessWidget {\n  const ContextMenuApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: ContextMenuExample(),\n    );\n  }\n}\n\nclass ContextMenuExample extends StatelessWidget {\n  const ContextMenuExample({super.key});\n\n  // Or just do this inline in the builder below?\n  static Animation<Decoration> _boxDecorationAnimation(\n      Animation<double> animation) {\n    return _tween.animate(\n      CurvedAnimation(\n        parent: animation,\n        curve: Interval(\n          0.0,\n          CupertinoContextMenu.animationOpensAt,\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoContextMenu Sample'),\n      ),\n      child: Center(\n        child: SizedBox(\n          width: 100,\n          height: 100,\n          child: CupertinoContextMenu.builder(\n            actions: <Widget>[\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                isDefaultAction: true,\n                trailingIcon: CupertinoIcons.doc_on_clipboard_fill,\n                child: const Text('Copy'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                trailingIcon: CupertinoIcons.share,\n                child: const Text('Share'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                trailingIcon: CupertinoIcons.heart,\n                child: const Text('Favorite'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                isDestructiveAction: true,\n                trailingIcon: CupertinoIcons.delete,\n                child: const Text('Delete'),\n              ),\n            ],\n            builder: (BuildContext context, Animation<double> animation) {\n              final Animation<Decoration> boxDecorationAnimation =\n                  _boxDecorationAnimation(animation);\n\n              return Container(\n                decoration:\n                    animation.value < CupertinoContextMenu.animationOpensAt\n                        ? boxDecorationAnimation.value\n                        : null,\n                child: Container(\n                  decoration: BoxDecoration(\n                    color: CupertinoColors.systemYellow,\n                    borderRadius: BorderRadius.circular(20.0),\n                  ),\n                  child: const FlutterLogo(size: 500.0),\n                ),\n              );\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoContextMenu/builder.html",
  "title": "builder property - CupertinoContextMenu class - cupertino library - Dart API",
  "documentation_content": "builder property - CupertinoContextMenu class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoContextMenu\nbuilder property\nbuilder\nbrightness_4\nbrightness_5\ndescription\nbuilder property\nCupertinoContextMenuBuilder\nbuilder\nfinal\nA function that returns a widget to be used alternatively from child.\nThe widget returned by the function will be shown at all times: when the\nCupertinoContextMenu is closed, when it is in the middle of opening,\nand when it is fully open. This will overwrite the default animation that\nmatches the behavior of an iOS 16.0 context menu.\nThis builder can be used instead of the child when the intended child has\na property that would conflict with the default animation, such as a\nborder radius or a shadow, or if a more custom animation is needed.\nIn addition to the current BuildContext, the function is also called\nwith an Animation. The complete animation goes from 0 to 1 when\nthe CupertinoContextMenu opens, and from 1 to 0 when it closes, and it can\nbe used to animate the widget in sync with this opening and closing.\nThe animation works in two stages. The first happens on press and hold of\nthe widget from 0 to animationOpensAt, and the second stage for when the\nwidget fully opens up to the menu, from animationOpensAt to 1.\nBelow is an example of using builder to show an image tile setup to be\nopened in the default way to match a native iOS 16.0 app. The behavior\nwill match what will happen if the simple child image was passed as just\nthe child parameter, instead of builder. This can be manipulated to\nadd more customizability to the widget's animation.\nlink\ncontent_copy\nCupertinoContextMenu.builder(\nactions: <Widget>[\nCupertinoContextMenuAction(\nchild: const Text('Action one'),\nonPressed: () {},\n),\n],\nbuilder:(BuildContext context, Animation<double> animation) {\nfinal Animation<BorderRadius?> borderRadiusAnimation = BorderRadiusTween(\nbegin: BorderRadius.circular(0.0),\nend: BorderRadius.circular(CupertinoContextMenu.kOpenBorderRadius),\n).animate(\nCurvedAnimation(\nparent: animation,\ncurve: Interval(\nCupertinoContextMenu.animationOpensAt,\n1.0,\n),\n),\n);\nfinal Animation<Decoration> boxDecorationAnimation = DecorationTween(\nbegin: const BoxDecoration(\ncolor: Color(0xFFFFFFFF),\nboxShadow: <BoxShadow>[],\n),\nend: const BoxDecoration(\ncolor: Color(0xFFFFFFFF),\nboxShadow: CupertinoContextMenu.kEndBoxShadow,\n),\n).animate(\nCurvedAnimation(\nparent: animation,\ncurve: Interval(\n0.0,\nCupertinoContextMenu.animationOpensAt,\n),\n),\n);\nreturn Container(\ndecoration:\nanimation.value < CupertinoContextMenu.animationOpensAt ? boxDecorationAnimation.value : null,\nchild: FittedBox(\nfit: BoxFit.cover,\nchild: ClipRRect(\nborderRadius: borderRadiusAnimation.value ?? BorderRadius.circular(0.0),\nchild: SizedBox(\nheight: 150,\nwidth: 150,\nchild: Image.network('https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg'),\n),\n),\n),\n);\n},\n)\nAdditionally below is an example of a real world use case for builder.\nIf a widget is passed to the child parameter with properties that\nconflict with the default animation, in this case the border radius,\nunwanted behaviors can arise. Here a boxed shadow will wrap the widget as\nit is expanded. To handle this, a more custom animation and widget can be\npassed to the builder, using values exposed by CupertinoContextMenu,\nlike CupertinoContextMenu.kEndBoxShadow, to match the native iOS\nanimation as close as desired.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoContextMenu.builder.2 mysample\nImplementation\nfinal CupertinoContextMenuBuilder builder;\nFlutter\ncupertino\nCupertinoContextMenu\nbuilder property\nCupertinoContextMenu class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [CupertinoContextMenu].\n\nfinal DecorationTween _tween = DecorationTween(\n  begin: BoxDecoration(\n    color: CupertinoColors.systemYellow,\n    boxShadow: const <BoxShadow>[],\n    borderRadius: BorderRadius.circular(20.0),\n  ),\n  end: BoxDecoration(\n    color: CupertinoColors.systemYellow,\n    boxShadow: CupertinoContextMenu.kEndBoxShadow,\n    borderRadius: BorderRadius.circular(20.0),\n  ),\n);\n\nvoid main() => runApp(const ContextMenuApp());\n\nclass ContextMenuApp extends StatelessWidget {\n  const ContextMenuApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: ContextMenuExample(),\n    );\n  }\n}\n\nclass ContextMenuExample extends StatelessWidget {\n  const ContextMenuExample({super.key});\n\n  // Or just do this inline in the builder below?\n  static Animation<Decoration> _boxDecorationAnimation(\n      Animation<double> animation) {\n    return _tween.animate(\n      CurvedAnimation(\n        parent: animation,\n        curve: Interval(\n          0.0,\n          CupertinoContextMenu.animationOpensAt,\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoContextMenu Sample'),\n      ),\n      child: Center(\n        child: SizedBox(\n          width: 100,\n          height: 100,\n          child: CupertinoContextMenu.builder(\n            actions: <Widget>[\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                isDefaultAction: true,\n                trailingIcon: CupertinoIcons.doc_on_clipboard_fill,\n                child: const Text('Copy'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                trailingIcon: CupertinoIcons.share,\n                child: const Text('Share'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                trailingIcon: CupertinoIcons.heart,\n                child: const Text('Favorite'),\n              ),\n              CupertinoContextMenuAction(\n                onPressed: () {\n                  Navigator.pop(context);\n                },\n                isDestructiveAction: true,\n                trailingIcon: CupertinoIcons.delete,\n                child: const Text('Delete'),\n              ),\n            ],\n            builder: (BuildContext context, Animation<double> animation) {\n              final Animation<Decoration> boxDecorationAnimation =\n                  _boxDecorationAnimation(animation);\n\n              return Container(\n                decoration:\n                    animation.value < CupertinoContextMenu.animationOpensAt\n                        ? boxDecorationAnimation.value\n                        : null,\n                child: Container(\n                  decoration: BoxDecoration(\n                    color: CupertinoColors.systemYellow,\n                    borderRadius: BorderRadius.circular(20.0),\n                  ),\n                  child: const FlutterLogo(size: 500.0),\n                ),\n              );\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoDatePicker-class.html",
  "title": "CupertinoDatePicker class - cupertino library - Dart API",
  "documentation_content": "CupertinoDatePicker class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoDatePicker class\nCupertinoDatePicker\nbrightness_4\nbrightness_5\ndescription\nCupertinoDatePicker class\nA date picker widget in iOS style.\nThere are several modes of the date picker listed in CupertinoDatePickerMode.\nThe class will display its children as consecutive columns. Its children\norder is based on internationalization, or the dateOrder property if specified.\nExample of the picker in date mode:\nUS-English: | July | 13 | 2012 |\nVietnamese: | 13 | Th\u00e1ng 7 | 2012 |\nCan be used with showCupertinoModalPopup to display the picker modally at\nthe bottom of the screen.\nSizes itself to its parent and may not render correctly if not given the\nfull screen width. Content texts are shown with\nCupertinoTextThemeData.dateTimePickerTextStyle.\nThis sample shows how to implement CupertinoDatePicker with different picker modes.\nWe can provide initial dateTime value for the picker to display. When user changes\nthe drag the date or time wheels, the picker will call onDateTimeChanged callback.\nCupertinoDatePicker can be displayed directly on a screen or in a popup.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoDatePicker.1 mysample\nSee also:\nCupertinoTimerPicker, the class that implements the iOS-style timer picker.\nCupertinoPicker, the class that implements a content agnostic spinner UI.\ndeveloper.apple.com/design/human-interface-guidelines/ios/controls/pickers/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoDatePicker\nConstructors\nCupertinoDatePicker({Key? key, CupertinoDatePickerMode mode = CupertinoDatePickerMode.dateAndTime, required ValueChanged<DateTime> onDateTimeChanged, DateTime? initialDateTime, DateTime? minimumDate, DateTime? maximumDate, int minimumYear = 1, int? maximumYear, int minuteInterval = 1, bool use24hFormat = false, DatePickerDateOrder? dateOrder, Color? backgroundColor, bool showDayOfWeek = false, double itemExtent = _kItemExtent})\nConstructs an iOS style date picker.\nProperties\nbackgroundColor\n\u2192 Color?\nBackground color of date picker.\nfinal\ndateOrder\n\u2192 DatePickerDateOrder?\nDetermines the order of the columns inside CupertinoDatePicker in\nCupertinoDatePickerMode.date and CupertinoDatePickerMode.monthYear\nmode. When using monthYear mode, both DatePickerDateOrder.dmy and\nDatePickerDateOrder.mdy will result in the month|year order.\nDefaults to the locale's default date format/order.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninitialDateTime\n\u2192 DateTime\nThe initial date and/or time of the picker. Defaults to the present date\nand time. The present must conform to the intervals set in minimumDate,\nmaximumDate, minimumYear, and maximumYear.\nfinal\nitemExtent\n\u2192 double\nThe uniform height of all children.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmaximumDate\n\u2192 DateTime?\nThe maximum selectable date that the picker can settle on.\nfinal\nmaximumYear\n\u2192 int?\nMaximum year that the picker can be scrolled to in\nCupertinoDatePickerMode.date mode. Null if there's no limit.\nfinal\nminimumDate\n\u2192 DateTime?\nThe minimum selectable date that the picker can settle on.\nfinal\nminimumYear\n\u2192 int\nMinimum year that the picker can be scrolled to in\nCupertinoDatePickerMode.date mode. Defaults to 1.\nfinal\nminuteInterval\n\u2192 int\nThe granularity of the minutes spinner, if it is shown in the current mode.\nMust be an integer factor of 60.\nfinal\nmode\n\u2192 CupertinoDatePickerMode\nThe mode of the date picker as one of CupertinoDatePickerMode. Defaults\nto CupertinoDatePickerMode.dateAndTime. Value cannot change after\ninitial build.\nfinal\nonDateTimeChanged\n\u2192 ValueChanged<DateTime>\nCallback called when the selected date and/or time changes. If the new\nselected DateTime is not valid, or is not in the minimumDate through\nmaximumDate range, this callback will not be called.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshowDayOfWeek\n\u2192 bool\nWhether to to show day of week alongside day. Defaults to false.\nfinal\nuse24hFormat\n\u2192 bool\nWhether to use 24 hour format. Defaults to false.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<StatefulWidget>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoDatePicker class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoDatePicker].\n\nvoid main() => runApp(const DatePickerApp());\n\nclass DatePickerApp extends StatelessWidget {\n  const DatePickerApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: DatePickerExample(),\n    );\n  }\n}\n\nclass DatePickerExample extends StatefulWidget {\n  const DatePickerExample({super.key});\n\n  @override\n  State<DatePickerExample> createState() => _DatePickerExampleState();\n}\n\nclass _DatePickerExampleState extends State<DatePickerExample> {\n  DateTime date = DateTime(2016, 10, 26);\n  DateTime time = DateTime(2016, 5, 10, 22, 35);\n  DateTime dateTime = DateTime(2016, 8, 3, 17, 45);\n\n  // This function displays a CupertinoModalPopup with a reasonable fixed height\n  // which hosts CupertinoDatePicker.\n  void _showDialog(Widget child) {\n    showCupertinoModalPopup<void>(\n      context: context,\n      builder: (BuildContext context) => Container(\n        height: 216,\n        padding: const EdgeInsets.only(top: 6.0),\n        // The Bottom margin is provided to align the popup above the system\n        // navigation bar.\n        margin: EdgeInsets.only(\n          bottom: MediaQuery.of(context).viewInsets.bottom,\n        ),\n        // Provide a background color for the popup.\n        color: CupertinoColors.systemBackground.resolveFrom(context),\n        // Use a SafeArea widget to avoid system overlaps.\n        child: SafeArea(\n          top: false,\n          child: child,\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoDatePicker Sample'),\n      ),\n      child: DefaultTextStyle(\n        style: TextStyle(\n          color: CupertinoColors.label.resolveFrom(context),\n          fontSize: 22.0,\n        ),\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              _DatePickerItem(\n                children: <Widget>[\n                  const Text('Date'),\n                  CupertinoButton(\n                    // Display a CupertinoDatePicker in date picker mode.\n                    onPressed: () => _showDialog(\n                      CupertinoDatePicker(\n                        initialDateTime: date,\n                        mode: CupertinoDatePickerMode.date,\n                        use24hFormat: true,\n                        // This shows day of week alongside day of month\n                        showDayOfWeek: true,\n                        // This is called when the user changes the date.\n                        onDateTimeChanged: (DateTime newDate) {\n                          setState(() => date = newDate);\n                        },\n                      ),\n                    ),\n                    // In this example, the date is formatted manually. You can\n                    // use the intl package to format the value based on the\n                    // user's locale settings.\n                    child: Text(\n                      '${date.month}-${date.day}-${date.year}',\n                      style: const TextStyle(\n                        fontSize: 22.0,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              _DatePickerItem(\n                children: <Widget>[\n                  const Text('Time'),\n                  CupertinoButton(\n                    // Display a CupertinoDatePicker in time picker mode.\n                    onPressed: () => _showDialog(\n                      CupertinoDatePicker(\n                        initialDateTime: time,\n                        mode: CupertinoDatePickerMode.time,\n                        use24hFormat: true,\n                        // This is called when the user changes the time.\n                        onDateTimeChanged: (DateTime newTime) {\n                          setState(() => time = newTime);\n                        },\n                      ),\n                    ),\n                    // In this example, the time value is formatted manually.\n                    // You can use the intl package to format the value based on\n                    // the user's locale settings.\n                    child: Text(\n                      '${time.hour}:${time.minute}',\n                      style: const TextStyle(\n                        fontSize: 22.0,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n              _DatePickerItem(\n                children: <Widget>[\n                  const Text('DateTime'),\n                  CupertinoButton(\n                    // Display a CupertinoDatePicker in dateTime picker mode.\n                    onPressed: () => _showDialog(\n                      CupertinoDatePicker(\n                        initialDateTime: dateTime,\n                        use24hFormat: true,\n                        // This is called when the user changes the dateTime.\n                        onDateTimeChanged: (DateTime newDateTime) {\n                          setState(() => dateTime = newDateTime);\n                        },\n                      ),\n                    ),\n                    // In this example, the time value is formatted manually. You\n                    // can use the intl package to format the value based on the\n                    // user's locale settings.\n                    child: Text(\n                      '${dateTime.month}-${dateTime.day}-${dateTime.year} ${dateTime.hour}:${dateTime.minute}',\n                      style: const TextStyle(\n                        fontSize: 22.0,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n// This class simply decorates a row of widgets.\nclass _DatePickerItem extends StatelessWidget {\n  const _DatePickerItem({required this.children});\n\n  final List<Widget> children;\n\n  @override\n  Widget build(BuildContext context) {\n    return DecoratedBox(\n      decoration: const BoxDecoration(\n        border: Border(\n          top: BorderSide(\n            color: CupertinoColors.inactiveGray,\n            width: 0.0,\n          ),\n          bottom: BorderSide(\n            color: CupertinoColors.inactiveGray,\n            width: 0.0,\n          ),\n        ),\n      ),\n      child: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 16.0),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: children,\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoFormRow-class.html",
  "title": "CupertinoFormRow class - cupertino library - Dart API",
  "documentation_content": "CupertinoFormRow class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoFormRow class\nCupertinoFormRow\nbrightness_4\nbrightness_5\ndescription\nCupertinoFormRow class\nAn iOS-style form row.\nCreates an iOS-style split form row with a standard prefix and child widget.\nAlso provides a space for error and helper widgets that appear underneath.\nThe child parameter is required. This widget is displayed at the end of\nthe row.\nThe prefix parameter is optional and is displayed at the start of the\nrow. Standard iOS guidelines encourage passing a Text widget to prefix\nto detail the nature of the row's child widget.\nThe padding parameter is used to pad the contents of the row. It defaults\nto the standard iOS padding. If no edge insets are intended, explicitly pass\nEdgeInsets.zero to padding.\nThe helper and error parameters are both optional widgets targeted at\ndisplaying more information about the row. Both widgets are placed\nunderneath the prefix and child, and will expand the row's height to\naccommodate for their presence. When a Text is given to error, it will\nbe shown in CupertinoColors.destructiveRed coloring and\nmedium-weighted font.\nCreates a CupertinoFormSection containing a CupertinoFormRow with prefix,\nchild, helper and error specified.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoFormRow.1 mysample\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nCupertinoFormRow\nConstructors\nCupertinoFormRow({Key? key, required Widget child, Widget? prefix, EdgeInsetsGeometry? padding, Widget? helper, Widget? error})\nCreates an iOS-style split form row with a standard prefix and child widget.\nAlso provides a space for error and helper widgets that appear underneath.\nconst\nProperties\nchild\n\u2192 Widget\nChild widget.\nfinal\nerror\n\u2192 Widget?\nA widget that is displayed underneath the prefix and child widgets.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhelper\n\u2192 Widget?\nA widget that is displayed underneath the prefix and child widgets.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\npadding\n\u2192 EdgeInsetsGeometry?\nContent padding for the row.\nfinal\nprefix\n\u2192 Widget?\nA widget that is displayed at the start of the row.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoFormRow class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoFormRow].\n\nvoid main() => runApp(const CupertinoFormRowApp());\n\nclass CupertinoFormRowApp extends StatelessWidget {\n  const CupertinoFormRowApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoFormRowExample(),\n    );\n  }\n}\n\nclass CupertinoFormRowExample extends StatefulWidget {\n  const CupertinoFormRowExample({super.key});\n\n  @override\n  State<CupertinoFormRowExample> createState() =>\n      _CupertinoFormRowExampleState();\n}\n\nclass _CupertinoFormRowExampleState extends State<CupertinoFormRowExample> {\n  bool airplaneMode = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoFormSection Sample'),\n      ),\n      // Add safe area widget to place the CupertinoFormSection below the navigation bar.\n      child: SafeArea(\n        child: CupertinoFormSection(\n          header: const Text('Connectivity'),\n          children: <Widget>[\n            CupertinoFormRow(\n              prefix: const PrefixWidget(\n                icon: CupertinoIcons.airplane,\n                title: 'Airplane Mode',\n                color: CupertinoColors.systemOrange,\n              ),\n              child: CupertinoSwitch(\n                value: airplaneMode,\n                onChanged: (bool value) {\n                  setState(() {\n                    airplaneMode = value;\n                  });\n                },\n              ),\n            ),\n            const CupertinoFormRow(\n              prefix: PrefixWidget(\n                icon: CupertinoIcons.wifi,\n                title: 'Wi-Fi',\n                color: CupertinoColors.systemBlue,\n              ),\n              error: Text('Home network unavailable'),\n              child: Row(\n                mainAxisAlignment: MainAxisAlignment.end,\n                children: <Widget>[\n                  Text('Not connected'),\n                  SizedBox(width: 5),\n                  Icon(CupertinoIcons.forward)\n                ],\n              ),\n            ),\n            const CupertinoFormRow(\n              prefix: PrefixWidget(\n                icon: CupertinoIcons.bluetooth,\n                title: 'Bluetooth',\n                color: CupertinoColors.activeBlue,\n              ),\n              helper: Padding(\n                padding: EdgeInsets.symmetric(vertical: 4.0),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                  children: <Widget>[\n                    Text('Headphone'),\n                    Text('Connected'),\n                  ],\n                ),\n              ),\n              child: Row(\n                mainAxisAlignment: MainAxisAlignment.end,\n                children: <Widget>[\n                  Text('On'),\n                  SizedBox(width: 5),\n                  Icon(CupertinoIcons.forward),\n                ],\n              ),\n            ),\n            const CupertinoFormRow(\n              prefix: PrefixWidget(\n                icon: CupertinoIcons.bluetooth,\n                title: 'Mobile Data',\n                color: CupertinoColors.systemGreen,\n              ),\n              child: Icon(CupertinoIcons.forward),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass PrefixWidget extends StatelessWidget {\n  const PrefixWidget({\n    super.key,\n    required this.icon,\n    required this.title,\n    required this.color,\n  });\n\n  final IconData icon;\n  final String title;\n  final Color color;\n\n  @override\n  Widget build(BuildContext context) {\n    return Row(\n      children: <Widget>[\n        Container(\n          padding: const EdgeInsets.all(4.0),\n          decoration: BoxDecoration(\n            color: color,\n            borderRadius: BorderRadius.circular(4.0),\n          ),\n          child: Icon(icon, color: CupertinoColors.white),\n        ),\n        const SizedBox(width: 15),\n        Text(title)\n      ],\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoListSection-class.html",
  "title": "CupertinoListSection class - cupertino library - Dart API",
  "documentation_content": "CupertinoListSection class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoListSection class\nCupertinoListSection\nbrightness_4\nbrightness_5\ndescription\nCupertinoListSection class\nAn iOS-style list section.\nThe CupertinoListSection is a container for children widgets. These are\nmost often CupertinoListTiles.\nThe base constructor for CupertinoListSection constructs an\nedge-to-edge style section which includes an iOS-style header, the dividers\nbetween rows, and borders on top and bottom of the rows. An example of such\nlist section are sections in iOS Settings app.\nThe CupertinoListSection.insetGrouped constructor creates a round-edged\nand padded section that is seen in iOS Notes and Reminders apps. It creates\nan iOS-style header, and the dividers between rows. Does not create borders\non top and bottom of the rows.\nThe section header lies above the children rows, with margins and style\nthat match the iOS style.\nThe section footer lies below the children rows and is used to provide\nadditional information for current list section.\nThe children is the list of widgets to be displayed in this list section.\nTypically, the children are of type CupertinoListTile, however these is\nnot enforced.\nThe margin is used to provide spacing around the content area of the\nsection encapsulating children.\nThe decoration of children specifies how they should be decorated. If it\nis not provided in constructor, the background color of children defaults\nto CupertinoColors.secondarySystemGroupedBackground and border radius of\nchildren group defaults to 10.0 circular radius when constructing with\nCupertinoListSection.insetGrouped. Defaults to zero radius for the\nstandard CupertinoListSection constructor.\nThe dividerMargin and additionalDividerMargin specify the starting\nmargin of the divider between list tiles. The dividerMargin is always\npresent, but additionalDividerMargin is only added to the dividerMargin\nif hasLeading is set to true in the constructor, which is the default\nvalue.\nThe backgroundColor of the section defaults to\nCupertinoColors.systemGroupedBackground.\nThe content will be clipped (or not) according to this option.\nSee the enum Clip for details of all possible options and their common\nuse cases.\nCreates a base CupertinoListSection containing CupertinoListTiles with\nleading, title, additionalInfo and trailing widgets.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoListSection.1 mysample\nCreates an \"Inset Grouped\" CupertinoListSection containing\nnotched CupertinoListTiles with leading, title, additionalInfo and\ntrailing widgets.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoListSection.2 mysample\nSee also:\nCupertinoListTile, an iOS-style list tile, a typical child of\nCupertinoListSection.\nCupertinoFormSection, an iOS-style form section.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nCupertinoListSection\nConstructors\nCupertinoListSection({Key? key, List<Widget>? children, Widget? header, Widget? footer, EdgeInsetsGeometry margin = _kDefaultRowsMargin, Color backgroundColor = CupertinoColors.systemGroupedBackground, BoxDecoration? decoration, Clip clipBehavior = Clip.none, double dividerMargin = _kBaseDividerMargin, double? additionalDividerMargin, double? topMargin = _kMarginTop, bool hasLeading = true, Color? separatorColor})\nCreates a section that mimics standard iOS forms.\nconst\nCupertinoListSection.insetGrouped({Key? key, List<Widget>? children, Widget? header, Widget? footer, EdgeInsetsGeometry? margin, Color backgroundColor = CupertinoColors.systemGroupedBackground, BoxDecoration? decoration, Clip clipBehavior = Clip.hardEdge, double dividerMargin = _kInsetDividerMargin, double? additionalDividerMargin, double? topMargin, bool hasLeading = true, Color? separatorColor})\nCreates a section that mimics standard \"Inset Grouped\" iOS list section.\nconst\nProperties\nadditionalDividerMargin\n\u2192 double\nAdditional starting inset of the divider used between rows. This is used\nwhen adding a leading icon to children and a divider should start at the\ntext inset instead of the icon.\nfinal\nbackgroundColor\n\u2192 Color\nSets the background color behind the section.\nfinal\nchildren\n\u2192 List<Widget>?\nThe list of rows in the section. Usually a list of CupertinoListTiles.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ndecoration\n\u2192 BoxDecoration?\nSets the decoration around children.\nfinal\ndividerMargin\n\u2192 double\nThe starting offset of a margin between two list tiles.\nfinal\nfooter\n\u2192 Widget?\nSets the form section footer. The section footer lies below the children\nrows. Usually a Text widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheader\n\u2192 Widget?\nSets the form section header. The section header lies above the children\nrows. Usually a Text widget.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmargin\n\u2192 EdgeInsetsGeometry\nMargin around the content area of the section encapsulating children.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nseparatorColor\n\u2192 Color?\nSets the color for the dividers between rows, and borders on top and\nbottom of the rows.\nfinal\ntopMargin\n\u2192 double?\nMargin above the list section. Only used in edge-to-edge variant and it\nmatches iOS style by default.\nfinal\ntype\n\u2192 CupertinoListSectionType\nThe type of list section, either base or inset grouped.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoListSection class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for base [CupertinoListSection] and [CupertinoListTile].\n\nvoid main() => runApp(const CupertinoListSectionBaseApp());\n\nclass CupertinoListSectionBaseApp extends StatelessWidget {\n  const CupertinoListSectionBaseApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      home: ListSectionBaseExample(),\n    );\n  }\n}\n\nclass ListSectionBaseExample extends StatelessWidget {\n  const ListSectionBaseExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      child: CupertinoListSection(\n        header: const Text('My Reminders'),\n        children: <CupertinoListTile>[\n          CupertinoListTile(\n            title: const Text('Open pull request'),\n            leading: Container(\n              width: double.infinity,\n              height: double.infinity,\n              color: CupertinoColors.activeGreen,\n            ),\n            trailing: const CupertinoListTileChevron(),\n            onTap: () => Navigator.of(context).push(\n              CupertinoPageRoute<void>(\n                builder: (BuildContext context) {\n                  return const _SecondPage(text: 'Open pull request');\n                },\n              ),\n            ),\n          ),\n          CupertinoListTile(\n            title: const Text('Push to master'),\n            leading: Container(\n              width: double.infinity,\n              height: double.infinity,\n              color: CupertinoColors.systemRed,\n            ),\n            additionalInfo: const Text('Not available'),\n          ),\n          CupertinoListTile(\n            title: const Text('View last commit'),\n            leading: Container(\n              width: double.infinity,\n              height: double.infinity,\n              color: CupertinoColors.activeOrange,\n            ),\n            additionalInfo: const Text('12 days ago'),\n            trailing: const CupertinoListTileChevron(),\n            onTap: () => Navigator.of(context).push(\n              CupertinoPageRoute<void>(\n                builder: (BuildContext context) {\n                  return const _SecondPage(text: 'Last commit');\n                },\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass _SecondPage extends StatelessWidget {\n  const _SecondPage({required this.text});\n\n  final String text;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      child: Center(\n        child: Text(text),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for inset [CupertinoListSection] and [CupertinoListTile].\n\nvoid main() => runApp(const CupertinoListSectionInsetApp());\n\nclass CupertinoListSectionInsetApp extends StatelessWidget {\n  const CupertinoListSectionInsetApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      home: ListSectionInsetExample(),\n    );\n  }\n}\n\nclass ListSectionInsetExample extends StatelessWidget {\n  const ListSectionInsetExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      child: CupertinoListSection.insetGrouped(\n        header: const Text('My Reminders'),\n        children: <CupertinoListTile>[\n          CupertinoListTile.notched(\n            title: const Text('Open pull request'),\n            leading: Container(\n              width: double.infinity,\n              height: double.infinity,\n              color: CupertinoColors.activeGreen,\n            ),\n            trailing: const CupertinoListTileChevron(),\n            onTap: () => Navigator.of(context).push(\n              CupertinoPageRoute<void>(\n                builder: (BuildContext context) {\n                  return const _SecondPage(text: 'Open pull request');\n                },\n              ),\n            ),\n          ),\n          CupertinoListTile.notched(\n            title: const Text('Push to master'),\n            leading: Container(\n              width: double.infinity,\n              height: double.infinity,\n              color: CupertinoColors.systemRed,\n            ),\n            additionalInfo: const Text('Not available'),\n          ),\n          CupertinoListTile.notched(\n            title: const Text('View last commit'),\n            leading: Container(\n              width: double.infinity,\n              height: double.infinity,\n              color: CupertinoColors.activeOrange,\n            ),\n            additionalInfo: const Text('12 days ago'),\n            trailing: const CupertinoListTileChevron(),\n            onTap: () => Navigator.of(context).push(\n              CupertinoPageRoute<void>(\n                builder: (BuildContext context) {\n                  return const _SecondPage(text: 'Last commit');\n                },\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass _SecondPage extends StatelessWidget {\n  const _SecondPage({required this.text});\n\n  final String text;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      child: Center(\n        child: Text(text),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoNavigationBar-class.html",
  "title": "CupertinoNavigationBar class - cupertino library - Dart API",
  "documentation_content": "CupertinoNavigationBar class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoNavigationBar class\nCupertinoNavigationBar\nbrightness_4\nbrightness_5\ndescription\nCupertinoNavigationBar class\nAn iOS-styled navigation bar.\nThe navigation bar is a toolbar that minimally consists of a widget, normally\na page title, in the middle of the toolbar.\nIt also supports a leading and trailing widget before and after the\nmiddle widget while keeping the middle widget centered.\nThe leading widget will automatically be a back chevron icon button (or a\nclose button in case of a fullscreen dialog) to pop the current route if none\nis provided and automaticallyImplyLeading is true (true by default).\nThe middle widget will automatically be a title text from the current\nCupertinoPageRoute if none is provided and automaticallyImplyMiddle is\ntrue (true by default).\nIt should be placed at top of the screen and automatically accounts for\nthe OS's status bar.\nIf the given backgroundColor's opacity is not 1.0 (which is the case by\ndefault), it will produce a blurring effect to the content behind it.\nWhen transitionBetweenRoutes is true, this navigation bar will transition\non top of the routes instead of inside them if the route being transitioned\nto also has a CupertinoNavigationBar or a CupertinoSliverNavigationBar\nwith transitionBetweenRoutes set to true. If transitionBetweenRoutes is\ntrue, none of the Widget parameters can contain a key in its subtree since\nthat widget will exist in multiple places in the tree simultaneously.\nBy default, only one CupertinoNavigationBar or CupertinoSliverNavigationBar\nshould be present in each PageRoute to support the default transitions.\nUse transitionBetweenRoutes or heroTag to customize the transition\nbehavior for multiple navigation bars per route.\nWhen used in a CupertinoPageScaffold, CupertinoPageScaffold.navigationBar\ndisables text scaling to match the native iOS behavior. To override\nthis behavior, wrap each of the navigationBar's components inside a\nMediaQuery with the desired TextScaler.\nThis example shows a CupertinoNavigationBar placed in a CupertinoPageScaffold.\nSince backgroundColor's opacity is not 1.0, there is a blur effect and\ncontent slides underneath.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoNavigationBar.1 mysample\nSee also:\nCupertinoPageScaffold, a page layout helper typically hosting the\nCupertinoNavigationBar.\nCupertinoSliverNavigationBar for a navigation bar to be placed in a\nscrolling list and that supports iOS-11-style large titles.\ndeveloper.apple.com/design/human-interface-guidelines/ios/bars/navigation-bars/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoNavigationBar\nImplemented types\nObstructingPreferredSizeWidget\nConstructors\nCupertinoNavigationBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag})\nCreates a navigation bar in the iOS style.\nconst\nProperties\nautomaticallyImplyLeading\n\u2192 bool\nControls whether we should try to imply the leading widget if null.\nfinal\nautomaticallyImplyMiddle\n\u2192 bool\nControls whether we should try to imply the middle widget if null.\nfinal\nbackgroundColor\n\u2192 Color?\nThe background color of the navigation bar. If it contains transparency, the\ntab bar will automatically produce a blurring effect to the content\nbehind it.\nfinal\nborder\n\u2192 Border?\nThe border of the navigation bar. By default renders a single pixel bottom border side.\nfinal\nbrightness\n\u2192 Brightness?\nThe brightness of the specified backgroundColor.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheroTag\n\u2192 Object\nTag for the navigation bar's Hero widget if transitionBetweenRoutes is true.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nleading\n\u2192 Widget?\nWidget to place at the start of the navigation bar. Normally a back button\nfor a normal page or a cancel button for full page dialogs.\nfinal\nmiddle\n\u2192 Widget?\nWidget to place in the middle of the navigation bar. Normally a title or\na segmented control.\nfinal\npadding\n\u2192 EdgeInsetsDirectional?\nPadding for the contents of the navigation bar.\nfinal\npreferredSize\n\u2192 Size\nThe size this widget would prefer if it were otherwise unconstrained.\nread-onlyoverride\npreviousPageTitle\n\u2192 String?\nManually specify the previous route's title when automatically implying\nthe leading back button.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\ntrailing\n\u2192 Widget?\nWidget to place at the end of the navigation bar. Normally additional actions\ntaken on the page such as a search or edit function.\nfinal\ntransitionBetweenRoutes\n\u2192 bool\nWhether to transition between navigation bars.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoNavigationBar>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nshouldFullyObstruct(BuildContext context)\n\u2192 bool\nTrue if the navigation bar's background color has no transparency.\noverride\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoNavigationBar class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoNavigationBar].\n\nvoid main() => runApp(const NavBarApp());\n\nclass NavBarApp extends StatelessWidget {\n  const NavBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: NavBarExample(),\n    );\n  }\n}\n\nclass NavBarExample extends StatefulWidget {\n  const NavBarExample({super.key});\n\n  @override\n  State<NavBarExample> createState() => _NavBarExampleState();\n}\n\nclass _NavBarExampleState extends State<NavBarExample> {\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: CupertinoNavigationBar(\n        // Try removing opacity to observe the lack of a blur effect and of sliding content.\n        backgroundColor: CupertinoColors.systemGrey.withOpacity(0.5),\n        middle: const Text('CupertinoNavigationBar Sample'),\n      ),\n      child: Column(\n        children: <Widget>[\n          Container(height: 50, color: CupertinoColors.systemRed),\n          Container(height: 50, color: CupertinoColors.systemGreen),\n          Container(height: 50, color: CupertinoColors.systemBlue),\n          Container(height: 50, color: CupertinoColors.systemYellow),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoPageScaffold-class.html",
  "title": "CupertinoPageScaffold class - cupertino library - Dart API",
  "documentation_content": "CupertinoPageScaffold class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoPageScaffold class\nCupertinoPageScaffold\nbrightness_4\nbrightness_5\ndescription\nCupertinoPageScaffold class\nImplements a single iOS application page's layout.\nThe scaffold lays out the navigation bar on top and the content between or\nbehind the navigation bar.\nWhen tapping a status bar at the top of the CupertinoPageScaffold, an\nanimation will complete for the current primary ScrollView, scrolling to\nthe beginning. This is done using the PrimaryScrollController that\nencloses the ScrollView. The ScrollView.primary flag is used to connect\na ScrollView to the enclosing PrimaryScrollController.\nThis example shows a CupertinoPageScaffold with a ListView as a child.\nThe CupertinoButton is connected to a callback that increments a counter.\nThe backgroundColor can be changed.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoPageScaffold.1 mysample\nSee also:\nCupertinoTabScaffold, a similar widget for tabbed applications.\nCupertinoPageRoute, a modal page route that typically hosts a\nCupertinoPageScaffold with support for iOS-style page transitions.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoPageScaffold\nConstructors\nCupertinoPageScaffold({Key? key, ObstructingPreferredSizeWidget? navigationBar, Color? backgroundColor, bool resizeToAvoidBottomInset = true, required Widget child})\nCreates a layout for pages with a navigation bar at the top.\nconst\nProperties\nbackgroundColor\n\u2192 Color?\nThe color of the widget that underlies the entire scaffold.\nfinal\nchild\n\u2192 Widget\nWidget to show in the main content area.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nnavigationBar\n\u2192 ObstructingPreferredSizeWidget?\nThe navigationBar, typically a CupertinoNavigationBar, is drawn at the\ntop of the screen.\nfinal\nresizeToAvoidBottomInset\n\u2192 bool\nWhether the child should size itself to avoid the window's bottom inset.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoPageScaffold>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoPageScaffold class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoPageScaffold].\n\nvoid main() => runApp(const PageScaffoldApp());\n\nclass PageScaffoldApp extends StatelessWidget {\n  const PageScaffoldApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: PageScaffoldExample(),\n    );\n  }\n}\n\nclass PageScaffoldExample extends StatefulWidget {\n  const PageScaffoldExample({super.key});\n\n  @override\n  State<PageScaffoldExample> createState() => _PageScaffoldExampleState();\n}\n\nclass _PageScaffoldExampleState extends State<PageScaffoldExample> {\n  int _count = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      // Uncomment to change the background color\n      // backgroundColor: CupertinoColors.systemPink,\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoPageScaffold Sample'),\n      ),\n      child: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Center(\n              child: Text('You have pressed the button $_count times.'),\n            ),\n            const SizedBox(height: 20.0),\n            Center(\n              child: CupertinoButton.filled(\n                onPressed: () => setState(() => _count++),\n                child: const Icon(CupertinoIcons.add),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoPicker-class.html",
  "title": "CupertinoPicker class - cupertino library - Dart API",
  "documentation_content": "CupertinoPicker class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoPicker class\nCupertinoPicker\nbrightness_4\nbrightness_5\ndescription\nCupertinoPicker class\nAn iOS-styled picker.\nDisplays its children widgets on a wheel for selection and\ncalls back when the currently selected item changes.\nBy default, the first child in children will be the initially selected child.\nThe index of a different child can be specified in scrollController, to make\nthat child the initially selected child.\nCan be used with showCupertinoModalPopup to display the picker modally at the\nbottom of the screen. When calling showCupertinoModalPopup, be sure to set\nsemanticsDismissible to true to enable dismissing the modal via semantics.\nSizes itself to its parent. All children are sized to the same size based\non itemExtent.\nBy default, descendent texts are shown with CupertinoTextThemeData.pickerTextStyle.\nThis example shows a CupertinoPicker that displays a list of fruits on a wheel for\nselection.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoPicker.1 mysample\nSee also:\nListWheelScrollView, the generic widget backing this picker without\nthe iOS design specific chrome.\ndeveloper.apple.com/ios/human-interface-guidelines/controls/pickers/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoPicker\nConstructors\nCupertinoPicker({Key? key, double diameterRatio = _kDefaultDiameterRatio, Color? backgroundColor, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, FixedExtentScrollController? scrollController, double squeeze = _kSqueeze, required double itemExtent, required ValueChanged<int>? onSelectedItemChanged, required List<Widget> children, Widget? selectionOverlay = const CupertinoPickerDefaultSelectionOverlay(), bool looping = false})\nCreates a picker from a concrete list of children.\nCupertinoPicker.builder({Key? key, double diameterRatio = _kDefaultDiameterRatio, Color? backgroundColor, double offAxisFraction = 0.0, bool useMagnifier = false, double magnification = 1.0, FixedExtentScrollController? scrollController, double squeeze = _kSqueeze, required double itemExtent, required ValueChanged<int>? onSelectedItemChanged, required NullableIndexedWidgetBuilder itemBuilder, int? childCount, Widget? selectionOverlay = const CupertinoPickerDefaultSelectionOverlay()})\nCreates a picker from an IndexedWidgetBuilder callback where the builder\nis dynamically invoked during layout.\nProperties\nbackgroundColor\n\u2192 Color?\nBackground color behind the children.\nfinal\nchildDelegate\n\u2192 ListWheelChildDelegate\nA delegate that lazily instantiates children.\nfinal\ndiameterRatio\n\u2192 double\nRelative ratio between this picker's height and the simulated cylinder's diameter.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nitemExtent\n\u2192 double\nThe uniform height of all children.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmagnification\n\u2192 double\nThe zoomed-in rate of the magnifier, if it is used.\nfinal\noffAxisFraction\n\u2192 double\nHow much the wheel is horizontally off-center, as a fraction of its width.\nThis property creates the visual effect of looking at a vertical wheel from\nits side where its vanishing points at the edge curves to one side instead\nof looking at the wheel head-on.\nfinal\nonSelectedItemChanged\n\u2192 ValueChanged<int>?\nAn option callback when the currently centered item changes.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nscrollController\n\u2192 FixedExtentScrollController?\nA FixedExtentScrollController to read and control the current item, and\nto set the initial item.\nfinal\nselectionOverlay\n\u2192 Widget?\nA widget overlaid on the picker to highlight the currently selected entry.\nfinal\nsqueeze\n\u2192 double\nThe angular compactness of the children on the wheel.\nfinal\nuseMagnifier\n\u2192 bool\nWhether to use the magnifier for the center item of the wheel.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<StatefulWidget>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoPicker class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoPicker].\n\nconst double _kItemExtent = 32.0;\nconst List<String> _fruitNames = <String>[\n  'Apple',\n  'Mango',\n  'Banana',\n  'Orange',\n  'Pineapple',\n  'Strawberry',\n];\n\nvoid main() => runApp(const CupertinoPickerApp());\n\nclass CupertinoPickerApp extends StatelessWidget {\n  const CupertinoPickerApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoPickerExample(),\n    );\n  }\n}\n\nclass CupertinoPickerExample extends StatefulWidget {\n  const CupertinoPickerExample({super.key});\n\n  @override\n  State<CupertinoPickerExample> createState() => _CupertinoPickerExampleState();\n}\n\nclass _CupertinoPickerExampleState extends State<CupertinoPickerExample> {\n  int _selectedFruit = 0;\n\n  // This shows a CupertinoModalPopup with a reasonable fixed height which hosts CupertinoPicker.\n  void _showDialog(Widget child) {\n    showCupertinoModalPopup<void>(\n      context: context,\n      builder: (BuildContext context) => Container(\n        height: 216,\n        padding: const EdgeInsets.only(top: 6.0),\n        // The Bottom margin is provided to align the popup above the system navigation bar.\n        margin: EdgeInsets.only(\n          bottom: MediaQuery.of(context).viewInsets.bottom,\n        ),\n        // Provide a background color for the popup.\n        color: CupertinoColors.systemBackground.resolveFrom(context),\n        // Use a SafeArea widget to avoid system overlaps.\n        child: SafeArea(\n          top: false,\n          child: child,\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoPicker Sample'),\n      ),\n      child: DefaultTextStyle(\n        style: TextStyle(\n          color: CupertinoColors.label.resolveFrom(context),\n          fontSize: 22.0,\n        ),\n        child: Center(\n          child: Row(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              const Text('Selected fruit: '),\n              CupertinoButton(\n                padding: EdgeInsets.zero,\n                // Display a CupertinoPicker with list of fruits.\n                onPressed: () => _showDialog(\n                  CupertinoPicker(\n                    magnification: 1.22,\n                    squeeze: 1.2,\n                    useMagnifier: true,\n                    itemExtent: _kItemExtent,\n                    // This sets the initial item.\n                    scrollController: FixedExtentScrollController(\n                      initialItem: _selectedFruit,\n                    ),\n                    // This is called when selected item is changed.\n                    onSelectedItemChanged: (int selectedItem) {\n                      setState(() {\n                        _selectedFruit = selectedItem;\n                      });\n                    },\n                    children:\n                        List<Widget>.generate(_fruitNames.length, (int index) {\n                      return Center(child: Text(_fruitNames[index]));\n                    }),\n                  ),\n                ),\n                // This displays the selected fruit name.\n                child: Text(\n                  _fruitNames[_selectedFruit],\n                  style: const TextStyle(\n                    fontSize: 22.0,\n                  ),\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoRadio-class.html",
  "title": "CupertinoRadio class - cupertino library - Dart API",
  "documentation_content": "CupertinoRadio class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoRadio<T> class\nCupertinoRadio\nbrightness_4\nbrightness_5\ndescription\nCupertinoRadio<T> class\nA macOS-style radio button.\nUsed to select between a number of mutually exclusive values. When one radio\nbutton in a group is selected, the other radio buttons in the group are\ndeselected. The values are of type T, the type parameter of the\nCupertinoRadio class. Enums are commonly used for this purpose.\nThe radio button itself does not maintain any state. Instead, selecting the\nradio invokes the onChanged callback, passing value as a parameter. If\ngroupValue and value match, this radio will be selected. Most widgets\nwill respond to onChanged by calling State.setState to update the\nradio button's groupValue.\nHere is an example of CupertinoRadio widgets wrapped in CupertinoListTiles.\nThe currently selected character is passed into groupValue, which is\nmaintained by the example's State. In this case, the first CupertinoRadio\nwill start off selected because _character is initialized to\nSingingCharacter.lafayette.\nIf the second radio button is pressed, the example's state is updated\nwith setState, updating _character to SingingCharacter.jefferson.\nThis causes the buttons to rebuild with the updated groupValue, and\ntherefore the selection of the second button.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoRadio.1 mysample\nSee also:\nCupertinoSlider, for selecting a value in a range.\nCupertinoCheckbox and CupertinoSwitch, for toggling a particular value on or off.\nRadio, the Material Design equivalent.\ndeveloper.apple.com/design/human-interface-guidelines/components/selection-and-input/toggles/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoRadio\nConstructors\nCupertinoRadio({Key? key, required T value, required T? groupValue, required ValueChanged<T?>? onChanged, bool toggleable = false, Color? activeColor, Color? inactiveColor, Color? fillColor, Color? focusColor, FocusNode? focusNode, bool autofocus = false, bool useCheckmarkStyle = false})\nCreates a macOS-styled radio button.\nconst\nProperties\nactiveColor\n\u2192 Color?\nThe color to use when this radio button is selected.\nfinal\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\nfillColor\n\u2192 Color?\nThe color that fills the inner circle of the radio button when selected.\nfinal\nfocusColor\n\u2192 Color?\nThe color for the radio's border when it has the input focus.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\ngroupValue\n\u2192 T?\nThe currently selected value for a group of radio buttons.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninactiveColor\n\u2192 Color?\nThe color to use when this radio button is not selected.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonChanged\n\u2192 ValueChanged<T?>?\nCalled when the user selects this CupertinoRadio button.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\ntoggleable\n\u2192 bool\nSet to true if this radio button is allowed to be returned to an\nindeterminate state by selecting it again when selected.\nfinal\nuseCheckmarkStyle\n\u2192 bool\nControls whether the radio displays in a checkbox style or the default iOS\nradio style.\nfinal\nvalue\n\u2192 T\nThe value represented by this radio button.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoRadio<T>>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoRadio<T> class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoRadio].\n\nvoid main() => runApp(const CupertinoRadioApp());\n\nclass CupertinoRadioApp extends StatelessWidget {\n  const CupertinoRadioApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoPageScaffold(\n        navigationBar: CupertinoNavigationBar(\n          middle: Text('CupertinoRadio Example'),\n        ),\n        child: SafeArea(\n          child: CupertinoRadioExample(),\n        ),\n      ),\n    );\n  }\n}\n\nenum SingingCharacter { lafayette, jefferson }\n\nclass CupertinoRadioExample extends StatefulWidget {\n  const CupertinoRadioExample({super.key});\n\n  @override\n  State<CupertinoRadioExample> createState() => _CupertinoRadioExampleState();\n}\n\nclass _CupertinoRadioExampleState extends State<CupertinoRadioExample> {\n  SingingCharacter? _character = SingingCharacter.lafayette;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoListSection(\n      children: <Widget>[\n        CupertinoListTile(\n          title: const Text('Lafayette'),\n          leading: CupertinoRadio<SingingCharacter>(\n            value: SingingCharacter.lafayette,\n            groupValue: _character,\n            onChanged: (SingingCharacter? value) {\n              setState(() {\n                _character = value;\n              });\n            },\n          ),\n        ),\n        CupertinoListTile(\n          title: const Text('Thomas Jefferson'),\n          leading: CupertinoRadio<SingingCharacter>(\n            value: SingingCharacter.jefferson,\n            groupValue: _character,\n            onChanged: (SingingCharacter? value) {\n              setState(() {\n                _character = value;\n              });\n            },\n          ),\n        ),\n      ],\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoRadio/toggleable.html",
  "title": "toggleable property - CupertinoRadio class - cupertino library - Dart API",
  "documentation_content": "toggleable property - CupertinoRadio class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoRadio<T>\ntoggleable property\ntoggleable\nbrightness_4\nbrightness_5\ndescription\ntoggleable property\nbool\ntoggleable\nfinal\nSet to true if this radio button is allowed to be returned to an\nindeterminate state by selecting it again when selected.\nTo indicate returning to an indeterminate state, onChanged will be\ncalled with null.\nIf true, onChanged can be called with value when selected while\ngroupValue != value, or with null when selected again while\ngroupValue == value.\nIf false, onChanged will be called with value when it is selected\nwhile groupValue != value, and only by selecting another radio button\nin the group (i.e. changing the value of groupValue) can this radio\nbutton be unselected.\nThe default is false.\nThis example shows how to enable deselecting a radio button by setting the\ntoggleable attribute.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoRadio.toggleable.1 mysample\nImplementation\nfinal bool toggleable;\nFlutter\ncupertino\nCupertinoRadio<T>\ntoggleable property\nCupertinoRadio class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoRadio.toggleable].\n\nvoid main() => runApp(const CupertinoRadioApp());\n\nclass CupertinoRadioApp extends StatelessWidget {\n  const CupertinoRadioApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      home: CupertinoPageScaffold(\n        navigationBar: CupertinoNavigationBar(\n          middle: Text('CupertinoRadio Toggleable Example'),\n        ),\n        child: SafeArea(\n          child: CupertinoRadioExample(),\n        ),\n      ),\n    );\n  }\n}\n\nenum SingingCharacter { mulligan, hamilton }\n\nclass CupertinoRadioExample extends StatefulWidget {\n  const CupertinoRadioExample({super.key});\n\n  @override\n  State<CupertinoRadioExample> createState() => _CupertinoRadioExampleState();\n}\n\nclass _CupertinoRadioExampleState extends State<CupertinoRadioExample> {\n  SingingCharacter? _character = SingingCharacter.mulligan;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoListSection(\n      children: <Widget>[\n        CupertinoListTile(\n          title: const Text('Hercules Mulligan'),\n          leading: CupertinoRadio<SingingCharacter>(\n            value: SingingCharacter.mulligan,\n            groupValue: _character,\n            // TRY THIS: Try setting the toggleable value to false and\n            // see how that changes the behavior of the widget.\n            toggleable: true,\n            onChanged: (SingingCharacter? value) {\n              setState(() {\n                _character = value;\n              });\n            },\n          ),\n        ),\n        CupertinoListTile(\n          title: const Text('Eliza Hamilton'),\n          leading: CupertinoRadio<SingingCharacter>(\n            value: SingingCharacter.hamilton,\n            groupValue: _character,\n            toggleable: true,\n            onChanged: (SingingCharacter? value) {\n              setState(() {\n                _character = value;\n              });\n            },\n          ),\n        ),\n      ],\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoScrollbar-class.html",
  "title": "CupertinoScrollbar class - cupertino library - Dart API",
  "documentation_content": "CupertinoScrollbar class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoScrollbar class\nCupertinoScrollbar\nbrightness_4\nbrightness_5\ndescription\nCupertinoScrollbar class\nAn iOS style scrollbar.\nTo add a scrollbar to a ScrollView, wrap the scroll view widget in\na CupertinoScrollbar widget.\nA scrollbar thumb indicates which portion of a ScrollView is actually\nvisible.\nBy default, the thumb will fade in and out as the child scroll view\nscrolls. When thumbVisibility is true, the scrollbar thumb will remain\nvisible without the fade animation. This requires that the ScrollController\nassociated with the Scrollable widget is provided to controller, or that\nthe PrimaryScrollController is being used by that Scrollable widget.\nIf the scrollbar is wrapped around multiple ScrollViews, it only responds to\nthe nearest ScrollView and shows the corresponding scrollbar thumb by default.\nThe notificationPredicate allows the ability to customize which\nScrollNotifications the Scrollbar should listen to.\nIf the child ScrollView is infinitely long, the RawScrollbar will not be\npainted. In this case, the scrollbar cannot accurately represent the\nrelative location of the visible area, or calculate the accurate delta to\napply when dragging on the thumb or tapping on the track.\nInteraction\nScrollbars are interactive and can use the PrimaryScrollController if\na controller is not set. Interactive Scrollbar thumbs can be dragged along\nthe main axis of the ScrollView to change the ScrollPosition. Tapping\nalong the track exclusive of the thumb will trigger a\nScrollIncrementType.page based on the relative position to the thumb.\nWhen using the PrimaryScrollController, it must not be attached to more\nthan one ScrollPosition. ScrollViews that have not been provided a\nScrollController and have a ScrollView.scrollDirection of\nAxis.vertical will automatically attach their ScrollPosition to the\nPrimaryScrollController. Provide a unique ScrollController to each\nScrollable in this case to prevent having multiple ScrollPositions\nattached to the PrimaryScrollController.\nThis sample shows an app with two scrollables in the same route. Since by\ndefault, there is one PrimaryScrollController per route, and they both have a\nscroll direction of Axis.vertical, they would both try to attach to that\ncontroller on mobile platforms. The Scrollbar cannot support multiple\npositions attached to the same controller, so one ListView, and its\nScrollbar have been provided a unique ScrollController. Desktop\nplatforms do not automatically attach to the PrimaryScrollController,\nrequiring ScrollView.primary to be true instead in order to use the\nPrimaryScrollController.\nAlternatively, a new PrimaryScrollController could be created above one of\nthe ListViews.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.RawScrollbar.1 mysample\nAutomatic Scrollbars on Desktop Platforms\nScrollbars are added to most Scrollable widgets by default on\nTargetPlatformVariant.desktop platforms. This is done through\nScrollBehavior.buildScrollbar as part of an app's\nScrollConfiguration. Scrollables that do not use the\nPrimaryScrollController or have a ScrollController provided to them\nwill receive a unique ScrollController for use with the Scrollbar. In this\ncase, only one Scrollable can be using the PrimaryScrollController, unless\ninteractive is false. To prevent Axis.vertical Scrollables from using\nthe PrimaryScrollController, set ScrollView.primary to false. Scrollable\nwidgets that do not have automatically applied Scrollbars include\nEditableText\nListWheelScrollView\nPageView\nNestedScrollView\nDropdownButton\nDefault Scrollbars can be disabled for the whole app by setting a\nScrollBehavior with scrollbars set to false.\nlink\ncontent_copy\nMaterialApp(\nscrollBehavior: const MaterialScrollBehavior()\n.copyWith(scrollbars: false),\nhome: Scaffold(\nappBar: AppBar(title: const Text('Home')),\n),\n)\nThis sample shows how to disable the default Scrollbar for a Scrollable\nwidget to avoid duplicate Scrollbars when running on desktop platforms.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.RawScrollbar.3 mysample\nWhen dragging a CupertinoScrollbar thumb, the thickness and radius will\nanimate from thickness and radius to thicknessWhileDragging and\nradiusWhileDragging, respectively.\nThis sample shows a CupertinoScrollbar that fades in and out of view as scrolling occurs.\nThe scrollbar will fade into view as the user scrolls, and fade out when scrolling stops.\nThe thickness of the scrollbar will animate from 6 pixels to the thicknessWhileDragging of 10\nwhen it is dragged by the user. The radius of the scrollbar thumb corners will animate from 34\nto the radiusWhileDragging of 0 when the scrollbar is being dragged by the user.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoScrollbar.1 mysample\nWhen thumbVisibility is true, the scrollbar thumb will remain visible without the\nfade animation. This requires that a ScrollController is provided to controller,\nor that the PrimaryScrollController is available.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoScrollbar.2 mysample\nSee also:\nListView, which displays a linear, scrollable list of children.\nGridView, which displays a 2 dimensional, scrollable array of children.\nScrollbar, a Material Design scrollbar.\nRawScrollbar, a basic scrollbar that fades in and out, extended\nby this class to add more animations and behaviors.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nRawScrollbar\nCupertinoScrollbar\nConstructors\nCupertinoScrollbar({Key? key, required Widget child, ScrollController? controller, bool? thumbVisibility, double thickness = defaultThickness, double thicknessWhileDragging = defaultThicknessWhileDragging, Radius radius = defaultRadius, Radius radiusWhileDragging = defaultRadiusWhileDragging, ScrollNotificationPredicate? notificationPredicate, ScrollbarOrientation? scrollbarOrientation})\nCreates an iOS style scrollbar that wraps the given child.\nconst\nProperties\nchild\n\u2192 Widget\nThe widget below this widget in the tree.\nfinalinherited\ncontroller\n\u2192 ScrollController?\nThe ScrollController used to implement Scrollbar dragging.\nfinalinherited\ncrossAxisMargin\n\u2192 double\nDistance from the scrollbar thumb's side to the nearest cross axis edge\nin logical pixels.\nfinalinherited\nfadeDuration\n\u2192 Duration\nThe Duration of the fade animation.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninteractive\n\u2192 bool?\nWhether the Scrollbar should be interactive and respond to dragging on the\nthumb, or tapping in the track area.\nfinalinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmainAxisMargin\n\u2192 double\nDistance from the scrollbar thumb's start or end to the nearest edge of\nthe viewport in logical pixels. It affects the amount of available\npaint area.\nfinalinherited\nminOverscrollLength\n\u2192 double?\nThe preferred smallest size the scrollbar thumb can shrink to when viewport is\noverscrolled.\nfinalinherited\nminThumbLength\n\u2192 double\nThe preferred smallest size the scrollbar thumb can shrink to when the total\nscrollable extent is large, the current visible viewport is small, and the\nviewport is not overscrolled.\nfinalinherited\nnotificationPredicate\n\u2192 ScrollNotificationPredicate\nA check that specifies whether a ScrollNotification should be\nhandled by this widget.\nfinalinherited\npadding\n\u2192 EdgeInsets?\nThe insets by which the scrollbar thumb and track should be padded.\nfinalinherited\npressDuration\n\u2192 Duration\nThe Duration of time that a LongPress will trigger the drag gesture of\nthe scrollbar thumb.\nfinalinherited\nradius\n\u2192 Radius?\nThe Radius of the scrollbar thumb's rounded rectangle corners.\nfinalinherited\nradiusWhileDragging\n\u2192 Radius\nThe radius of the scrollbar edges when the scrollbar is being dragged by\nthe user.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nscrollbarOrientation\n\u2192 ScrollbarOrientation?\nDictates the orientation of the scrollbar.\nfinalinherited\nshape\n\u2192 OutlinedBorder?\nThe OutlinedBorder of the scrollbar's thumb.\nfinalinherited\nthickness\n\u2192 double?\nThe thickness of the scrollbar in the cross axis of the scrollable.\nfinalinherited\nthicknessWhileDragging\n\u2192 double\nThe thickness of the scrollbar when it's being dragged by the user.\nfinal\nthumbColor\n\u2192 Color?\nThe color of the scrollbar thumb.\nfinalinherited\nthumbVisibility\n\u2192 bool?\nIndicates that the scrollbar thumb should be visible, even when a scroll\nis not underway.\nfinalinherited\ntimeToFade\n\u2192 Duration\nThe Duration of time until the fade animation begins.\nfinalinherited\ntrackBorderColor\n\u2192 Color?\nThe color of the scrollbar track's border.\nfinalinherited\ntrackColor\n\u2192 Color?\nThe color of the scrollbar track.\nfinalinherited\ntrackRadius\n\u2192 Radius?\nThe Radius of the scrollbar track's rounded rectangle corners.\nfinalinherited\ntrackVisibility\n\u2192 bool?\nIndicates that the scrollbar track should be visible.\nfinalinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 RawScrollbarState<CupertinoScrollbar>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nConstants\ndefaultRadius\n\u2192 const Radius\nDefault value for radius if it's not specified in CupertinoScrollbar.\nRadius.circular(1.5)\ndefaultRadiusWhileDragging\n\u2192 const Radius\nDefault value for radiusWhileDragging if it's not specified in\nCupertinoScrollbar.\nRadius.circular(4.0)\ndefaultThickness\n\u2192 const double\nDefault value for thickness if it's not specified in CupertinoScrollbar.\n3\ndefaultThicknessWhileDragging\n\u2192 const double\nDefault value for thicknessWhileDragging if it's not specified in\nCupertinoScrollbar.\n8.0\nFlutter\ncupertino\nCupertinoScrollbar class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Scrollbar].\n\nvoid main() => runApp(const ScrollbarApp());\n\nclass ScrollbarApp extends StatelessWidget {\n  const ScrollbarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Scrollbar Sample')),\n        body: const Center(\n          child: DesktopExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass DesktopExample extends StatefulWidget {\n  const DesktopExample({super.key});\n\n  @override\n  State<DesktopExample> createState() => _DesktopExampleState();\n}\n\nclass _DesktopExampleState extends State<DesktopExample> {\n  final ScrollController controller = ScrollController();\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n        builder: (BuildContext context, BoxConstraints constraints) {\n      return Row(\n        children: <Widget>[\n          SizedBox(\n              width: constraints.maxWidth / 2,\n              // When running this sample on desktop, two scrollbars will be\n              // visible here. One is the default scrollbar and the other is the\n              // Scrollbar widget with custom thickness.\n              child: Scrollbar(\n                thickness: 20.0,\n                thumbVisibility: true,\n                controller: controller,\n                child: ListView.builder(\n                  controller: controller,\n                  itemCount: 100,\n                  itemBuilder: (BuildContext context, int index) {\n                    return SizedBox(\n                      height: 50,\n                      child: Padding(\n                        padding: const EdgeInsets.all(8.0),\n                        child: Text('Scrollable 1 : Index $index'),\n                      ),\n                    );\n                  },\n                ),\n              )),\n          SizedBox(\n              width: constraints.maxWidth / 2,\n              // When running this sample on desktop, one scrollbar will be\n              // visible here. The default scrollbar is hidden by setting the\n              // ScrollConfiguration's scrollbars to false. The Scrollbar widget\n              // with custom thickness is visible.\n              child: Scrollbar(\n                thickness: 20.0,\n                thumbVisibility: true,\n                child: ScrollConfiguration(\n                  behavior: ScrollConfiguration.of(context)\n                      .copyWith(scrollbars: false),\n                  child: ListView.builder(\n                    primary: true,\n                    itemCount: 100,\n                    itemBuilder: (BuildContext context, int index) {\n                      return SizedBox(\n                        height: 50,\n                        child: Padding(\n                          padding: const EdgeInsets.all(8.0),\n                          child: Text('Scrollable 2 : Index $index'),\n                        ),\n                      );\n                    },\n                  ),\n                ),\n              )),\n        ],\n      );\n    });\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [RawScrollbar].\n\nvoid main() => runApp(const RawScrollbarExampleApp());\n\nclass RawScrollbarExampleApp extends StatelessWidget {\n  const RawScrollbarExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('RawScrollbar Sample')),\n        body: const Center(\n          child: RawScrollbarExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass RawScrollbarExample extends StatefulWidget {\n  const RawScrollbarExample({super.key});\n\n  @override\n  State<RawScrollbarExample> createState() => _RawScrollbarExampleState();\n}\n\nclass _RawScrollbarExampleState extends State<RawScrollbarExample> {\n  final ScrollController _firstController = ScrollController();\n\n  @override\n  Widget build(BuildContext context) {\n    return LayoutBuilder(\n        builder: (BuildContext context, BoxConstraints constraints) {\n      return Row(\n        children: <Widget>[\n          SizedBox(\n              width: constraints.maxWidth / 2,\n              // When using the PrimaryScrollController and a Scrollbar\n              // together, only one ScrollPosition can be attached to the\n              // PrimaryScrollController at a time. Providing a\n              // unique scroll controller to this scroll view prevents it\n              // from attaching to the PrimaryScrollController.\n              child: Scrollbar(\n                thumbVisibility: true,\n                controller: _firstController,\n                child: ListView.builder(\n                    controller: _firstController,\n                    itemCount: 100,\n                    itemBuilder: (BuildContext context, int index) {\n                      return Padding(\n                        padding: const EdgeInsets.all(8.0),\n                        child: Text('Scrollable 1 : Index $index'),\n                      );\n                    }),\n              )),\n          SizedBox(\n              width: constraints.maxWidth / 2,\n              // This vertical scroll view has primary set to true, so it is\n              // using the PrimaryScrollController. On mobile platforms, the\n              // PrimaryScrollController automatically attaches to vertical\n              // ScrollViews, unlike on Desktop platforms, where the primary\n              // parameter is required.\n              child: Scrollbar(\n                thumbVisibility: true,\n                child: ListView.builder(\n                    primary: true,\n                    itemCount: 100,\n                    itemBuilder: (BuildContext context, int index) {\n                      return Container(\n                          height: 50,\n                          color: index.isEven\n                              ? Colors.amberAccent\n                              : Colors.blueAccent,\n                          child: Padding(\n                            padding: const EdgeInsets.all(8.0),\n                            child: Text('Scrollable 2 : Index $index'),\n                          ));\n                    }),\n              )),\n        ],\n      );\n    });\n  }\n}\n",
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoScrollbar].\n\nvoid main() => runApp(const ScrollbarApp());\n\nclass ScrollbarApp extends StatelessWidget {\n  const ScrollbarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: ScrollbarExample(),\n    );\n  }\n}\n\nclass ScrollbarExample extends StatefulWidget {\n  const ScrollbarExample({super.key});\n\n  @override\n  State<ScrollbarExample> createState() => _ScrollbarExampleState();\n}\n\nclass _ScrollbarExampleState extends State<ScrollbarExample> {\n  final ScrollController _controllerOne = ScrollController();\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoScrollbar Sample'),\n      ),\n      child: CupertinoScrollbar(\n        thickness: 6.0,\n        thicknessWhileDragging: 10.0,\n        radius: const Radius.circular(34.0),\n        radiusWhileDragging: Radius.zero,\n        controller: _controllerOne,\n        thumbVisibility: true,\n        child: ListView.builder(\n          controller: _controllerOne,\n          itemCount: 120,\n          itemBuilder: (BuildContext context, int index) {\n            return Center(\n              child: Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: Text('Item $index'),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoScrollbar].\n\nvoid main() => runApp(const ScrollbarApp());\n\nclass ScrollbarApp extends StatelessWidget {\n  const ScrollbarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: ScrollbarExample(),\n    );\n  }\n}\n\nclass ScrollbarExample extends StatelessWidget {\n  const ScrollbarExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoScrollbar Sample'),\n      ),\n      child: CupertinoScrollbar(\n        thickness: 6.0,\n        thicknessWhileDragging: 10.0,\n        radius: const Radius.circular(34.0),\n        radiusWhileDragging: Radius.zero,\n        child: ListView.builder(\n          itemCount: 120,\n          itemBuilder: (BuildContext context, int index) {\n            return Center(\n              child: Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: Text('Item $index'),\n              ),\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoSearchTextField-class.html",
  "title": "CupertinoSearchTextField class - cupertino library - Dart API",
  "documentation_content": "CupertinoSearchTextField class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoSearchTextField class\nCupertinoSearchTextField\nbrightness_4\nbrightness_5\ndescription\nCupertinoSearchTextField class\nA CupertinoTextField that mimics the look and behavior of UIKit's\nUISearchTextField.\nThis control defaults to showing the basic parts of a UISearchTextField,\nlike the 'Search' placeholder, prefix-ed Search icon, and suffix-ed\nX-Mark icon.\nTo control the text that is displayed in the text field, use the\ncontroller. For example, to set the initial value of the text field, use\na controller that already contains some text such as:\nThis examples shows how to provide initial text to a CupertinoSearchTextField\nusing the controller property.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSearchTextField.1 mysample\nIt is recommended to pass a ValueChanged<String> to both onChanged and\nonSubmitted parameters in order to be notified once the value of the\nfield changes or is submitted by the keyboard:\nThis examples shows how to be notified of field changes or submitted text from\na CupertinoSearchTextField.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSearchTextField.2 mysample\nSee also:\ndeveloper.apple.com/design/human-interface-guidelines/ios/bars/search-bars/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoSearchTextField\nConstructors\nCupertinoSearchTextField({Key? key, TextEditingController? controller, ValueChanged<String>? onChanged, ValueChanged<String>? onSubmitted, TextStyle? style, String? placeholder, TextStyle? placeholderStyle, BoxDecoration? decoration, Color? backgroundColor, BorderRadius? borderRadius, TextInputType? keyboardType = TextInputType.text, EdgeInsetsGeometry padding = const EdgeInsetsDirectional.fromSTEB(5.5, 8, 5.5, 8), Color itemColor = CupertinoColors.secondaryLabel, double itemSize = 20.0, EdgeInsetsGeometry prefixInsets = const EdgeInsetsDirectional.fromSTEB(6, 0, 0, 3), Widget prefixIcon = const Icon(CupertinoIcons.search), EdgeInsetsGeometry suffixInsets = const EdgeInsetsDirectional.fromSTEB(0, 0, 5, 2), Icon suffixIcon = const Icon(CupertinoIcons.xmark_circle_fill), OverlayVisibilityMode suffixMode = OverlayVisibilityMode.editing, VoidCallback? onSuffixTap, String? restorationId, FocusNode? focusNode, SmartQuotesType? smartQuotesType, SmartDashesType? smartDashesType, bool enableIMEPersonalizedLearning = true, bool autofocus = false, VoidCallback? onTap, bool autocorrect = true, bool? enabled})\nCreates a CupertinoTextField that mimics the look and behavior of\nUIKit's UISearchTextField.\nconst\nProperties\nautocorrect\n\u2192 bool\nWhether to enable autocorrection.\nfinal\nautofocus\n\u2192 bool\nWhether this text field should focus itself if nothing else is already\nfocused.\nfinal\nbackgroundColor\n\u2192 Color?\nSet the decoration property's background color.\nfinal\nborderRadius\n\u2192 BorderRadius?\nSets the decoration property's border radius.\nfinal\ncontroller\n\u2192 TextEditingController?\nControls the text being edited.\nfinal\ndecoration\n\u2192 BoxDecoration?\nSets the decoration for the text field.\nfinal\nenabled\n\u2192 bool?\nDisables the text field when false.\nfinal\nenableIMEPersonalizedLearning\n\u2192 bool\nWhether to enable that the IME update personalized data such as typing\nhistory and user dictionary data.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nitemColor\n\u2192 Color\nSets the color for the suffix and prefix icons.\nfinal\nitemSize\n\u2192 double\nSets the base icon size for the suffix and prefix icons.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nkeyboardType\n\u2192 TextInputType?\nThe keyboard type for this search field.\nfinal\nonChanged\n\u2192 ValueChanged<String>?\nInvoked upon user input.\nfinal\nonSubmitted\n\u2192 ValueChanged<String>?\nInvoked upon keyboard submission.\nfinal\nonSuffixTap\n\u2192 VoidCallback?\nSets the X-Mark (suffix) action.\nfinal\nonTap\n\u2192 VoidCallback?\nCalled for each distinct tap except for every second tap of a double tap.\nfinal\npadding\n\u2192 EdgeInsetsGeometry\nSets the padding insets for the text and placeholder.\nfinal\nplaceholder\n\u2192 String?\nA hint placeholder text that appears when the text entry is empty.\nfinal\nplaceholderStyle\n\u2192 TextStyle?\nSets the style of the placeholder of the text field.\nfinal\nprefixIcon\n\u2192 Widget\nSets a prefix widget.\nfinal\nprefixInsets\n\u2192 EdgeInsetsGeometry\nSets the padding insets for the suffix.\nfinal\nrestorationId\n\u2192 String?\nRestoration ID to save and restore the state of the text field.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsmartDashesType\n\u2192 SmartDashesType?\nWhether to allow the platform to automatically format dashes.\nfinal\nsmartQuotesType\n\u2192 SmartQuotesType?\nWhether to allow the platform to automatically format quotes.\nfinal\nstyle\n\u2192 TextStyle?\nAllows changing the style of the text.\nfinal\nsuffixIcon\n\u2192 Icon\nSets the suffix widget's icon.\nfinal\nsuffixInsets\n\u2192 EdgeInsetsGeometry\nSets the padding insets for the prefix.\nfinal\nsuffixMode\n\u2192 OverlayVisibilityMode\nDictates when the X-Mark (suffix) should be visible.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<StatefulWidget>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoSearchTextField class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSearchTextField].\n\nvoid main() => runApp(const SearchTextFieldApp());\n\nclass SearchTextFieldApp extends StatelessWidget {\n  const SearchTextFieldApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: SearchTextFieldExample(),\n    );\n  }\n}\n\nclass SearchTextFieldExample extends StatefulWidget {\n  const SearchTextFieldExample({super.key});\n\n  @override\n  State<SearchTextFieldExample> createState() => _SearchTextFieldExampleState();\n}\n\nclass _SearchTextFieldExampleState extends State<SearchTextFieldExample> {\n  String text = '';\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoSearchTextField Sample'),\n      ),\n      child: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(text),\n            Padding(\n              padding: const EdgeInsets.all(16.0),\n              child: SearchTextField(\n                fieldValue: (String value) {\n                  setState(() {\n                    text = value;\n                  });\n                },\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass SearchTextField extends StatelessWidget {\n  const SearchTextField({\n    super.key,\n    required this.fieldValue,\n  });\n\n  final ValueChanged<String> fieldValue;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoSearchTextField(\n      onChanged: (String value) {\n        fieldValue('The text has changed to: $value');\n      },\n      onSubmitted: (String value) {\n        fieldValue('Submitted text: $value');\n      },\n    );\n  }\n}\n",
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSearchTextField].\n\nvoid main() => runApp(const SearchTextFieldApp());\n\nclass SearchTextFieldApp extends StatelessWidget {\n  const SearchTextFieldApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: SearchTextFieldExample(),\n    );\n  }\n}\n\nclass SearchTextFieldExample extends StatefulWidget {\n  const SearchTextFieldExample({super.key});\n\n  @override\n  State<SearchTextFieldExample> createState() => _SearchTextFieldExampleState();\n}\n\nclass _SearchTextFieldExampleState extends State<SearchTextFieldExample> {\n  late TextEditingController textController;\n\n  @override\n  void initState() {\n    super.initState();\n    textController = TextEditingController(text: 'initial text');\n  }\n\n  @override\n  void dispose() {\n    textController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoSearchTextField Sample'),\n      ),\n      child: Center(\n        child: Padding(\n          padding: const EdgeInsets.all(16.0),\n          child: CupertinoSearchTextField(\n            controller: textController,\n            placeholder: 'Search',\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoSegmentedControl-class.html",
  "title": "CupertinoSegmentedControl class - cupertino library - Dart API",
  "documentation_content": "CupertinoSegmentedControl class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoSegmentedControl<T extends Object> class\nCupertinoSegmentedControl\nbrightness_4\nbrightness_5\ndescription\nCupertinoSegmentedControl<T extends Object> class\nAn iOS-style segmented control.\nDisplays the widgets provided in the Map of children in a\nhorizontal list. Used to select between a number of mutually exclusive\noptions. When one option in the segmented control is selected, the other\noptions in the segmented control cease to be selected.\nA segmented control can feature any Widget as one of the values in its\nMap of children. The type T is the type of the keys used\nto identify each widget and determine which widget is selected. As\nrequired by the Map class, keys must be of consistent types\nand must be comparable. The ordering of the keys will determine the order\nof the widgets in the segmented control.\nWhen the state of the segmented control changes, the widget calls the\nonValueChanged callback. The map key associated with the newly selected\nwidget is returned in the onValueChanged callback. Typically, widgets\nthat use a segmented control will listen for the onValueChanged callback\nand rebuild the segmented control with a new groupValue to update which\noption is currently selected.\nThe children will be displayed in the order of the keys in the Map.\nThe height of the segmented control is determined by the height of the\ntallest widget provided as a value in the Map of children.\nThe width of each child in the segmented control will be equal to the width\nof widest child, unless the combined width of the children is wider than\nthe available horizontal space. In this case, the available horizontal space\nis divided by the number of provided children to determine the width of\neach widget. The selection area for each of the widgets in the Map of\nchildren will then be expanded to fill the calculated space, so each\nwidget will appear to have the same dimensions.\nA segmented control may optionally be created with custom colors. The\nunselectedColor, selectedColor, borderColor, and pressedColor\narguments can be used to override the segmented control's colors from\nCupertinoTheme defaults.\nThis example shows a CupertinoSegmentedControl with an enum type.\nThe callback provided to onValueChanged should update the state of\nthe parent StatefulWidget using the State.setState method, so that\nthe parent gets rebuilt; for example:\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSegmentedControl.1 mysample\nSee also:\nCupertinoSegmentedControl, a segmented control widget in the style used\nup until iOS 13.\ndeveloper.apple.com/design/human-interface-guidelines/ios/controls/segmented-controls/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoSegmentedControl\nConstructors\nCupertinoSegmentedControl({Key? key, required Map<T, Widget> children, required ValueChanged<T> onValueChanged, T? groupValue, Color? unselectedColor, Color? selectedColor, Color? borderColor, Color? pressedColor, EdgeInsetsGeometry? padding})\nCreates an iOS-style segmented control bar.\nProperties\nborderColor\n\u2192 Color?\nThe color used as the border around each widget.\nfinal\nchildren\n\u2192 Map<T, Widget>\nThe identifying keys and corresponding widget values in the\nsegmented control.\nfinal\ngroupValue\n\u2192 T?\nThe identifier of the widget that is currently selected.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonValueChanged\n\u2192 ValueChanged<T>\nThe callback that is called when a new option is tapped.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe CupertinoSegmentedControl will be placed inside this padding.\nfinal\npressedColor\n\u2192 Color?\nThe color used to fill the background of the widget the user is\ntemporarily interacting with through a long press or drag.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselectedColor\n\u2192 Color?\nThe color used to fill the background of the selected widget and as the text\ncolor of unselected widgets.\nfinal\nunselectedColor\n\u2192 Color?\nThe color used to fill the backgrounds of unselected widgets and as the\ntext color of the selected widget.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoSegmentedControl<T>>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoSegmentedControl<T extends Object> class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSegmentedControl].\n\nenum Sky { midnight, viridian, cerulean }\n\nMap<Sky, Color> skyColors = <Sky, Color>{\n  Sky.midnight: const Color(0xff191970),\n  Sky.viridian: const Color(0xff40826d),\n  Sky.cerulean: const Color(0xff007ba7),\n};\n\nvoid main() => runApp(const SegmentedControlApp());\n\nclass SegmentedControlApp extends StatelessWidget {\n  const SegmentedControlApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: SegmentedControlExample(),\n    );\n  }\n}\n\nclass SegmentedControlExample extends StatefulWidget {\n  const SegmentedControlExample({super.key});\n\n  @override\n  State<SegmentedControlExample> createState() =>\n      _SegmentedControlExampleState();\n}\n\nclass _SegmentedControlExampleState extends State<SegmentedControlExample> {\n  Sky _selectedSegment = Sky.midnight;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      backgroundColor: skyColors[_selectedSegment],\n      navigationBar: CupertinoNavigationBar(\n        // This Cupertino segmented control has the enum \"Sky\" as the type.\n        middle: CupertinoSegmentedControl<Sky>(\n          selectedColor: skyColors[_selectedSegment],\n          // Provide horizontal padding around the children.\n          padding: const EdgeInsets.symmetric(horizontal: 12),\n          // This represents a currently selected segmented control.\n          groupValue: _selectedSegment,\n          // Callback that sets the selected segmented control.\n          onValueChanged: (Sky value) {\n            setState(() {\n              _selectedSegment = value;\n            });\n          },\n          children: const <Sky, Widget>{\n            Sky.midnight: Padding(\n              padding: EdgeInsets.symmetric(horizontal: 20),\n              child: Text('Midnight'),\n            ),\n            Sky.viridian: Padding(\n              padding: EdgeInsets.symmetric(horizontal: 20),\n              child: Text('Viridian'),\n            ),\n            Sky.cerulean: Padding(\n              padding: EdgeInsets.symmetric(horizontal: 20),\n              child: Text('Cerulean'),\n            ),\n          },\n        ),\n      ),\n      child: Center(\n        child: Text(\n          'Selected Segment: ${_selectedSegment.name}',\n          style: const TextStyle(color: CupertinoColors.white),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoSlider-class.html",
  "title": "CupertinoSlider class - cupertino library - Dart API",
  "documentation_content": "CupertinoSlider class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoSlider class\nCupertinoSlider\nbrightness_4\nbrightness_5\ndescription\nCupertinoSlider class\nAn iOS-style slider.\nUsed to select from a range of values.\nA slider can be used to select from either a continuous or a discrete set of\nvalues. The default is use a continuous range of values from min to max.\nTo use discrete values, use a non-null value for divisions, which\nindicates the number of discrete intervals. For example, if min is 0.0 and\nmax is 50.0 and divisions is 5, then the slider can take on the values\ndiscrete values 0.0, 10.0, 20.0, 30.0, 40.0, and 50.0.\nThe slider itself does not maintain any state. Instead, when the state of\nthe slider changes, the widget calls the onChanged callback. Most widgets\nthat use a slider will listen for the onChanged callback and rebuild the\nslider with a new value to update the visual appearance of the slider.\nThis example shows how to show the current slider value as it changes.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSlider.1 mysample\nSee also:\ndeveloper.apple.com/ios/human-interface-guidelines/controls/sliders/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoSlider\nConstructors\nCupertinoSlider({Key? key, required double value, required ValueChanged<double>? onChanged, ValueChanged<double>? onChangeStart, ValueChanged<double>? onChangeEnd, double min = 0.0, double max = 1.0, int? divisions, Color? activeColor, Color thumbColor = CupertinoColors.white})\nCreates an iOS-style slider.\nconst\nProperties\nactiveColor\n\u2192 Color?\nThe color to use for the portion of the slider that has been selected.\nfinal\ndivisions\n\u2192 int?\nThe number of discrete divisions.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmax\n\u2192 double\nThe maximum value the user can select.\nfinal\nmin\n\u2192 double\nThe minimum value the user can select.\nfinal\nonChanged\n\u2192 ValueChanged<double>?\nCalled when the user selects a new value for the slider.\nfinal\nonChangeEnd\n\u2192 ValueChanged<double>?\nCalled when the user is done selecting a new value for the slider.\nfinal\nonChangeStart\n\u2192 ValueChanged<double>?\nCalled when the user starts selecting a new value for the slider.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nthumbColor\n\u2192 Color\nThe color to use for the thumb of the slider.\nfinal\nvalue\n\u2192 double\nThe currently selected value for this slider.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoSlider>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoSlider class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSlider].\n\nvoid main() => runApp(const CupertinoSliderApp());\n\nclass CupertinoSliderApp extends StatelessWidget {\n  const CupertinoSliderApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoSliderExample(),\n    );\n  }\n}\n\nclass CupertinoSliderExample extends StatefulWidget {\n  const CupertinoSliderExample({super.key});\n\n  @override\n  State<CupertinoSliderExample> createState() => _CupertinoSliderExampleState();\n}\n\nclass _CupertinoSliderExampleState extends State<CupertinoSliderExample> {\n  double _currentSliderValue = 0.0;\n  String? _sliderStatus;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoSlider Sample'),\n      ),\n      child: Center(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: <Widget>[\n            // Display the current slider value.\n            Text('$_currentSliderValue'),\n            CupertinoSlider(\n              key: const Key('slider'),\n              value: _currentSliderValue,\n              // This allows the slider to jump between divisions.\n              // If null, the slide movement is continuous.\n              divisions: 5,\n              // The maximum slider value\n              max: 100,\n              activeColor: CupertinoColors.systemPurple,\n              thumbColor: CupertinoColors.systemPurple,\n              // This is called when sliding is started.\n              onChangeStart: (double value) {\n                setState(() {\n                  _sliderStatus = 'Sliding';\n                });\n              },\n              // This is called when sliding has ended.\n              onChangeEnd: (double value) {\n                setState(() {\n                  _sliderStatus = 'Finished sliding';\n                });\n              },\n              // This is called when slider value is changed.\n              onChanged: (double value) {\n                setState(() {\n                  _currentSliderValue = value;\n                });\n              },\n            ),\n            Text(\n              _sliderStatus ?? '',\n              style: CupertinoTheme.of(context).textTheme.textStyle.copyWith(\n                    fontSize: 12,\n                  ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoSlidingSegmentedControl-class.html",
  "title": "CupertinoSlidingSegmentedControl class - cupertino library - Dart API",
  "documentation_content": "CupertinoSlidingSegmentedControl class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoSlidingSegmentedControl<T> class\nCupertinoSlidingSegmentedControl\nbrightness_4\nbrightness_5\ndescription\nCupertinoSlidingSegmentedControl<T> class\nAn iOS 13 style segmented control.\nDisplays the widgets provided in the Map of children in a horizontal list.\nIt allows the user to select between a number of mutually exclusive options,\nby tapping or dragging within the segmented control.\nA segmented control can feature any Widget as one of the values in its\nMap of children. The type T is the type of the Map keys used to identify\neach widget and determine which widget is selected. As required by the Map\nclass, keys must be of consistent types and must be comparable. The children\nargument must be an ordered Map such as a LinkedHashMap, the ordering of\nthe keys will determine the order of the widgets in the segmented control.\nThe widget calls the onValueChanged callback when a valid user gesture\ncompletes on an unselected segment. The map key associated with the newly\nselected widget is returned in the onValueChanged callback. Typically,\nwidgets that use a segmented control will listen for the onValueChanged\ncallback and rebuild the segmented control with a new groupValue to update\nwhich option is currently selected.\nThe children will be displayed in the order of the keys in the Map,\nalong the current TextDirection. Each child widget will have the same size.\nThe height of the segmented control is determined by the height of the\ntallest child widget. The width of each child will be the intrinsic width of\nthe widest child, or the available horizontal space divided by the number of\nchildren, which ever is smaller.\nA segmented control may optionally be created with custom colors. The\nthumbColor, backgroundColor arguments can be used to override the\nsegmented control's colors from its defaults.\nThis example shows a CupertinoSlidingSegmentedControl with an enum type.\nThe callback provided to onValueChanged should update the state of\nthe parent StatefulWidget using the State.setState method, so that\nthe parent gets rebuilt; for example:\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSlidingSegmentedControl.1 mysample\nSee also:\ndeveloper.apple.com/design/human-interface-guidelines/ios/controls/segmented-controls/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoSlidingSegmentedControl\nConstructors\nCupertinoSlidingSegmentedControl({Key? key, required Map<T, Widget> children, required ValueChanged<T?> onValueChanged, T? groupValue, Color thumbColor = _kThumbColor, EdgeInsetsGeometry padding = _kHorizontalItemPadding, Color backgroundColor = CupertinoColors.tertiarySystemFill})\nCreates an iOS-style segmented control bar.\nProperties\nbackgroundColor\n\u2192 Color\nThe color used to paint the rounded rect behind the children and the separators.\nfinal\nchildren\n\u2192 Map<T, Widget>\nThe identifying keys and corresponding widget values in the\nsegmented control.\nfinal\ngroupValue\n\u2192 T?\nThe identifier of the widget that is currently selected.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonValueChanged\n\u2192 ValueChanged<T?>\nThe callback that is called when a new option is tapped.\nfinal\npadding\n\u2192 EdgeInsetsGeometry\nThe amount of space by which to inset the children.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nthumbColor\n\u2192 Color\nThe color used to paint the interior of the thumb that appears behind the\ncurrently selected item.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoSlidingSegmentedControl<T>>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoSlidingSegmentedControl<T> class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSlidingSegmentedControl].\n\nenum Sky { midnight, viridian, cerulean }\n\nMap<Sky, Color> skyColors = <Sky, Color>{\n  Sky.midnight: const Color(0xff191970),\n  Sky.viridian: const Color(0xff40826d),\n  Sky.cerulean: const Color(0xff007ba7),\n};\n\nvoid main() => runApp(const SegmentedControlApp());\n\nclass SegmentedControlApp extends StatelessWidget {\n  const SegmentedControlApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: SegmentedControlExample(),\n    );\n  }\n}\n\nclass SegmentedControlExample extends StatefulWidget {\n  const SegmentedControlExample({super.key});\n\n  @override\n  State<SegmentedControlExample> createState() =>\n      _SegmentedControlExampleState();\n}\n\nclass _SegmentedControlExampleState extends State<SegmentedControlExample> {\n  Sky _selectedSegment = Sky.midnight;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      backgroundColor: skyColors[_selectedSegment],\n      navigationBar: CupertinoNavigationBar(\n        // This Cupertino segmented control has the enum \"Sky\" as the type.\n        middle: CupertinoSlidingSegmentedControl<Sky>(\n          backgroundColor: CupertinoColors.systemGrey2,\n          thumbColor: skyColors[_selectedSegment]!,\n          // This represents the currently selected segmented control.\n          groupValue: _selectedSegment,\n          // Callback that sets the selected segmented control.\n          onValueChanged: (Sky? value) {\n            if (value != null) {\n              setState(() {\n                _selectedSegment = value;\n              });\n            }\n          },\n          children: const <Sky, Widget>{\n            Sky.midnight: Padding(\n              padding: EdgeInsets.symmetric(horizontal: 20),\n              child: Text(\n                'Midnight',\n                style: TextStyle(color: CupertinoColors.white),\n              ),\n            ),\n            Sky.viridian: Padding(\n              padding: EdgeInsets.symmetric(horizontal: 20),\n              child: Text(\n                'Viridian',\n                style: TextStyle(color: CupertinoColors.white),\n              ),\n            ),\n            Sky.cerulean: Padding(\n              padding: EdgeInsets.symmetric(horizontal: 20),\n              child: Text(\n                'Cerulean',\n                style: TextStyle(color: CupertinoColors.white),\n              ),\n            ),\n          },\n        ),\n      ),\n      child: Center(\n        child: Text(\n          'Selected Segment: ${_selectedSegment.name}',\n          style: const TextStyle(color: CupertinoColors.white),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoSliverNavigationBar-class.html",
  "title": "CupertinoSliverNavigationBar class - cupertino library - Dart API",
  "documentation_content": "CupertinoSliverNavigationBar class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoSliverNavigationBar class\nCupertinoSliverNavigationBar\nbrightness_4\nbrightness_5\ndescription\nCupertinoSliverNavigationBar class\nAn iOS-styled navigation bar with iOS-11-style large titles using slivers.\nThe CupertinoSliverNavigationBar must be placed in a sliver group such\nas the CustomScrollView.\nThis navigation bar consists of two sections, a pinned static section on top\nand a sliding section containing iOS-11-style large title below it.\nIt should be placed at top of the screen and automatically accounts for\nthe iOS status bar.\nMinimally, a largeTitle widget will appear in the middle of the app bar\nwhen the sliver is collapsed and transfer to the area below in larger font\nwhen the sliver is expanded.\nFor advanced uses, an optional middle widget can be supplied to show a\ndifferent widget in the middle of the navigation bar when the sliver is collapsed.\nLike CupertinoNavigationBar, it also supports a leading and trailing\nwidget on the static section on top that remains while scrolling.\nThe leading widget will automatically be a back chevron icon button (or a\nclose button in case of a fullscreen dialog) to pop the current route if none\nis provided and automaticallyImplyLeading is true (true by default).\nThe largeTitle widget will automatically be a title text from the current\nCupertinoPageRoute if none is provided and automaticallyImplyTitle is\ntrue (true by default).\nWhen transitionBetweenRoutes is true, this navigation bar will transition\non top of the routes instead of inside them if the route being transitioned\nto also has a CupertinoNavigationBar or a CupertinoSliverNavigationBar\nwith transitionBetweenRoutes set to true. If transitionBetweenRoutes is\ntrue, none of the Widget parameters can contain any GlobalKeys in their\nsubtrees since those widgets will exist in multiple places in the tree\nsimultaneously.\nBy default, only one CupertinoNavigationBar or CupertinoSliverNavigationBar\nshould be present in each PageRoute to support the default transitions.\nUse transitionBetweenRoutes or heroTag to customize the transition\nbehavior for multiple navigation bars per route.\nCupertinoSliverNavigationBar by default disables text scaling to match the\nnative iOS behavior. To override this behavior, wrap each of the\nCupertinoSliverNavigationBar's components inside a MediaQuery with the\ndesired TextScaler.\nThe stretch parameter determines whether the nav bar should stretch to\nfill the over-scroll area. The nav bar can still expand and contract as the\nuser scrolls, but it will also stretch when the user over-scrolls if the\nstretch value is true. Defaults to false.\nThis example shows CupertinoSliverNavigationBar in action inside a CustomScrollView.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSliverNavigationBar.1 mysample\nSee also:\nCupertinoNavigationBar, an iOS navigation bar for use on non-scrolling\npages.\nCustomScrollView, a ScrollView that creates custom scroll effects using slivers.\ndeveloper.apple.com/design/human-interface-guidelines/ios/bars/navigation-bars/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoSliverNavigationBar\nConstructors\nCupertinoSliverNavigationBar({Key? key, Widget? largeTitle, Widget? leading, bool automaticallyImplyLeading = true, bool automaticallyImplyTitle = true, bool alwaysShowMiddle = true, String? previousPageTitle, Widget? middle, Widget? trailing, Border? border = _kDefaultNavBarBorder, Color? backgroundColor, Brightness? brightness, EdgeInsetsDirectional? padding, bool transitionBetweenRoutes = true, Object heroTag = _defaultHeroTag, bool stretch = false})\nCreates a navigation bar for scrolling lists.\nconst\nProperties\nalwaysShowMiddle\n\u2192 bool\nControls whether middle widget should always be visible (even in\nexpanded state).\nfinal\nautomaticallyImplyLeading\n\u2192 bool\nControls whether we should try to imply the leading widget if null.\nfinal\nautomaticallyImplyTitle\n\u2192 bool\nControls whether we should try to imply the largeTitle widget if null.\nfinal\nbackgroundColor\n\u2192 Color?\nThe background color of the navigation bar. If it contains transparency, the\ntab bar will automatically produce a blurring effect to the content\nbehind it.\nfinal\nborder\n\u2192 Border?\nThe border of the navigation bar. By default renders a single pixel bottom border side.\nfinal\nbrightness\n\u2192 Brightness?\nThe brightness of the specified backgroundColor.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheroTag\n\u2192 Object\nTag for the navigation bar's Hero widget if transitionBetweenRoutes is true.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nlargeTitle\n\u2192 Widget?\nThe navigation bar's title.\nfinal\nleading\n\u2192 Widget?\nWidget to place at the start of the navigation bar. Normally a back button\nfor a normal page or a cancel button for full page dialogs.\nfinal\nmiddle\n\u2192 Widget?\nA widget to place in the middle of the static navigation bar instead of\nthe largeTitle.\nfinal\nopaque\n\u2192 bool\nTrue if the navigation bar's background color has no transparency.\nread-only\npadding\n\u2192 EdgeInsetsDirectional?\nPadding for the contents of the navigation bar.\nfinal\npreviousPageTitle\n\u2192 String?\nManually specify the previous route's title when automatically implying\nthe leading back button.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nstretch\n\u2192 bool\nWhether the nav bar should stretch to fill the over-scroll area.\nfinal\ntrailing\n\u2192 Widget?\nWidget to place at the end of the navigation bar. Normally additional actions\ntaken on the page such as a search or edit function.\nfinal\ntransitionBetweenRoutes\n\u2192 bool\nWhether to transition between navigation bars.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoSliverNavigationBar>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoSliverNavigationBar class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSliverNavigationBar].\n\nvoid main() => runApp(const SliverNavBarApp());\n\nclass SliverNavBarApp extends StatelessWidget {\n  const SliverNavBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: SliverNavBarExample(),\n    );\n  }\n}\n\nclass SliverNavBarExample extends StatelessWidget {\n  const SliverNavBarExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      // A ScrollView that creates custom scroll effects using slivers.\n      child: CustomScrollView(\n        // A list of sliver widgets.\n        slivers: <Widget>[\n          const CupertinoSliverNavigationBar(\n            leading: Icon(CupertinoIcons.person_2),\n            // This title is visible in both collapsed and expanded states.\n            // When the \"middle\" parameter is omitted, the widget provided\n            // in the \"largeTitle\" parameter is used instead in the collapsed state.\n            largeTitle: Text('Contacts'),\n            trailing: Icon(CupertinoIcons.add_circled),\n          ),\n          // This widget fills the remaining space in the viewport.\n          // Drag the scrollable area to collapse the CupertinoSliverNavigationBar.\n          SliverFillRemaining(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: <Widget>[\n                const Text('Drag me up', textAlign: TextAlign.center),\n                CupertinoButton.filled(\n                  onPressed: () {\n                    Navigator.push(\n                      context,\n                      CupertinoPageRoute<Widget>(\n                        builder: (BuildContext context) {\n                          return const NextPage();\n                        },\n                      ),\n                    );\n                  },\n                  child: const Text('Go to Next Page'),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass NextPage extends StatelessWidget {\n  const NextPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final Brightness brightness = CupertinoTheme.brightnessOf(context);\n    return CupertinoPageScaffold(\n      child: CustomScrollView(\n        slivers: <Widget>[\n          CupertinoSliverNavigationBar(\n            backgroundColor: CupertinoColors.systemYellow,\n            border: Border(\n              bottom: BorderSide(\n                color: brightness == Brightness.light\n                    ? CupertinoColors.black\n                    : CupertinoColors.white,\n              ),\n            ),\n            // The middle widget is visible in both collapsed and expanded states.\n            middle: const Text('Contacts Group'),\n            // When the \"middle\" parameter is implemented, the largest title is only visible\n            // when the CupertinoSliverNavigationBar is fully expanded.\n            largeTitle: const Text('Family'),\n          ),\n          const SliverFillRemaining(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: <Widget>[\n                Text('Drag me up', textAlign: TextAlign.center),\n                // When the \"leading\" parameter is omitted on a route that has a previous page,\n                // the back button is automatically added to the leading position.\n                Text('Tap on the leading button to navigate back',\n                    textAlign: TextAlign.center),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoSliverRefreshControl-class.html",
  "title": "CupertinoSliverRefreshControl class - cupertino library - Dart API",
  "documentation_content": "CupertinoSliverRefreshControl class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoSliverRefreshControl class\nCupertinoSliverRefreshControl\nbrightness_4\nbrightness_5\ndescription\nCupertinoSliverRefreshControl class\nA sliver widget implementing the iOS-style pull to refresh content control.\nWhen inserted as the first sliver in a scroll view or behind other slivers\nthat still lets the scrollable overscroll in front of this sliver (such as\nthe CupertinoSliverNavigationBar, this widget will:\nLet the user draw inside the overscrolled area via the passed in builder.\nTrigger the provided onRefresh function when overscrolled far enough to\npass refreshTriggerPullDistance.\nContinue to hold refreshIndicatorExtent amount of space for the builder\nto keep drawing inside of as the Future returned by onRefresh processes.\nScroll away once the onRefresh Future completes.\nThe builder function will be informed of the current RefreshIndicatorMode\nwhen invoking it, except in the RefreshIndicatorMode.inactive state when\nno space is available and nothing needs to be built. The builder function\nwill otherwise be continuously invoked as the amount of space available\nchanges from overscroll, as the sliver scrolls away after the onRefresh\ntask is done, etc.\nOnly one refresh can be triggered until the previous refresh has completed\nand the indicator sliver has retracted at least 90% of the way back.\nCan only be used in downward-scrolling vertical lists that overscrolls. In\nother words, refreshes can't be triggered with Scrollables using\nClampingScrollPhysics which is the default on Android. To allow overscroll\non Android, use an overscrolling physics such as BouncingScrollPhysics.\nThis can be done via:\nProviding a BouncingScrollPhysics (possibly in combination with a\nAlwaysScrollableScrollPhysics) while constructing the scrollable.\nBy inserting a ScrollConfiguration with BouncingScrollPhysics above\nthe scrollable.\nBy using CupertinoApp, which always uses a ScrollConfiguration\nwith BouncingScrollPhysics regardless of platform.\nIn a typical application, this sliver should be inserted between the app bar\nsliver such as CupertinoSliverNavigationBar and your main scrollable\ncontent's sliver.\nWhen the user scrolls past refreshTriggerPullDistance,\nthis sample shows the default iOS pull to refresh indicator for 1 second and\nadds a new item to the top of the list view.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSliverRefreshControl.1 mysample\nSee also:\nCustomScrollView, a typical sliver holding scroll view this control\nshould go into.\ndeveloper.apple.com/ios/human-interface-guidelines/controls/refresh-content-controls/\nRefreshIndicator, a Material Design version of the pull-to-refresh\nparadigm. This widget works differently than RefreshIndicator because\ninstead of being an overlay on top of the scrollable, the\nCupertinoSliverRefreshControl is part of the scrollable and actively occupies\nscrollable space.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoSliverRefreshControl\nConstructors\nCupertinoSliverRefreshControl({Key? key, double refreshTriggerPullDistance = _defaultRefreshTriggerPullDistance, double refreshIndicatorExtent = _defaultRefreshIndicatorExtent, RefreshControlIndicatorBuilder? builder = buildRefreshIndicator, RefreshCallback? onRefresh})\nCreate a new refresh control for inserting into a list of slivers.\nconst\nProperties\nbuilder\n\u2192 RefreshControlIndicatorBuilder?\nA builder that's called as this sliver's size changes, and as the state\nchanges.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonRefresh\n\u2192 RefreshCallback?\nCallback invoked when pulled by refreshTriggerPullDistance.\nfinal\nrefreshIndicatorExtent\n\u2192 double\nThe amount of space the refresh indicator sliver will keep holding while\nonRefresh's Future is still running.\nfinal\nrefreshTriggerPullDistance\n\u2192 double\nThe amount of overscroll the scrollable must be dragged to trigger a reload.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoSliverRefreshControl>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\nbuildRefreshIndicator(BuildContext context, RefreshIndicatorMode refreshState, double pulledExtent, double refreshTriggerPullDistance, double refreshIndicatorExtent)\n\u2192 Widget\nBuilds a refresh indicator that reflects the standard iOS pull-to-refresh\nbehavior. Specifically, this entails presenting an activity indicator that\nchanges depending on the current refreshState. As the user initially drags\ndown, the indicator will gradually reveal individual ticks until the refresh\nbecomes armed. At this point, the animated activity indicator will begin rotating.\nOnce the refresh has completed, the activity indicator shrinks away as the\nspace allocation animates back to closed.\nstate(BuildContext context)\n\u2192 RefreshIndicatorMode\nRetrieve the current state of the CupertinoSliverRefreshControl. The same as the\nstate that gets passed into the builder function. Used for testing.\nFlutter\ncupertino\nCupertinoSliverRefreshControl class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSliverRefreshControl].\n\nvoid main() => runApp(const RefreshControlApp());\n\nclass RefreshControlApp extends StatelessWidget {\n  const RefreshControlApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: RefreshControlExample(),\n    );\n  }\n}\n\nclass RefreshControlExample extends StatefulWidget {\n  const RefreshControlExample({super.key});\n\n  @override\n  State<RefreshControlExample> createState() => _RefreshControlExampleState();\n}\n\nclass _RefreshControlExampleState extends State<RefreshControlExample> {\n  List<Color> colors = <Color>[\n    CupertinoColors.systemYellow,\n    CupertinoColors.systemOrange,\n    CupertinoColors.systemPink,\n  ];\n  List<Widget> items = <Widget>[\n    Container(color: CupertinoColors.systemPink, height: 100.0),\n    Container(color: CupertinoColors.systemOrange, height: 100.0),\n    Container(color: CupertinoColors.systemYellow, height: 100.0),\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoSliverRefreshControl Sample'),\n      ),\n      child: CustomScrollView(\n        physics: const BouncingScrollPhysics(\n          parent: AlwaysScrollableScrollPhysics(),\n        ),\n        slivers: <Widget>[\n          const CupertinoSliverNavigationBar(\n            largeTitle: Text('Scroll down'),\n          ),\n          CupertinoSliverRefreshControl(\n            onRefresh: () async {\n              await Future<void>.delayed(\n                const Duration(milliseconds: 1000),\n              );\n              setState(() {\n                items.insert(\n                  0,\n                  Container(color: colors[items.length % 3], height: 100.0),\n                );\n              });\n            },\n          ),\n          SliverList(\n            delegate: SliverChildBuilderDelegate(\n              (BuildContext context, int index) => items[index],\n              childCount: items.length,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoSwitch-class.html",
  "title": "CupertinoSwitch class - cupertino library - Dart API",
  "documentation_content": "CupertinoSwitch class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoSwitch class\nCupertinoSwitch\nbrightness_4\nbrightness_5\ndescription\nCupertinoSwitch class\nAn iOS-style switch.\nUsed to toggle the on/off state of a single setting.\nThe switch itself does not maintain any state. Instead, when the state of\nthe switch changes, the widget calls the onChanged callback. Most widgets\nthat use a switch will listen for the onChanged callback and rebuild the\nswitch with a new value to update the visual appearance of the switch.\nThis example shows a toggleable CupertinoSwitch. When the thumb slides to\nthe other side of the track, the switch is toggled between on/off.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoSwitch.1 mysample\nThis sample shows how to use a CupertinoSwitch in a ListTile. The\nMergeSemantics is used to turn the entire ListTile into a single item\nfor accessibility tools.\nlink\ncontent_copy\nMergeSemantics(\nchild: ListTile(\ntitle: const Text('Lights'),\ntrailing: CupertinoSwitch(\nvalue: _lights,\nonChanged: (bool value) { setState(() { _lights = value; }); },\n),\nonTap: () { setState(() { _lights = !_lights; }); },\n),\n)\nSee also:\nSwitch, the Material Design equivalent.\ndeveloper.apple.com/ios/human-interface-guidelines/controls/switches/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoSwitch\nConstructors\nCupertinoSwitch({Key? key, required bool value, required ValueChanged<bool>? onChanged, Color? activeColor, Color? trackColor, Color? thumbColor, bool? applyTheme, Color? focusColor, Color? onLabelColor, Color? offLabelColor, FocusNode? focusNode, ValueChanged<bool>? onFocusChange, bool autofocus = false, DragStartBehavior dragStartBehavior = DragStartBehavior.start})\nCreates an iOS-style switch.\nconst\nProperties\nactiveColor\n\u2192 Color?\nThe color to use for the track when the switch is on.\nfinal\napplyTheme\n\u2192 bool?\nWhether to apply the ambient CupertinoThemeData.\nfinal\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\ndragStartBehavior\n\u2192 DragStartBehavior\nDetermines the way that drag start behavior is handled.\nfinal\nfocusColor\n\u2192 Color?\nThe color to use for the focus highlight for keyboard interactions.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\noffLabelColor\n\u2192 Color?\nThe color to use for the accessibility label when the switch is off.\nfinal\nonChanged\n\u2192 ValueChanged<bool>?\nCalled when the user toggles with switch on or off.\nfinal\nonFocusChange\n\u2192 ValueChanged<bool>?\nHandler called when the focus changes.\nfinal\nonLabelColor\n\u2192 Color?\nThe color to use for the accessibility label when the switch is on.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nthumbColor\n\u2192 Color?\nThe color to use for the thumb of the switch.\nfinal\ntrackColor\n\u2192 Color?\nThe color to use for the track when the switch is off.\nfinal\nvalue\n\u2192 bool\nWhether this switch is on or off.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoSwitch>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoSwitch class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoSwitch].\n\nvoid main() => runApp(const CupertinoSwitchApp());\n\nclass CupertinoSwitchApp extends StatelessWidget {\n  const CupertinoSwitchApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoSwitchExample(),\n    );\n  }\n}\n\nclass CupertinoSwitchExample extends StatefulWidget {\n  const CupertinoSwitchExample({super.key});\n\n  @override\n  State<CupertinoSwitchExample> createState() => _CupertinoSwitchExampleState();\n}\n\nclass _CupertinoSwitchExampleState extends State<CupertinoSwitchExample> {\n  bool switchValue = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoSwitch Sample'),\n      ),\n      child: Center(\n        child: CupertinoSwitch(\n          // This bool value toggles the switch.\n          value: switchValue,\n          activeColor: CupertinoColors.activeBlue,\n          onChanged: (bool? value) {\n            // This is called when the user toggles the switch.\n            setState(() {\n              switchValue = value ?? false;\n            });\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTabBar-class.html",
  "title": "CupertinoTabBar class - cupertino library - Dart API",
  "documentation_content": "CupertinoTabBar class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTabBar class\nCupertinoTabBar\nbrightness_4\nbrightness_5\ndescription\nCupertinoTabBar class\nAn iOS-styled bottom navigation tab bar.\nDisplays multiple tabs using BottomNavigationBarItem with one tab being\nactive, the first tab by default.\nThis StatelessWidget doesn't store the active tab itself. You must\nlisten to the onTap callbacks and call setState with a new currentIndex\nfor the new selection to reflect. This can also be done automatically\nby wrapping this with a CupertinoTabScaffold.\nTab changes typically trigger a switch between Navigators, each with its\nown navigation stack, per standard iOS design. This can be done by using\nCupertinoTabViews inside each tab builder in CupertinoTabScaffold.\nIf the given backgroundColor's opacity is not 1.0 (which is the case by\ndefault), it will produce a blurring effect to the content behind it.\nWhen used as CupertinoTabScaffold.tabBar, by default CupertinoTabBar\ndisables text scaling to match the native iOS behavior. To override\nthis behavior, wrap each of the navigationBar's components inside a\nMediaQuery with the desired TextScaler.\nThis example shows a CupertinoTabBar placed in a CupertinoTabScaffold.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoTabBar.1 mysample\nSee also:\nCupertinoTabScaffold, which hosts the CupertinoTabBar at the bottom.\nBottomNavigationBarItem, an item in a CupertinoTabBar.\ndeveloper.apple.com/design/human-interface-guidelines/ios/bars/tab-bars/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nCupertinoTabBar\nImplemented types\nPreferredSizeWidget\nConstructors\nCupertinoTabBar({Key? key, required List<BottomNavigationBarItem> items, ValueChanged<int>? onTap, int currentIndex = 0, Color? backgroundColor, Color? activeColor, Color inactiveColor = _kDefaultTabBarInactiveColor, double iconSize = 30.0, double height = _kTabBarHeight, Border? border = const Border(top: BorderSide(color: _kDefaultTabBarBorderColor, width: 0.0))})\nCreates a tab bar in the iOS style.\nconst\nProperties\nactiveColor\n\u2192 Color?\nThe foreground color of the icon and title for the BottomNavigationBarItem\nof the selected tab.\nfinal\nbackgroundColor\n\u2192 Color?\nThe background color of the tab bar. If it contains transparency, the\ntab bar will automatically produce a blurring effect to the content\nbehind it.\nfinal\nborder\n\u2192 Border?\nThe border of the CupertinoTabBar.\nfinal\ncurrentIndex\n\u2192 int\nThe index into items of the current active item.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheight\n\u2192 double\nThe height of the CupertinoTabBar.\nfinal\niconSize\n\u2192 double\nThe size of all of the BottomNavigationBarItem icons.\nfinal\ninactiveColor\n\u2192 Color\nThe foreground color of the icon and title for the BottomNavigationBarItems\nin the unselected state.\nfinal\nitems\n\u2192 List<BottomNavigationBarItem>\nThe interactive items laid out within the bottom navigation bar.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonTap\n\u2192 ValueChanged<int>?\nThe callback that is called when a item is tapped.\nfinal\npreferredSize\n\u2192 Size\nThe size this widget would prefer if it were otherwise unconstrained.\nread-onlyoverride\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncopyWith({Key? key, List<BottomNavigationBarItem>? items, Color? backgroundColor, Color? activeColor, Color? inactiveColor, double? iconSize, double? height, Border? border, int? currentIndex, ValueChanged<int>? onTap})\n\u2192 CupertinoTabBar\nCreate a clone of the current CupertinoTabBar but with provided\nparameters overridden.\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nopaque(BuildContext context)\n\u2192 bool\nIndicates whether the tab bar is fully opaque or can have contents behind\nit show through it.\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoTabBar class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoTabBar].\n\nvoid main() => runApp(const CupertinoTabBarApp());\n\nclass CupertinoTabBarApp extends StatelessWidget {\n  const CupertinoTabBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoTabBarExample(),\n    );\n  }\n}\n\nclass CupertinoTabBarExample extends StatelessWidget {\n  const CupertinoTabBarExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoTabScaffold(\n      tabBar: CupertinoTabBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.star_fill),\n            label: 'Favorites',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.clock_solid),\n            label: 'Recents',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.person_alt_circle_fill),\n            label: 'Contacts',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.circle_grid_3x3_fill),\n            label: 'Keypad',\n          ),\n        ],\n      ),\n      tabBuilder: (BuildContext context, int index) {\n        return CupertinoTabView(\n          builder: (BuildContext context) {\n            return Center(\n              child: Text('Content of tab $index'),\n            );\n          },\n        );\n      },\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTabScaffold-class.html",
  "title": "CupertinoTabScaffold class - cupertino library - Dart API",
  "documentation_content": "CupertinoTabScaffold class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTabScaffold class\nCupertinoTabScaffold\nbrightness_4\nbrightness_5\ndescription\nCupertinoTabScaffold class\nImplements a tabbed iOS application's root layout and behavior structure.\nThe scaffold lays out the tab bar at the bottom and the content between or\nbehind the tab bar.\nA tabBar and a tabBuilder are required. The CupertinoTabScaffold\nwill automatically listen to the provided CupertinoTabBar's tap callbacks\nto change the active tab.\nA controller can be used to provide an initially selected tab index and manage\nsubsequent tab changes. If a controller is not specified, the scaffold will\ncreate its own CupertinoTabController and manage it internally. Otherwise\nit's up to the owner of controller to call dispose on it after finish\nusing it.\nTabs' contents are built with the provided tabBuilder at the active\ntab index. The tabBuilder must be able to build the same number of\npages as there are tabBar items. Inactive tabs will be moved Offstage\nand their animations disabled.\nAdding/removing tabs, or changing the order of tabs is supported but not\nrecommended. Doing so is against the iOS human interface guidelines, and\nCupertinoTabScaffold may lose some tabs' state in the process.\nUse CupertinoTabView as the root widget of each tab to support tabs with\nparallel navigation state and history. Since each CupertinoTabView contains\na Navigator, rebuilding the CupertinoTabView with a different\nWidgetBuilder instance in CupertinoTabView.builder will not recreate\nthe CupertinoTabView's navigation stack or update its UI. To update the\ncontents of the CupertinoTabView after it's built, trigger a rebuild\n(via State.setState, for instance) from its descendant rather than from\nits ancestor.\nA sample code implementing a typical iOS information architecture with tabs.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoTabScaffold.1 mysample\nTo push a route above all tabs instead of inside the currently selected one\n(such as when showing a dialog on top of this scaffold), use\nNavigator.of(rootNavigator: true) from inside the BuildContext of a\nCupertinoTabView.\nSee also:\nCupertinoTabBar, the bottom tab bar inserted in the scaffold.\nCupertinoTabController, the selection state of this widget.\nCupertinoTabView, the typical root content of each tab that holds its own\nNavigator stack.\nCupertinoPageRoute, a route hosting modal pages with iOS style transitions.\nCupertinoPageScaffold, typical contents of an iOS modal page implementing\nlayout with a navigation bar on top.\niOS human interface guidelines.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoTabScaffold\nConstructors\nCupertinoTabScaffold({Key? key, required CupertinoTabBar tabBar, required IndexedWidgetBuilder tabBuilder, CupertinoTabController? controller, Color? backgroundColor, bool resizeToAvoidBottomInset = true, String? restorationId})\nCreates a layout for applications with a tab bar at the bottom.\nProperties\nbackgroundColor\n\u2192 Color?\nThe color of the widget that underlies the entire scaffold.\nfinal\ncontroller\n\u2192 CupertinoTabController?\nControls the currently selected tab index of the tabBar, as well as the\nactive tab index of the tabBuilder. Providing a different controller\nwill also update the scaffold's current active index to the new controller's\nindex value.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nresizeToAvoidBottomInset\n\u2192 bool\nWhether the body should size itself to avoid the window's bottom inset.\nfinal\nrestorationId\n\u2192 String?\nRestoration ID to save and restore the state of the CupertinoTabScaffold.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\ntabBar\n\u2192 CupertinoTabBar\nThe tabBar is a CupertinoTabBar drawn at the bottom of the screen\nthat lets the user switch between different tabs in the main content area\nwhen present.\nfinal\ntabBuilder\n\u2192 IndexedWidgetBuilder\nAn IndexedWidgetBuilder that's called when tabs become active.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoTabScaffold>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoTabScaffold class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoTabScaffold].\n\nvoid main() => runApp(const TabScaffoldApp());\n\nclass TabScaffoldApp extends StatelessWidget {\n  const TabScaffoldApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: TabScaffoldExample(),\n    );\n  }\n}\n\nclass TabScaffoldExample extends StatefulWidget {\n  const TabScaffoldExample({super.key});\n\n  @override\n  State<TabScaffoldExample> createState() => _TabScaffoldExampleState();\n}\n\nclass _TabScaffoldExampleState extends State<TabScaffoldExample> {\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoTabScaffold(\n      tabBar: CupertinoTabBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.home),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(CupertinoIcons.search_circle_fill),\n            label: 'Explore',\n          ),\n        ],\n      ),\n      tabBuilder: (BuildContext context, int index) {\n        return CupertinoTabView(\n          builder: (BuildContext context) {\n            return CupertinoPageScaffold(\n              navigationBar: CupertinoNavigationBar(\n                middle: Text('Page 1 of tab $index'),\n              ),\n              child: Center(\n                child: CupertinoButton(\n                  child: const Text('Next page'),\n                  onPressed: () {\n                    Navigator.of(context).push(\n                      CupertinoPageRoute<void>(\n                        builder: (BuildContext context) {\n                          return CupertinoPageScaffold(\n                            navigationBar: CupertinoNavigationBar(\n                              middle: Text('Page 2 of tab $index'),\n                            ),\n                            child: Center(\n                              child: CupertinoButton(\n                                child: const Text('Back'),\n                                onPressed: () {\n                                  Navigator.of(context).pop();\n                                },\n                              ),\n                            ),\n                          );\n                        },\n                      ),\n                    );\n                  },\n                ),\n              ),\n            );\n          },\n        );\n      },\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTextField-class.html",
  "title": "CupertinoTextField class - cupertino library - Dart API",
  "documentation_content": "CupertinoTextField class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTextField class\nCupertinoTextField\nbrightness_4\nbrightness_5\ndescription\nCupertinoTextField class\nAn iOS-style text field.\nA text field lets the user enter text, either with a hardware keyboard or with\nan onscreen keyboard.\nThis widget corresponds to both a UITextField and an editable UITextView\non iOS.\nThe text field calls the onChanged callback whenever the user changes the\ntext in the field. If the user indicates that they are done typing in the\nfield (e.g., by pressing a button on the soft keyboard), the text field\ncalls the onSubmitted callback.\nIt's important to always use\ncharacters when dealing with user\ninput text that may contain complex characters. This will ensure that\nextended grapheme clusters and surrogate pairs are treated as single\ncharacters, as they appear to the user.\nFor example, when finding the length of some user input, use\nstring.characters.length. Do NOT use string.length or even\nstring.runes.length. For the complex character \"\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\", this\nappears to the user as a single character, and string.characters.length\nintuitively returns 1. On the other hand, string.length returns 8, and\nstring.runes.length returns 5!\nThis example shows how to set the initial value of the CupertinoTextField using\na controller that already contains some text.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoTextField.1 mysample\nThe controller can also control the selection and composing region (and to\nobserve changes to the text, selection, and composing region).\nThe text field has an overridable decoration that, by default, draws a\nrounded rectangle border around the text field. If you set the decoration\nproperty to null, the decoration will be removed entirely.\nWhen the widget has focus, it will prevent itself from disposing via its\nunderlying EditableText's AutomaticKeepAliveClientMixin.wantKeepAlive in\norder to avoid losing the selection. Removing the focus will allow it to be\ndisposed.\nRemember to call TextEditingController.dispose when it is no longer\nneeded. This will ensure we discard any resources used by the object.\nKeep the caret visible when focused\nWhen focused, this widget will make attempts to keep the text area and its\ncaret (even when showCursor is false) visible, on these occasions:\nWhen the user focuses this text field and it is not readOnly.\nWhen the user changes the selection of the text field, or changes the\ntext when the text field is not readOnly.\nWhen the virtual keyboard pops up.\nSee also:\ndeveloper.apple.com/documentation/uikit/uitextfield\nTextField, an alternative text field widget that follows the Material\nDesign UI conventions.\nEditableText, which is the raw text editing control at the heart of a\nTextField.\nLearn how to use a TextEditingController in one of our cookbook recipes.\ndeveloper.apple.com/design/human-interface-guidelines/ios/controls/text-fields/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoTextField\nConstructors\nCupertinoTextField({Key? key, TextEditingController? controller, FocusNode? focusNode, UndoHistoryController? undoController, BoxDecoration? decoration = _kDefaultRoundedBorderDecoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText), Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, @Deprecated('Use `contextMenuBuilder` instead. ' 'This feature was deprecated after v3.3.0-0.5.pre.') ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '\u2022', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, ValueChanged<String>? onChanged, VoidCallback? onEditingComplete, ValueChanged<String>? onSubmitted, TapRegionCallback? onTapOutside, List<TextInputFormatter>? inputFormatters, bool enabled = true, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), bool cursorOpacityAnimates = true, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, GestureTapCallback? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, EditableTextContextMenuBuilder? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})\nCreates an iOS-style text field.\nconst\nCupertinoTextField.borderless({Key? key, TextEditingController? controller, FocusNode? focusNode, UndoHistoryController? undoController, BoxDecoration? decoration, EdgeInsetsGeometry padding = const EdgeInsets.all(7.0), String? placeholder, TextStyle? placeholderStyle = _kDefaultPlaceholderStyle, Widget? prefix, OverlayVisibilityMode prefixMode = OverlayVisibilityMode.always, Widget? suffix, OverlayVisibilityMode suffixMode = OverlayVisibilityMode.always, OverlayVisibilityMode clearButtonMode = OverlayVisibilityMode.never, TextInputType? keyboardType, TextInputAction? textInputAction, TextCapitalization textCapitalization = TextCapitalization.none, TextStyle? style, StrutStyle? strutStyle, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, TextDirection? textDirection, bool readOnly = false, @Deprecated('Use `contextMenuBuilder` instead. ' 'This feature was deprecated after v3.3.0-0.5.pre.') ToolbarOptions? toolbarOptions, bool? showCursor, bool autofocus = false, String obscuringCharacter = '\u2022', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, MaxLengthEnforcement? maxLengthEnforcement, ValueChanged<String>? onChanged, VoidCallback? onEditingComplete, ValueChanged<String>? onSubmitted, TapRegionCallback? onTapOutside, List<TextInputFormatter>? inputFormatters, bool enabled = true, double cursorWidth = 2.0, double? cursorHeight, Radius cursorRadius = const Radius.circular(2.0), bool cursorOpacityAnimates = true, Color? cursorColor, BoxHeightStyle selectionHeightStyle = ui.BoxHeightStyle.tight, BoxWidthStyle selectionWidthStyle = ui.BoxWidthStyle.tight, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), DragStartBehavior dragStartBehavior = DragStartBehavior.start, bool? enableInteractiveSelection, TextSelectionControls? selectionControls, GestureTapCallback? onTap, ScrollController? scrollController, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints = const <String>[], ContentInsertionConfiguration? contentInsertionConfiguration, Clip clipBehavior = Clip.hardEdge, String? restorationId, bool scribbleEnabled = true, bool enableIMEPersonalizedLearning = true, EditableTextContextMenuBuilder? contextMenuBuilder = _defaultContextMenuBuilder, SpellCheckConfiguration? spellCheckConfiguration, TextMagnifierConfiguration? magnifierConfiguration})\nCreates a borderless iOS-style text field.\nconst\nProperties\nautocorrect\n\u2192 bool\nWhether to enable autocorrection.\nfinal\nautofillHints\n\u2192 Iterable<String>?\nA list of strings that helps the autofill service identify the type of this\ntext input.\nfinal\nautofocus\n\u2192 bool\nWhether this text field should focus itself if nothing else is already\nfocused.\nfinal\nclearButtonMode\n\u2192 OverlayVisibilityMode\nShow an iOS-style clear button to clear the current text entry.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncontentInsertionConfiguration\n\u2192 ContentInsertionConfiguration?\nConfiguration of handler for media content inserted via the system input\nmethod.\nfinal\ncontextMenuBuilder\n\u2192 EditableTextContextMenuBuilder?\nBuilds the text selection toolbar when requested by the user.\nfinal\ncontroller\n\u2192 TextEditingController?\nControls the text being edited.\nfinal\ncursorColor\n\u2192 Color?\nThe color to use when painting the cursor.\nfinal\ncursorHeight\n\u2192 double?\nHow tall the cursor will be.\nfinal\ncursorOpacityAnimates\n\u2192 bool\nWhether the cursor will animate from fully transparent to fully opaque\nduring each cursor blink.\nfinal\ncursorRadius\n\u2192 Radius\nHow rounded the corners of the cursor should be.\nfinal\ncursorWidth\n\u2192 double\nHow thick the cursor will be.\nfinal\ndecoration\n\u2192 BoxDecoration?\nControls the BoxDecoration of the box behind the text input.\nfinal\ndragStartBehavior\n\u2192 DragStartBehavior\nDetermines the way that drag start behavior is handled.\nfinal\nenabled\n\u2192 bool\nDisables the text field when false.\nfinal\nenableIMEPersonalizedLearning\n\u2192 bool\nWhether to enable that the IME update personalized data such as typing\nhistory and user dictionary data.\nfinal\nenableInteractiveSelection\n\u2192 bool\nWhether to enable user interface affordances for changing the\ntext selection.\nfinal\nenableSuggestions\n\u2192 bool\nWhether to show input suggestions as the user types.\nfinal\nexpands\n\u2192 bool\nWhether this widget's height will be sized to fill its parent.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninputFormatters\n\u2192 List<TextInputFormatter>?\nOptional input validation and formatting overrides.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nkeyboardAppearance\n\u2192 Brightness?\nThe appearance of the keyboard.\nfinal\nkeyboardType\n\u2192 TextInputType\nThe type of keyboard to use for editing the text.\nfinal\nmagnifierConfiguration\n\u2192 TextMagnifierConfiguration?\nA configuration object for a magnifier.\nfinal\nmaxLength\n\u2192 int?\nThe maximum number of characters (Unicode grapheme clusters) to allow in\nthe text field.\nfinal\nmaxLengthEnforcement\n\u2192 MaxLengthEnforcement?\nDetermines how the maxLength limit should be enforced.\nfinal\nmaxLines\n\u2192 int?\nThe maximum number of lines to show at one time, wrapping if necessary.\nfinal\nminLines\n\u2192 int?\nThe minimum number of lines to occupy when the content spans fewer lines.\nfinal\nobscureText\n\u2192 bool\nWhether to hide the text being edited (e.g., for passwords).\nfinal\nobscuringCharacter\n\u2192 String\nCharacter used for obscuring text if obscureText is true.\nfinal\nonChanged\n\u2192 ValueChanged<String>?\nCalled when the user initiates a change to the TextField's\nvalue: when they have inserted or deleted text.\nfinal\nonEditingComplete\n\u2192 VoidCallback?\nCalled when the user submits editable content (e.g., user presses the \"done\"\nbutton on the keyboard).\nfinal\nonSubmitted\n\u2192 ValueChanged<String>?\nCalled when the user indicates that they are done editing the text in the\nfield.\nfinal\nonTap\n\u2192 GestureTapCallback?\nCalled for each distinct tap except for every second tap of a double tap.\nfinal\nonTapOutside\n\u2192 TapRegionCallback?\nCalled for each tap that occurs outside of theTextFieldTapRegion group\nwhen the text field is focused.\nfinal\npadding\n\u2192 EdgeInsetsGeometry\nPadding around the text entry area between the prefix and suffix\nor the clear button when clearButtonMode is not never.\nfinal\nplaceholder\n\u2192 String?\nA lighter colored placeholder hint that appears on the first line of the\ntext field when the text entry is empty.\nfinal\nplaceholderStyle\n\u2192 TextStyle?\nThe style to use for the placeholder text.\nfinal\nprefix\n\u2192 Widget?\nAn optional Widget to display before the text.\nfinal\nprefixMode\n\u2192 OverlayVisibilityMode\nControls the visibility of the prefix widget based on the state of\ntext entry when the prefix argument is not null.\nfinal\nreadOnly\n\u2192 bool\nWhether the text can be changed.\nfinal\nrestorationId\n\u2192 String?\nRestoration ID to save and restore the state of the text field.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nscribbleEnabled\n\u2192 bool\nWhether iOS 14 Scribble features are enabled for this widget.\nfinal\nscrollController\n\u2192 ScrollController?\nThe ScrollController to use when vertically scrolling the input.\nfinal\nscrollPadding\n\u2192 EdgeInsets\nConfigures padding to edges surrounding a Scrollable when the Textfield scrolls into view.\nfinal\nscrollPhysics\n\u2192 ScrollPhysics?\nThe ScrollPhysics to use when vertically scrolling the input.\nfinal\nselectionControls\n\u2192 TextSelectionControls?\nOptional delegate for building the text selection handles.\nfinal\nselectionEnabled\n\u2192 bool\nSame as enableInteractiveSelection.\nread-only\nselectionHeightStyle\n\u2192 BoxHeightStyle\nControls how tall the selection highlight boxes are computed to be.\nfinal\nselectionWidthStyle\n\u2192 BoxWidthStyle\nControls how wide the selection highlight boxes are computed to be.\nfinal\nshowCursor\n\u2192 bool?\nWhether to show cursor.\nfinal\nsmartDashesType\n\u2192 SmartDashesType\nWhether to allow the platform to automatically format dashes.\nfinal\nsmartQuotesType\n\u2192 SmartQuotesType\nWhether to allow the platform to automatically format quotes.\nfinal\nspellCheckConfiguration\n\u2192 SpellCheckConfiguration?\nConfiguration that details how spell check should be performed.\nfinal\nstrutStyle\n\u2192 StrutStyle?\nThe strut style used for the vertical layout.\nfinal\nstyle\n\u2192 TextStyle?\nThe style to use for the text being edited.\nfinal\nsuffix\n\u2192 Widget?\nAn optional Widget to display after the text.\nfinal\nsuffixMode\n\u2192 OverlayVisibilityMode\nControls the visibility of the suffix widget based on the state of\ntext entry when the suffix argument is not null.\nfinal\ntextAlign\n\u2192 TextAlign\nHow the text should be aligned horizontally.\nfinal\ntextAlignVertical\n\u2192 TextAlignVertical?\nHow the text should be aligned vertically.\nfinal\ntextCapitalization\n\u2192 TextCapitalization\nConfigures how the platform keyboard will select an uppercase or\nlowercase keyboard.\nfinal\ntextDirection\n\u2192 TextDirection?\nThe directionality of the text.\nfinal\ntextInputAction\n\u2192 TextInputAction?\nThe type of action button to use for the keyboard.\nfinal\ntoolbarOptions\n\u2192 ToolbarOptions?\nConfiguration of toolbar options.\nfinal\nundoController\n\u2192 UndoHistoryController?\nControls the undo state.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CupertinoTextField>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\ndefaultSpellCheckSuggestionsToolbarBuilder(BuildContext context, EditableTextState editableTextState)\n\u2192 Widget\nDefault builder for the spell check suggestions toolbar in the Cupertino\nstyle.\ninferIOSSpellCheckConfiguration(SpellCheckConfiguration? configuration)\n\u2192 SpellCheckConfiguration\nReturns a new SpellCheckConfiguration where the given configuration has\nhad any missing values replaced with their defaults for the iOS platform.\nConstants\ncupertinoMisspelledTextStyle\n\u2192 const TextStyle\nThe TextStyle used to indicate misspelled words in the Cupertino style.\nTextStyle(decoration: TextDecoration.underline, decorationColor: CupertinoColors.systemRed, decorationStyle: TextDecorationStyle.dotted)\nkMisspelledSelectionColor\n\u2192 const Color\nThe color of the selection highlight when the spell check menu is visible.\nColor(0x62ff9699)\nFlutter\ncupertino\nCupertinoTextField class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoTextField].\n\nvoid main() => runApp(const CupertinoTextFieldApp());\n\nclass CupertinoTextFieldApp extends StatelessWidget {\n  const CupertinoTextFieldApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: CupertinoTextFieldExample(),\n    );\n  }\n}\n\nclass CupertinoTextFieldExample extends StatefulWidget {\n  const CupertinoTextFieldExample({super.key});\n\n  @override\n  State<CupertinoTextFieldExample> createState() =>\n      _CupertinoTextFieldExampleState();\n}\n\nclass _CupertinoTextFieldExampleState extends State<CupertinoTextFieldExample> {\n  late TextEditingController _textController;\n\n  @override\n  void initState() {\n    super.initState();\n    _textController = TextEditingController(text: 'initial text');\n  }\n\n  @override\n  void dispose() {\n    _textController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoTextField Sample'),\n      ),\n      child: Center(\n        child: CupertinoTextField(\n          controller: _textController,\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTextField/contentInsertionConfiguration.html",
  "title": "contentInsertionConfiguration property - CupertinoTextField class - cupertino library - Dart API",
  "documentation_content": "contentInsertionConfiguration property - CupertinoTextField class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTextField\ncontentInsertionConfiguration property\ncontentInsertionConfiguration\nbrightness_4\nbrightness_5\ndescription\ncontentInsertionConfiguration property\nContentInsertionConfiguration?\ncontentInsertionConfiguration\nfinal\nConfiguration of handler for media content inserted via the system input\nmethod.\nDefaults to null in which case media content insertion will be disabled,\nand the system will display a message informing the user that the text field\ndoes not support inserting media content.\nSet ContentInsertionConfiguration.onContentInserted to provide a handler.\nAdditionally, set ContentInsertionConfiguration.allowedMimeTypes\nto limit the allowable mime types for inserted content.\nThis example shows how to access the data for inserted content in your\nTextField.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=widgets.EditableText.contentInsertionConfiguration.1 mysample\nIf contentInsertionConfiguration is not provided, by default\nan empty list of mime types will be sent to the Flutter Engine.\nA handler function must be provided in order to customize the allowable\nmime types for inserted content.\nIf rich content is inserted without a handler, the system will display\na message informing the user that the current text input does not support\ninserting rich content.\nImplementation\nfinal ContentInsertionConfiguration? contentInsertionConfiguration;\nFlutter\ncupertino\nCupertinoTextField\ncontentInsertionConfiguration property\nCupertinoTextField class",
  "code_examples": [
   "import 'dart:typed_data';\n\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [EditableText.onContentInserted].\n\nvoid main() => runApp(const KeyboardInsertedContentApp());\n\nclass KeyboardInsertedContentApp extends StatelessWidget {\n  const KeyboardInsertedContentApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: KeyboardInsertedContentDemo(),\n    );\n  }\n}\n\nclass KeyboardInsertedContentDemo extends StatefulWidget {\n  const KeyboardInsertedContentDemo({super.key});\n\n  @override\n  State<KeyboardInsertedContentDemo> createState() =>\n      _KeyboardInsertedContentDemoState();\n}\n\nclass _KeyboardInsertedContentDemoState\n    extends State<KeyboardInsertedContentDemo> {\n  final TextEditingController _controller = TextEditingController();\n  Uint8List? bytes;\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Keyboard Inserted Content Sample')),\n      body: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          const Text(\n              \"Here's a text field that supports inserting only png or gif content:\"),\n          TextField(\n            controller: _controller,\n            contentInsertionConfiguration: ContentInsertionConfiguration(\n              allowedMimeTypes: const <String>['image/png', 'image/gif'],\n              onContentInserted: (KeyboardInsertedContent data) async {\n                if (data.data != null) {\n                  setState(() {\n                    bytes = data.data;\n                  });\n                }\n              },\n            ),\n          ),\n          if (bytes != null)\n            const Text(\"Here's the most recently inserted content:\"),\n          if (bytes != null) Image.memory(bytes!),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTextField/contextMenuBuilder.html",
  "title": "contextMenuBuilder property - CupertinoTextField class - cupertino library - Dart API",
  "documentation_content": "contextMenuBuilder property - CupertinoTextField class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTextField\ncontextMenuBuilder property\ncontextMenuBuilder\nbrightness_4\nbrightness_5\ndescription\ncontextMenuBuilder property\nEditableTextContextMenuBuilder?\ncontextMenuBuilder\nfinal\nBuilds the text selection toolbar when requested by the user.\nprimaryAnchor is the desired anchor position for the context menu, while\nsecondaryAnchor is the fallback location if the menu doesn't fit.\nbuttonItems represents the buttons that would be built by default for\nthis widget.\nFor backwards compatibility, when selectionControls is set to an object\nthat does not mix in TextSelectionHandleControls, contextMenuBuilder\nis ignored and the TextSelectionControls.buildToolbar method is used\ninstead.\nThis example shows how to customize the menu, in this case by keeping the\ndefault buttons for the platform but modifying their appearance.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=widgets.EditableText.contextMenuBuilder.1 mysample\nThis example shows how to show a custom button only when an email address\nis currently selected.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=widgets.EditableText.contextMenuBuilder.2 mysample\nSee also:\nAdaptiveTextSelectionToolbar, which builds the default text selection\ntoolbar for the current platform, but allows customization of the\nbuttons.\nAdaptiveTextSelectionToolbar.getAdaptiveButtons, which builds the\nbutton Widgets for the current platform given\nContextMenuButtonItems.\nBrowserContextMenu, which allows the browser's context menu on web\nto be disabled and Flutter-rendered context menus to appear.\nIf not provided, will build a default menu based on the platform.\nSee also:\nCupertinoAdaptiveTextSelectionToolbar, which is built by default.\nImplementation\nfinal EditableTextContextMenuBuilder? contextMenuBuilder;\nFlutter\ncupertino\nCupertinoTextField\ncontextMenuBuilder property\nCupertinoTextField class",
  "code_examples": [
   "import 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() => runApp(const EditableTextToolbarBuilderExampleApp());\n\nconst String emailAddress = 'me@example.com';\nconst String text = 'Select the email address and open the menu: $emailAddress';\n\nclass EditableTextToolbarBuilderExampleApp extends StatefulWidget {\n  const EditableTextToolbarBuilderExampleApp({super.key});\n\n  @override\n  State<EditableTextToolbarBuilderExampleApp> createState() =>\n      _EditableTextToolbarBuilderExampleAppState();\n}\n\nclass _EditableTextToolbarBuilderExampleAppState\n    extends State<EditableTextToolbarBuilderExampleApp> {\n  final TextEditingController _controller = TextEditingController(\n    text: text,\n  );\n\n  void _showDialog(BuildContext context) {\n    Navigator.of(context).push(\n      DialogRoute<void>(\n        context: context,\n        builder: (BuildContext context) =>\n            const AlertDialog(title: Text('You clicked send email!')),\n      ),\n    );\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    // On web, disable the browser's context menu since this example uses a custom\n    // Flutter-rendered context menu.\n    if (kIsWeb) {\n      BrowserContextMenu.disableContextMenu();\n    }\n  }\n\n  @override\n  void dispose() {\n    if (kIsWeb) {\n      BrowserContextMenu.enableContextMenu();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Custom button for emails'),\n        ),\n        body: Center(\n          child: Column(\n            children: <Widget>[\n              Container(height: 20.0),\n              TextField(\n                controller: _controller,\n                contextMenuBuilder: (BuildContext context,\n                    EditableTextState editableTextState) {\n                  final List<ContextMenuButtonItem> buttonItems =\n                      editableTextState.contextMenuButtonItems;\n                  // Here we add an \"Email\" button to the default TextField\n                  // context menu for the current platform, but only if an email\n                  // address is currently selected.\n                  final TextEditingValue value = _controller.value;\n                  if (_isValidEmail(value.selection.textInside(value.text))) {\n                    buttonItems.insert(\n                      0,\n                      ContextMenuButtonItem(\n                        label: 'Send email',\n                        onPressed: () {\n                          ContextMenuController.removeAny();\n                          _showDialog(context);\n                        },\n                      ),\n                    );\n                  }\n                  return AdaptiveTextSelectionToolbar.buttonItems(\n                    anchors: editableTextState.contextMenuAnchors,\n                    buttonItems: buttonItems,\n                  );\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nbool _isValidEmail(String text) {\n  return RegExp(\n    r'(?<name>[a-zA-Z0-9]+)'\n    r'@'\n    r'(?<domain>[a-zA-Z0-9]+)'\n    r'\\.'\n    r'(?<topLevelDomain>[a-zA-Z0-9]+)',\n  ).hasMatch(text);\n}\n",
   "import 'package:flutter/cupertino.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() => runApp(const EditableTextToolbarBuilderExampleApp());\n\nclass EditableTextToolbarBuilderExampleApp extends StatefulWidget {\n  const EditableTextToolbarBuilderExampleApp({super.key});\n\n  @override\n  State<EditableTextToolbarBuilderExampleApp> createState() =>\n      _EditableTextToolbarBuilderExampleAppState();\n}\n\nclass _EditableTextToolbarBuilderExampleAppState\n    extends State<EditableTextToolbarBuilderExampleApp> {\n  final TextEditingController _controller = TextEditingController(\n    text:\n        'Right click (desktop) or long press (mobile) to see the menu with custom buttons.',\n  );\n\n  @override\n  void initState() {\n    super.initState();\n    // On web, disable the browser's context menu since this example uses a custom\n    // Flutter-rendered context menu.\n    if (kIsWeb) {\n      BrowserContextMenu.disableContextMenu();\n    }\n  }\n\n  @override\n  void dispose() {\n    if (kIsWeb) {\n      BrowserContextMenu.enableContextMenu();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Custom button appearance'),\n        ),\n        body: Center(\n          child: Column(\n            children: <Widget>[\n              const SizedBox(height: 20.0),\n              TextField(\n                controller: _controller,\n                contextMenuBuilder: (BuildContext context,\n                    EditableTextState editableTextState) {\n                  return AdaptiveTextSelectionToolbar(\n                    anchors: editableTextState.contextMenuAnchors,\n                    // Build the default buttons, but make them look custom.\n                    // In a real project you may want to build different\n                    // buttons depending on the platform.\n                    children: editableTextState.contextMenuButtonItems\n                        .map((ContextMenuButtonItem buttonItem) {\n                      return CupertinoButton(\n                        borderRadius: null,\n                        color: const Color(0xffaaaa00),\n                        disabledColor: const Color(0xffaaaaff),\n                        onPressed: buttonItem.onPressed,\n                        padding: const EdgeInsets.all(10.0),\n                        pressedOpacity: 0.7,\n                        child: SizedBox(\n                          width: 200.0,\n                          child: Text(\n                            CupertinoTextSelectionToolbarButton.getButtonLabel(\n                                context, buttonItem),\n                          ),\n                        ),\n                      );\n                    }).toList(),\n                  );\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTextField/magnifierConfiguration.html",
  "title": "magnifierConfiguration property - CupertinoTextField class - cupertino library - Dart API",
  "documentation_content": "magnifierConfiguration property - CupertinoTextField class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTextField\nmagnifierConfiguration property\nmagnifierConfiguration\nbrightness_4\nbrightness_5\ndescription\nmagnifierConfiguration property\nTextMagnifierConfiguration?\nmagnifierConfiguration\nfinal\nA configuration object for a magnifier.\nThis magnifying glass is useful for scenarios on mobile devices where\nthe user's finger may be covering part of the screen where a granular\naction is being performed, such as navigating a small cursor with a drag\ngesture, on an image or text.\nIn general, most features of the magnifier can be configured through\nMagnifierBuilder. TextMagnifierConfiguration is used to configure\nthe magnifier's behavior through the SelectionOverlay.\nBy default, builds a CupertinoTextMagnifier on iOS and Android nothing on all other\nplatforms. If it is desired to suppress the magnifier, consider passing\nTextMagnifierConfiguration.disabled.\nThis sample demonstrates how to customize the magnifier that this text field uses.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoTextField.magnifierConfiguration.1 mysample\nImplementation\nfinal TextMagnifierConfiguration? magnifierConfiguration;\nFlutter\ncupertino\nCupertinoTextField\nmagnifierConfiguration property\nCupertinoTextField class",
  "code_examples": [
   "import 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const TextMagnifierExampleApp(text: 'Hello world!'));\n\nclass TextMagnifierExampleApp extends StatelessWidget {\n  const TextMagnifierExampleApp({\n    super.key,\n    this.textDirection = TextDirection.ltr,\n    required this.text,\n  });\n\n  final TextDirection textDirection;\n  final String text;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        body: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 48.0),\n          child: Center(\n            child: TextField(\n              textDirection: textDirection,\n              // Create a custom magnifier configuration that\n              // this `TextField` will use to build a magnifier with.\n              magnifierConfiguration: TextMagnifierConfiguration(\n                magnifierBuilder:\n                    (_, __, ValueNotifier<MagnifierInfo> magnifierInfo) =>\n                        CustomMagnifier(\n                  magnifierInfo: magnifierInfo,\n                ),\n              ),\n              controller: TextEditingController(text: text),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass CustomMagnifier extends StatelessWidget {\n  const CustomMagnifier({super.key, required this.magnifierInfo});\n\n  static const Size magnifierSize = Size(200, 200);\n\n  // This magnifier will consume some text data and position itself\n  // based on the info in the magnifier.\n  final ValueNotifier<MagnifierInfo> magnifierInfo;\n\n  @override\n  Widget build(BuildContext context) {\n    // Use a value listenable builder because we want to rebuild\n    // every time the text selection info changes.\n    // `CustomMagnifier` could also be a `StatefulWidget` and call `setState`\n    // when `magnifierInfo` updates. This would be useful for more complex\n    // positioning cases.\n    return ValueListenableBuilder<MagnifierInfo>(\n        valueListenable: magnifierInfo,\n        builder: (BuildContext context, MagnifierInfo currentMagnifierInfo, _) {\n          // We want to position the magnifier at the global position of the gesture.\n          Offset magnifierPosition = currentMagnifierInfo.globalGesturePosition;\n\n          // You may use the `MagnifierInfo` however you'd like:\n          // In this case, we make sure the magnifier never goes out of the current line bounds.\n          magnifierPosition = Offset(\n            clampDouble(\n              magnifierPosition.dx,\n              currentMagnifierInfo.currentLineBoundaries.left,\n              currentMagnifierInfo.currentLineBoundaries.right,\n            ),\n            clampDouble(\n              magnifierPosition.dy,\n              currentMagnifierInfo.currentLineBoundaries.top,\n              currentMagnifierInfo.currentLineBoundaries.bottom,\n            ),\n          );\n\n          // Finally, align the magnifier to the bottom center. The initial anchor is\n          // the top left, so subtract bottom center alignment.\n          magnifierPosition -= Alignment.bottomCenter.alongSize(magnifierSize);\n\n          return Positioned(\n            left: magnifierPosition.dx,\n            top: magnifierPosition.dy,\n            child: RawMagnifier(\n              magnificationScale: 2,\n              // The focal point starts at the center of the magnifier.\n              // We probably want to point below the magnifier, so\n              // offset the focal point by half the magnifier height.\n              focalPointOffset: Offset(0, magnifierSize.height / 2),\n              // Decorate it however we'd like!\n              decoration: const MagnifierDecoration(\n                shape: StarBorder(\n                  side: BorderSide(\n                    color: Colors.green,\n                    width: 2,\n                  ),\n                ),\n              ),\n              size: magnifierSize,\n            ),\n          );\n        });\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTextField/onChanged.html",
  "title": "onChanged property - CupertinoTextField class - cupertino library - Dart API",
  "documentation_content": "onChanged property - CupertinoTextField class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTextField\nonChanged property\nonChanged\nbrightness_4\nbrightness_5\ndescription\nonChanged property\nValueChanged<String>?\nonChanged\nfinal\nCalled when the user initiates a change to the TextField's\nvalue: when they have inserted or deleted text.\nThis callback doesn't run when the TextField's text is changed\nprogrammatically, via the TextField's controller. Typically it\nisn't necessary to be notified of such changes, since they're\ninitiated by the app itself.\nTo be notified of all changes to the TextField's text, cursor,\nand selection, one can add a listener to its controller with\nTextEditingController.addListener.\nonChanged is called before onSubmitted when user indicates completion\nof editing, such as when pressing the \"done\" button on the keyboard. That\ndefault behavior can be overridden. See onEditingComplete for details.\nThis example shows how onChanged could be used to check the TextField's\ncurrent value each time the user inserts or deletes a character.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=widgets.EditableText.onChanged.1 mysample\nImplementation\nfinal ValueChanged<String>? onChanged;\nFlutter\ncupertino\nCupertinoTextField\nonChanged property\nCupertinoTextField class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [EditableText.onChanged].\n\nvoid main() => runApp(const OnChangedExampleApp());\n\nclass OnChangedExampleApp extends StatelessWidget {\n  const OnChangedExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: OnChangedExample(),\n    );\n  }\n}\n\nclass OnChangedExample extends StatefulWidget {\n  const OnChangedExample({super.key});\n\n  @override\n  State<OnChangedExample> createState() => _OnChangedExampleState();\n}\n\nclass _OnChangedExampleState extends State<OnChangedExample> {\n  final TextEditingController _controller = TextEditingController();\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          const Text('What number comes next in the sequence?'),\n          const Text('1, 1, 2, 3, 5, 8...?'),\n          TextField(\n            controller: _controller,\n            onChanged: (String value) async {\n              if (value != '13') {\n                return;\n              }\n              await showDialog<void>(\n                context: context,\n                builder: (BuildContext context) {\n                  return AlertDialog(\n                    title: const Text('That is correct!'),\n                    content: const Text('13 is the right answer.'),\n                    actions: <Widget>[\n                      TextButton(\n                        onPressed: () {\n                          Navigator.pop(context);\n                        },\n                        child: const Text('OK'),\n                      ),\n                    ],\n                  );\n                },\n              );\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTextFormFieldRow-class.html",
  "title": "CupertinoTextFormFieldRow class - cupertino library - Dart API",
  "documentation_content": "CupertinoTextFormFieldRow class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTextFormFieldRow class\nCupertinoTextFormFieldRow\nbrightness_4\nbrightness_5\ndescription\nCupertinoTextFormFieldRow class\nCreates a CupertinoFormRow containing a FormField that wraps\na CupertinoTextField.\nA Form ancestor is not required. The Form allows one to\nsave, reset, or validate multiple fields at once. To use without a Form,\npass a GlobalKey to the constructor and use GlobalKey.currentState to\nsave or reset the form field.\nWhen a controller is specified, its TextEditingController.text\ndefines the initialValue. If this FormField is part of a scrolling\ncontainer that lazily constructs its children, like a ListView or a\nCustomScrollView, then a controller should be specified.\nThe controller's lifetime should be managed by a stateful widget ancestor\nof the scrolling container.\nThe prefix parameter is displayed at the start of the row. Standard iOS\nguidelines encourage passing a Text widget to prefix to detail the\nnature of the input.\nThe padding parameter is used to pad the contents of the row. It is\ndirectly passed to CupertinoFormRow. If the padding\nparameter is null, CupertinoFormRow constructs its own default\npadding (which is the standard form row padding in iOS.) If no edge\ninsets are intended, explicitly pass EdgeInsets.zero to padding.\nIf a controller is not specified, initialValue can be used to give\nthe automatically generated controller an initial value.\nConsider calling TextEditingController.dispose of the controller, if one\nis specified, when it is no longer needed. This will ensure we discard any\nresources used by the object.\nFor documentation about the various parameters, see the\nCupertinoTextField class and CupertinoTextField.borderless,\nthe constructor.\nCreates a CupertinoTextFormFieldRow with a leading text and validator\nfunction.\nIf the user enters valid text, the CupertinoTextField appears normally\nwithout any warnings to the user.\nIf the user enters invalid text, the error message returned from the\nvalidator function is displayed in dark red underneath the input.\nlink\ncontent_copy\nCupertinoTextFormFieldRow(\nprefix: const Text('Username'),\nonSaved: (String? value) {\n// This optional block of code can be used to run\n// code when the user saves the form.\n},\nvalidator: (String? value) {\nreturn (value != null && value.contains('@')) ? 'Do not use the @ char.' : null;\n},\n)\nThis example shows how to move the focus to the next field when the user\npresses the SPACE key.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoTextFormFieldRow.2 mysample\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nFormField<String>\nCupertinoTextFormFieldRow\nConstructors\nCupertinoTextFormFieldRow({Key? key, Widget? prefix, EdgeInsetsGeometry? padding, TextEditingController? controller, String? initialValue, FocusNode? focusNode, BoxDecoration? decoration, TextInputType? keyboardType, TextCapitalization textCapitalization = TextCapitalization.none, TextInputAction? textInputAction, TextStyle? style, StrutStyle? strutStyle, TextDirection? textDirection, TextAlign textAlign = TextAlign.start, TextAlignVertical? textAlignVertical, bool autofocus = false, bool readOnly = false, @Deprecated('Use `contextMenuBuilder` instead. ' 'This feature was deprecated after v3.3.0-0.5.pre.') ToolbarOptions? toolbarOptions, bool? showCursor, String obscuringCharacter = '\u2022', bool obscureText = false, bool autocorrect = true, SmartDashesType? smartDashesType, SmartQuotesType? smartQuotesType, bool enableSuggestions = true, int? maxLines = 1, int? minLines, bool expands = false, int? maxLength, ValueChanged<String>? onChanged, GestureTapCallback? onTap, VoidCallback? onEditingComplete, ValueChanged<String>? onFieldSubmitted, FormFieldSetter<String>? onSaved, FormFieldValidator<String>? validator, List<TextInputFormatter>? inputFormatters, bool? enabled, double cursorWidth = 2.0, double? cursorHeight, Color? cursorColor, Brightness? keyboardAppearance, EdgeInsets scrollPadding = const EdgeInsets.all(20.0), bool enableInteractiveSelection = true, TextSelectionControls? selectionControls, ScrollPhysics? scrollPhysics, Iterable<String>? autofillHints, AutovalidateMode autovalidateMode = AutovalidateMode.disabled, String? placeholder, TextStyle? placeholderStyle = const TextStyle(fontWeight: FontWeight.w400, color: CupertinoColors.placeholderText), EditableTextContextMenuBuilder? contextMenuBuilder = _defaultContextMenuBuilder})\nCreates a CupertinoFormRow containing a FormField that wraps\na CupertinoTextField.\nProperties\nautovalidateMode\n\u2192 AutovalidateMode\nUsed to enable/disable this form field auto validation and update its\nerror text.\nfinalinherited\nbuilder\n\u2192 FormFieldBuilder<String>\nFunction that returns the widget representing this form field. It is\npassed the form field state as input, containing the current value and\nvalidation state of this field.\nfinalinherited\ncontroller\n\u2192 TextEditingController?\nControls the text being edited.\nfinal\nenabled\n\u2192 bool\nWhether the form is able to receive user input.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninitialValue\n\u2192 String?\nAn optional value to initialize the form field to, or null otherwise.\nfinalinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonChanged\n\u2192 ValueChanged<String>?\nCalled when the user initiates a change to the TextField's\nvalue: when they have inserted or deleted text or reset the form.\nfinal\nonSaved\n\u2192 FormFieldSetter<String>?\nAn optional method to call with the final value when the form is saved via\nFormState.save.\nfinalinherited\npadding\n\u2192 EdgeInsetsGeometry?\nContent padding for the row.\nfinal\nprefix\n\u2192 Widget?\nA widget that is displayed at the start of the row.\nfinal\nrestorationId\n\u2192 String?\nRestoration ID to save and restore the state of the form field.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nvalidator\n\u2192 FormFieldValidator<String>?\nAn optional method that validates an input. Returns an error string to\ndisplay if the input is invalid, or null otherwise.\nfinalinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 FormFieldState<String>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoTextFormFieldRow class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoTextFormFieldRow].\n\nvoid main() => runApp(const FormSectionApp());\n\nclass FormSectionApp extends StatelessWidget {\n  const FormSectionApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: FromSectionExample(),\n    );\n  }\n}\n\nclass FromSectionExample extends StatelessWidget {\n  const FromSectionExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoFormSection Sample'),\n      ),\n      // Add safe area widget to place the CupertinoFormSection below the navigation bar.\n      child: SafeArea(\n        child: Form(\n          autovalidateMode: AutovalidateMode.always,\n          onChanged: () {\n            Form.maybeOf(primaryFocus!.context!)?.save();\n          },\n          child: CupertinoFormSection.insetGrouped(\n            header: const Text('SECTION 1'),\n            children: List<Widget>.generate(5, (int index) {\n              return CupertinoTextFormFieldRow(\n                prefix: const Text('Enter text'),\n                placeholder: 'Enter text',\n                validator: (String? value) {\n                  if (value == null || value.isEmpty) {\n                    return 'Please enter a value';\n                  }\n                  return null;\n                },\n              );\n            }),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/CupertinoTimerPicker-class.html",
  "title": "CupertinoTimerPicker class - cupertino library - Dart API",
  "documentation_content": "CupertinoTimerPicker class - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nCupertinoTimerPicker class\nCupertinoTimerPicker\nbrightness_4\nbrightness_5\ndescription\nCupertinoTimerPicker class\nA countdown timer picker in iOS style.\nThis picker shows a countdown duration with hour, minute and second spinners.\nThe duration is bound between 0 and 23 hours 59 minutes 59 seconds.\nThere are several modes of the timer picker listed in CupertinoTimerPickerMode.\nThe picker has a fixed size of 320 x 216, in logical pixels, with the exception\nof CupertinoTimerPickerMode.hms, which is 330 x 216. If the parent widget\nprovides more space than it needs, the picker will position itself according\nto its alignment property.\nThis example shows a CupertinoTimerPicker that returns a countdown duration.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.CupertinoTimerPicker.1 mysample\nSee also:\nCupertinoDatePicker, the class that implements different display modes\nof the iOS-style date picker.\nCupertinoPicker, the class that implements a content agnostic spinner UI.\ndeveloper.apple.com/design/human-interface-guidelines/ios/controls/pickers/\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCupertinoTimerPicker\nConstructors\nCupertinoTimerPicker({Key? key, CupertinoTimerPickerMode mode = CupertinoTimerPickerMode.hms, Duration initialTimerDuration = Duration.zero, int minuteInterval = 1, int secondInterval = 1, AlignmentGeometry alignment = Alignment.center, Color? backgroundColor, double itemExtent = _kItemExtent, required ValueChanged<Duration> onTimerDurationChanged})\nConstructs an iOS style countdown timer picker.\nProperties\nalignment\n\u2192 AlignmentGeometry\nDefines how the timer picker should be positioned within its parent.\nfinal\nbackgroundColor\n\u2192 Color?\nBackground color of timer picker.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninitialTimerDuration\n\u2192 Duration\nThe initial duration of the countdown timer.\nfinal\nitemExtent\n\u2192 double\nThe uniform height of all children.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nminuteInterval\n\u2192 int\nThe granularity of the minute spinner. Must be a positive integer factor\nof 60.\nfinal\nmode\n\u2192 CupertinoTimerPickerMode\nThe mode of the timer picker.\nfinal\nonTimerDurationChanged\n\u2192 ValueChanged<Duration>\nCallback called when the timer duration changes.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsecondInterval\n\u2192 int\nThe granularity of the second spinner. Must be a positive integer factor\nof 60.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<StatefulWidget>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ncupertino\nCupertinoTimerPicker class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [CupertinoTimerPicker].\n\nvoid main() => runApp(const TimerPickerApp());\n\nclass TimerPickerApp extends StatelessWidget {\n  const TimerPickerApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      home: TimerPickerExample(),\n    );\n  }\n}\n\nclass TimerPickerExample extends StatefulWidget {\n  const TimerPickerExample({super.key});\n\n  @override\n  State<TimerPickerExample> createState() => _TimerPickerExampleState();\n}\n\nclass _TimerPickerExampleState extends State<TimerPickerExample> {\n  Duration duration = const Duration(hours: 1, minutes: 23);\n\n  // This shows a CupertinoModalPopup with a reasonable fixed height which hosts\n  // a CupertinoTimerPicker.\n  void _showDialog(Widget child) {\n    showCupertinoModalPopup<void>(\n      context: context,\n      builder: (BuildContext context) => Container(\n        height: 216,\n        padding: const EdgeInsets.only(top: 6.0),\n        // The bottom margin is provided to align the popup above the system\n        // navigation bar.\n        margin: EdgeInsets.only(\n          bottom: MediaQuery.of(context).viewInsets.bottom,\n        ),\n        // Provide a background color for the popup.\n        color: CupertinoColors.systemBackground.resolveFrom(context),\n        // Use a SafeArea widget to avoid system overlaps.\n        child: SafeArea(\n          top: false,\n          child: child,\n        ),\n      ),\n    );\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('CupertinoTimerPicker Sample'),\n      ),\n      child: DefaultTextStyle(\n        style: TextStyle(\n          color: CupertinoColors.label.resolveFrom(context),\n          fontSize: 22.0,\n        ),\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              _TimerPickerItem(\n                children: <Widget>[\n                  const Text('Timer'),\n                  CupertinoButton(\n                    // Display a CupertinoTimerPicker with hour/minute mode.\n                    onPressed: () => _showDialog(\n                      CupertinoTimerPicker(\n                        mode: CupertinoTimerPickerMode.hm,\n                        initialTimerDuration: duration,\n                        // This is called when the user changes the timer's\n                        // duration.\n                        onTimerDurationChanged: (Duration newDuration) {\n                          setState(() => duration = newDuration);\n                        },\n                      ),\n                    ),\n                    // In this example, the timer's value is formatted manually.\n                    // You can use the intl package to format the value based on\n                    // the user's locale settings.\n                    child: Text(\n                      '$duration',\n                      style: const TextStyle(\n                        fontSize: 22.0,\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n// This class simply decorates a row of widgets.\nclass _TimerPickerItem extends StatelessWidget {\n  const _TimerPickerItem({required this.children});\n\n  final List<Widget> children;\n\n  @override\n  Widget build(BuildContext context) {\n    return DecoratedBox(\n      decoration: const BoxDecoration(\n        border: Border(\n          top: BorderSide(\n            color: CupertinoColors.inactiveGray,\n            width: 0.0,\n          ),\n          bottom: BorderSide(\n            color: CupertinoColors.inactiveGray,\n            width: 0.0,\n          ),\n        ),\n      ),\n      child: Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 16.0),\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceBetween,\n          children: children,\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/showCupertinoDialog.html",
  "title": "showCupertinoDialog function - cupertino library - Dart API",
  "documentation_content": "showCupertinoDialog function - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nshowCupertinoDialog<T> function\nshowCupertinoDialog\nbrightness_4\nbrightness_5\ndescription\nshowCupertinoDialog<T> function\nFuture<T?>\nshowCupertinoDialog<T>({required BuildContext context,\nrequired WidgetBuilder builder,\nString? barrierLabel,\nbool useRootNavigator = true,\nbool barrierDismissible = false,\nRouteSettings? routeSettings,\nOffset? anchorPoint}\n)\nDisplays an iOS-style dialog above the current contents of the app, with\niOS-style entrance and exit animations, modal barrier color, and modal\nbarrier behavior (by default, the dialog is not dismissible with a tap on\nthe barrier).\nThis function takes a builder which typically builds a CupertinoAlertDialog\nwidget. Content below the dialog is dimmed with a ModalBarrier. The widget\nreturned by the builder does not share a context with the location that\nshowCupertinoDialog is originally called from. Use a StatefulBuilder or\na custom StatefulWidget if the dialog needs to update dynamically.\nThe context argument is used to look up the Navigator for the dialog.\nIt is only used when the method is called. Its corresponding widget can\nbe safely removed from the tree before the dialog is closed.\nThe useRootNavigator argument is used to determine whether to push the\ndialog to the Navigator furthest from or nearest to the given context.\nBy default, useRootNavigator is true and the dialog route created by\nthis method is pushed to the root navigator.\nA DisplayFeature can split the screen into sub-screens. The closest one to\nanchorPoint is used to render the content.\nIf no anchorPoint is provided, then Directionality is used:\nfor TextDirection.ltr, anchorPoint is Offset.zero, which will\ncause the content to appear in the top-left sub-screen.\nfor TextDirection.rtl, anchorPoint is Offset(double.maxFinite, 0),\nwhich will cause the content to appear in the top-right sub-screen.\nIf no anchorPoint is provided, and there is no Directionality ancestor\nwidget in the tree, then the widget asserts during build in debug mode.\nIf the application has multiple Navigator objects, it may be necessary to\ncall Navigator.of(context, rootNavigator: true).pop(result) to close the\ndialog rather than just Navigator.pop(context, result).\nReturns a Future that resolves to the value (if any) that was passed to\nNavigator.pop when the dialog was closed.\nState Restoration in Dialogs\nUsing this method will not enable state restoration for the dialog. In order\nto enable state restoration for a dialog, use Navigator.restorablePush\nor Navigator.restorablePushNamed with CupertinoDialogRoute.\nFor more information about state restoration, see RestorationManager.\nThis sample demonstrates how to create a restorable Cupertino dialog. This is\naccomplished by enabling state restoration by specifying\nCupertinoApp.restorationScopeId and using Navigator.restorablePush to\npush CupertinoDialogRoute when the CupertinoButton is tapped.\nTo test state restoration on Android:\nTurn on \"Don't keep activities\", which destroys the Android activity\nas soon as the user leaves it. This option should become available\nwhen Developer Options are turned on for the device.\nRun the code sample on an Android device.\nCreate some in-memory state in the app on the phone,\ne.g. by navigating to a different screen.\nBackground the Flutter app, then return to it. It will restart\nand restore its state.\nTo test state restoration on iOS:\nOpen ios/Runner.xcworkspace/ in Xcode.\n(iOS 14+ only): Switch to build in profile or release mode, as\nlaunching an app from the home screen is not supported in debug\nmode.\nPress the Play button in Xcode to build and run the app.\nCreate some in-memory state in the app on the phone,\ne.g. by navigating to a different screen.\nBackground the app on the phone, e.g. by going back to the home screen.\nPress the Stop button in Xcode to terminate the app while running in\nthe background.\nOpen the app again on the phone (not via Xcode). It will restart\nand restore its state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.showCupertinoDialog.1 mysample\nSee also:\nCupertinoAlertDialog, an iOS-style alert dialog.\nshowDialog, which displays a Material-style dialog.\nshowGeneralDialog, which allows for customization of the dialog popup.\nDisplayFeatureSubScreen, which documents the specifics of how\nDisplayFeatures can split the screen into sub-screens.\ndeveloper.apple.com/ios/human-interface-guidelines/views/alerts/\nImplementation\nFuture<T?> showCupertinoDialog<T>({\nrequired BuildContext context,\nrequired WidgetBuilder builder,\nString? barrierLabel,\nbool useRootNavigator = true,\nbool barrierDismissible = false,\nRouteSettings? routeSettings,\nOffset? anchorPoint,\n}) {\nreturn Navigator.of(context, rootNavigator: useRootNavigator).push<T>(CupertinoDialogRoute<T>(\nbuilder: builder,\ncontext: context,\nbarrierDismissible: barrierDismissible,\nbarrierLabel: barrierLabel,\nbarrierColor: CupertinoDynamicColor.resolve(kCupertinoModalBarrierColor, context),\nsettings: routeSettings,\nanchorPoint: anchorPoint,\n));\n}\nFlutter\ncupertino\nshowCupertinoDialog<T> function\ncupertino library",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [showCupertinoDialog].\n\nvoid main() => runApp(const CupertinoDialogApp());\n\nclass CupertinoDialogApp extends StatelessWidget {\n  const CupertinoDialogApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      restorationScopeId: 'app',\n      home: CupertinoDialogExample(),\n    );\n  }\n}\n\nclass CupertinoDialogExample extends StatelessWidget {\n  const CupertinoDialogExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('Home'),\n      ),\n      child: Center(\n        child: CupertinoButton(\n          onPressed: () {\n            Navigator.of(context).restorablePush(_dialogBuilder);\n          },\n          child: const Text('Open Dialog'),\n        ),\n      ),\n    );\n  }\n\n  @pragma('vm:entry-point')\n  static Route<Object?> _dialogBuilder(\n      BuildContext context, Object? arguments) {\n    return CupertinoDialogRoute<void>(\n      context: context,\n      builder: (BuildContext context) {\n        return CupertinoAlertDialog(\n          title: const Text('Title'),\n          content: const Text('Content'),\n          actions: <Widget>[\n            CupertinoDialogAction(\n              onPressed: () {\n                Navigator.pop(context);\n              },\n              child: const Text('Yes'),\n            ),\n            CupertinoDialogAction(\n              onPressed: () {\n                Navigator.pop(context);\n              },\n              child: const Text('No'),\n            ),\n          ],\n        );\n      },\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/cupertino/showCupertinoModalPopup.html",
  "title": "showCupertinoModalPopup function - cupertino library - Dart API",
  "documentation_content": "showCupertinoModalPopup function - cupertino library - Dart API\nmenu\nFlutter\ncupertino\nshowCupertinoModalPopup<T> function\nshowCupertinoModalPopup\nbrightness_4\nbrightness_5\ndescription\nshowCupertinoModalPopup<T> function\nFuture<T?>\nshowCupertinoModalPopup<T>({required BuildContext context,\nrequired WidgetBuilder builder,\nImageFilter? filter,\nColor barrierColor = kCupertinoModalBarrierColor,\nbool barrierDismissible = true,\nbool useRootNavigator = true,\nbool semanticsDismissible = false,\nRouteSettings? routeSettings,\nOffset? anchorPoint}\n)\nShows a modal iOS-style popup that slides up from the bottom of the screen.\nSuch a popup is an alternative to a menu or a dialog and prevents the user\nfrom interacting with the rest of the app.\nThe context argument is used to look up the Navigator for the popup.\nIt is only used when the method is called. Its corresponding widget can be\nsafely removed from the tree before the popup is closed.\nThe barrierColor argument determines the Color of the barrier underneath\nthe popup. When unspecified, the barrier color defaults to a light opacity\nblack scrim based on iOS's dialog screens.\nThe barrierDismissible argument determines whether clicking outside the\npopup results in dismissal. It is true by default.\nThe useRootNavigator argument is used to determine whether to push the\npopup to the Navigator furthest from or nearest to the given context. It\nis true by default.\nThe semanticsDismissible argument is used to determine whether the\nsemantics of the modal barrier are included in the semantics tree.\nThe routeSettings argument is used to provide RouteSettings to the\ncreated Route.\nThe builder argument typically builds a CupertinoActionSheet widget.\nContent below the widget is dimmed with a ModalBarrier. The widget built\nby the builder does not share a context with the location that\nshowCupertinoModalPopup is originally called from. Use a\nStatefulBuilder or a custom StatefulWidget if the widget needs to\nupdate dynamically.\nA DisplayFeature can split the screen into sub-screens. The closest one to\nanchorPoint is used to render the content.\nIf no anchorPoint is provided, then Directionality is used:\nfor TextDirection.ltr, anchorPoint is Offset.zero, which will\ncause the content to appear in the top-left sub-screen.\nfor TextDirection.rtl, anchorPoint is Offset(double.maxFinite, 0),\nwhich will cause the content to appear in the top-right sub-screen.\nIf no anchorPoint is provided, and there is no Directionality ancestor\nwidget in the tree, then the widget asserts during build in debug mode.\nReturns a Future that resolves to the value that was passed to\nNavigator.pop when the popup was closed.\nState Restoration in Modals\nUsing this method will not enable state restoration for the modal. In order\nto enable state restoration for a modal, use Navigator.restorablePush\nor Navigator.restorablePushNamed with CupertinoModalPopupRoute.\nFor more information about state restoration, see RestorationManager.\nThis sample demonstrates how to create a restorable Cupertino modal route.\nThis is accomplished by enabling state restoration by specifying\nCupertinoApp.restorationScopeId and using Navigator.restorablePush to\npush CupertinoModalPopupRoute when the CupertinoButton is tapped.\nTo test state restoration on Android:\nTurn on \"Don't keep activities\", which destroys the Android activity\nas soon as the user leaves it. This option should become available\nwhen Developer Options are turned on for the device.\nRun the code sample on an Android device.\nCreate some in-memory state in the app on the phone,\ne.g. by navigating to a different screen.\nBackground the Flutter app, then return to it. It will restart\nand restore its state.\nTo test state restoration on iOS:\nOpen ios/Runner.xcworkspace/ in Xcode.\n(iOS 14+ only): Switch to build in profile or release mode, as\nlaunching an app from the home screen is not supported in debug\nmode.\nPress the Play button in Xcode to build and run the app.\nCreate some in-memory state in the app on the phone,\ne.g. by navigating to a different screen.\nBackground the app on the phone, e.g. by going back to the home screen.\nPress the Stop button in Xcode to terminate the app while running in\nthe background.\nOpen the app again on the phone (not via Xcode). It will restart\nand restore its state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=cupertino.showCupertinoModalPopup.1 mysample\nSee also:\nDisplayFeatureSubScreen, which documents the specifics of how\nDisplayFeatures can split the screen into sub-screens.\nCupertinoActionSheet, which is the widget usually returned by the\nbuilder argument to showCupertinoModalPopup.\ndeveloper.apple.com/design/human-interface-guidelines/ios/views/action-sheets/\nImplementation\nFuture<T?> showCupertinoModalPopup<T>({\nrequired BuildContext context,\nrequired WidgetBuilder builder,\nImageFilter? filter,\nColor barrierColor = kCupertinoModalBarrierColor,\nbool barrierDismissible = true,\nbool useRootNavigator = true,\nbool semanticsDismissible = false,\nRouteSettings? routeSettings,\nOffset? anchorPoint,\n}) {\nreturn Navigator.of(context, rootNavigator: useRootNavigator).push(\nCupertinoModalPopupRoute<T>(\nbuilder: builder,\nfilter: filter,\nbarrierColor: CupertinoDynamicColor.resolve(barrierColor, context),\nbarrierDismissible: barrierDismissible,\nsemanticsDismissible: semanticsDismissible,\nsettings: routeSettings,\nanchorPoint: anchorPoint,\n),\n);\n}\nFlutter\ncupertino\nshowCupertinoModalPopup<T> function\ncupertino library",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\n\n/// Flutter code sample for [showCupertinoModalPopup].\n\nvoid main() => runApp(const ModalPopupApp());\n\nclass ModalPopupApp extends StatelessWidget {\n  const ModalPopupApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const CupertinoApp(\n      theme: CupertinoThemeData(brightness: Brightness.light),\n      restorationScopeId: 'app',\n      home: ModalPopupExample(),\n    );\n  }\n}\n\nclass ModalPopupExample extends StatelessWidget {\n  const ModalPopupExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return CupertinoPageScaffold(\n      navigationBar: const CupertinoNavigationBar(\n        middle: Text('Home'),\n      ),\n      child: Center(\n        child: CupertinoButton(\n          onPressed: () {\n            Navigator.of(context).restorablePush(_modalBuilder);\n          },\n          child: const Text('Open Modal'),\n        ),\n      ),\n    );\n  }\n\n  @pragma('vm:entry-point')\n  static Route<void> _modalBuilder(BuildContext context, Object? arguments) {\n    return CupertinoModalPopupRoute<void>(\n      builder: (BuildContext context) {\n        return CupertinoActionSheet(\n          title: const Text('Title'),\n          message: const Text('Message'),\n          actions: <CupertinoActionSheetAction>[\n            CupertinoActionSheetAction(\n              child: const Text('Action One'),\n              onPressed: () {\n                Navigator.pop(context);\n              },\n            ),\n            CupertinoActionSheetAction(\n              child: const Text('Action Two'),\n              onPressed: () {\n                Navigator.pop(context);\n              },\n            ),\n          ],\n        );\n      },\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature-class.html",
  "title": "FontFeature class - dart:ui library - Dart API",
  "documentation_content": "FontFeature class - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature class\nFontFeature\nbrightness_4\nbrightness_5\nFontFeature class\nA feature tag and value that affect the selection of glyphs in a font.\nDifferent fonts support different features. Consider using a tool\nsuch as wakamaifondue.com/ to examine your fonts to\ndetermine what features are available.\nThis example shows usage of several OpenType font features,\nincluding Small Caps (selected manually using the \"smcp\" code),\nold-style figures, fractional ligatures, and stylistic sets.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/material.dart';\n/// Flutter code sample for [FontFeature].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn const MaterialApp(\nhome: ExampleWidget(),\n);\n}\n}\nfinal TextStyle titleStyle = TextStyle(\nfontSize: 18,\nfontFeatures: const <FontFeature>[FontFeature.enable('smcp')],\ncolor: Colors.blueGrey[600],\n);\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Cardo, Milonga and Raleway Dots fonts can be downloaded from Google\n// Fonts (https://www.google.com/fonts).\nreturn Scaffold(\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: <Widget>[\nconst Spacer(flex: 5),\nText('regular numbers have their place:', style: titleStyle),\nconst Text('The 1972 cup final was a 1-1 draw.',\nstyle: TextStyle(\nfontFamily: 'Cardo',\nfontSize: 24,\n)),\nconst Spacer(),\nText('but old-style figures blend well with lower case:',\nstyle: titleStyle),\nconst Text('The 1972 cup final was a 1-1 draw.',\nstyle: TextStyle(\nfontFamily: 'Cardo',\nfontSize: 24,\nfontFeatures: <FontFeature>[\nFontFeature.oldstyleFigures()\n])),\nconst Spacer(),\nconst Divider(),\nconst Spacer(),\nText('fractions look better with a custom ligature:',\nstyle: titleStyle),\nconst Text('Add 1/2 tsp of flour and stir.',\nstyle: TextStyle(\nfontFamily: 'Milonga',\nfontSize: 24,\nfontFeatures: <FontFeature>[\nFontFeature.alternativeFractions()\n])),\nconst Spacer(),\nconst Divider(),\nconst Spacer(),\nText('multiple stylistic sets in one font:', style: titleStyle),\nconst Text('Raleway Dots',\nstyle: TextStyle(fontFamily: 'Raleway Dots', fontSize: 48)),\nText('Raleway Dots',\nstyle: TextStyle(\nfontFeatures: <FontFeature>[FontFeature.stylisticSet(1)],\nfontFamily: 'Raleway Dots',\nfontSize: 48,\n)),\nconst Spacer(flex: 5),\n],\n),\n),\n);\n}\n}\nSome fonts also support continuous font variations; see the FontVariation\nclass.\nSee also:\nen.wikipedia.org/wiki/List_of_typographic_features,\nWikipedia's description of these typographic features.\ndocs.microsoft.com/en-us/typography/opentype/spec/featuretags,\nMicrosoft's registry of these features.\nConstructors\nFontFeature(String feature, [int value = 1])\nCreates a FontFeature object, which can be added to a TextStyle to\nchange how the engine selects glyphs when rendering text.\nconst\nFontFeature.alternative(int value)\nAccess alternative glyphs. (aalt)\nconst\nFontFeature.alternativeFractions()\nUse alternative ligatures to represent fractions. (afrc)\nconst\nFontFeature.caseSensitiveForms()\nEnable case-sensitive forms. (case)\nconst\nFontFeature.characterVariant(int value)\nSelect a character variant. (cv01 through cv99)\nfactory\nFontFeature.contextualAlternates()\nEnable contextual alternates. (calt)\nconst\nFontFeature.denominator()\nDisplay digits as denominators. (dnom)\nconst\nFontFeature.disable(String feature)\nCreate a FontFeature object that disables the feature with the given tag.\nconst\nFontFeature.enable(String feature)\nCreate a FontFeature object that enables the feature with the given tag.\nconst\nFontFeature.fractions()\nUse ligatures to represent fractions. (afrc)\nconst\nFontFeature.historicalForms()\nUse historical forms. (hist)\nconst\nFontFeature.historicalLigatures()\nUse historical ligatures. (hlig)\nconst\nFontFeature.liningFigures()\nUse lining figures. (lnum)\nconst\nFontFeature.localeAware({bool enable = true})\nUse locale-specific glyphs. (locl)\nconst\nFontFeature.notationalForms([int value = 1])\nDisplay alternative glyphs for numerals (alternate annotation forms). (nalt)\nconst\nFontFeature.numerators()\nDisplay digits as numerators. (numr)\nconst\nFontFeature.oldstyleFigures()\nUse old style figures. (onum)\nconst\nFontFeature.ordinalForms()\nUse ordinal forms for alphabetic glyphs. (ordn)\nconst\nFontFeature.proportionalFigures()\nUse proportional (varying width) figures. (pnum)\nconst\nFontFeature.randomize()\nRandomize the alternate forms used in text. (rand)\nconst\nFontFeature.scientificInferiors()\nUse scientific inferiors. (sinf)\nconst\nFontFeature.slashedZero()\nUse the slashed zero. (zero)\nconst\nFontFeature.stylisticAlternates()\nEnable stylistic alternates. (salt)\nconst\nFontFeature.stylisticSet(int value)\nSelect a stylistic set. (ss01 through ss20)\nfactory\nFontFeature.subscripts()\nEnable subscripts. (subs)\nconst\nFontFeature.superscripts()\nEnable superscripts. (sups)\nconst\nFontFeature.swash([int value = 1])\nEnable swash glyphs. (swsh)\nconst\nFontFeature.tabularFigures()\nUse tabular (monospace) figures. (tnum)\nconst\nProperties\nfeature\n\u2192 String\nThe tag that identifies the effect of this feature.\nMust consist of 4\nASCII characters (typically lowercase letters).\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyoverride\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nvalue\n\u2192 int\nThe value assigned to this feature.\nfinal\nMethods\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoString()\n\u2192 String\nA string representation of this object.\noverride\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\noverride\nFlutter\ndart:ui\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [FontFeature].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: ExampleWidget(),\n    );\n  }\n}\n\nfinal TextStyle titleStyle = TextStyle(\n  fontSize: 18,\n  fontFeatures: const <FontFeature>[FontFeature.enable('smcp')],\n  color: Colors.blueGrey[600],\n);\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Cardo, Milonga and Raleway Dots fonts can be downloaded from Google\n    // Fonts (https://www.google.com/fonts).\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Spacer(flex: 5),\n            Text('regular numbers have their place:', style: titleStyle),\n            const Text('The 1972 cup final was a 1-1 draw.',\n                style: TextStyle(\n                  fontFamily: 'Cardo',\n                  fontSize: 24,\n                )),\n            const Spacer(),\n            Text('but old-style figures blend well with lower case:',\n                style: titleStyle),\n            const Text('The 1972 cup final was a 1-1 draw.',\n                style: TextStyle(\n                    fontFamily: 'Cardo',\n                    fontSize: 24,\n                    fontFeatures: <FontFeature>[\n                      FontFeature.oldstyleFigures()\n                    ])),\n            const Spacer(),\n            const Divider(),\n            const Spacer(),\n            Text('fractions look better with a custom ligature:',\n                style: titleStyle),\n            const Text('Add 1/2 tsp of flour and stir.',\n                style: TextStyle(\n                    fontFamily: 'Milonga',\n                    fontSize: 24,\n                    fontFeatures: <FontFeature>[\n                      FontFeature.alternativeFractions()\n                    ])),\n            const Spacer(),\n            const Divider(),\n            const Spacer(),\n            Text('multiple stylistic sets in one font:', style: titleStyle),\n            const Text('Raleway Dots',\n                style: TextStyle(fontFamily: 'Raleway Dots', fontSize: 48)),\n            Text('Raleway Dots',\n                style: TextStyle(\n                  fontFeatures: <FontFeature>[FontFeature.stylisticSet(1)],\n                  fontFamily: 'Raleway Dots',\n                  fontSize: 48,\n                )),\n            const Spacer(flex: 5),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.alternative.html",
  "title": "FontFeature.alternative constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.alternative constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.alternative const constructor\nFontFeature.alternative\nbrightness_4\nbrightness_5\nFontFeature.alternative constructor\nconst\nFontFeature.alternative(int value\n)\nAccess alternative glyphs. (aalt)\nThis feature selects the given glyph variant for glyphs in the span.\nThe Raleway font supports several alternate glyphs. The code\nbelow shows how specific glyphs can be selected. With aalt set\nto zero, the default, the normal glyphs are used. With a\nnon-zero value, Raleway substitutes small caps for lower case\nletters. With value 2, the lowercase \"a\" changes to a stemless\n\"a\", whereas the lowercase \"t\" changes to a vertical bar instead\nof having a curve. By targeting specific letters in the text\n(using widgets.Text.rich), the desired rendering for each glyph can be\nachieved.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.alternative.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.alternative].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Raleway font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'The infamous Tuna Torture.',\nstyle: TextStyle(\nfontFamily: 'Raleway',\nfontFeatures: <FontFeature>[\nFontFeature.alternative(1), // or 2, or 3, or...\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ae#aalt\nImplementation\nconst FontFeature.alternative(this.value) : feature = 'aalt';\nFlutter\ndart:ui\nFontFeature\nFontFeature.alternative const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.alternative].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Raleway font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'The infamous Tuna Torture.',\n      style: TextStyle(\n        fontFamily: 'Raleway',\n        fontFeatures: <FontFeature>[\n          FontFeature.alternative(1), // or 2, or 3, or...\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.alternativeFractions.html",
  "title": "FontFeature.alternativeFractions constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.alternativeFractions constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.alternativeFractions const constructor\nFontFeature.alternativeFractions\nbrightness_4\nbrightness_5\nFontFeature.alternativeFractions constructor\nconst\nFontFeature.alternativeFractions()\nUse alternative ligatures to represent fractions. (afrc)\nWhen this feature is enabled (and the font supports it),\nsequences of digits separated by U+002F SOLIDUS character (/) or\nU+2044 FRACTION SLASH (\u2044) are replaced by ligatures that\nrepresent the corresponding fraction. These ligatures may differ\nfrom those used by the FontFeature.fractions feature.\nThis feature overrides all other features.\nThe Ubuntu Mono font supports the afrc feature. It causes digits\nbefore slashes to become superscripted and digits after slashes to become\nsubscripted. This contrasts to the effect seen with FontFeature.fractions.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.alternativeFractions.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.alternativeFractions].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Ubuntu Mono font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Fractions: 1/2 2/3 3/4 4/5',\nstyle: TextStyle(\nfontFamily: 'Ubuntu Mono',\nfontFeatures: <FontFeature>[\nFontFeature.alternativeFractions(),\n],\n),\n);\n}\n}\nSee also:\nFontFeature.fractions, which has a similar (but different) effect.\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ae#afrc\nImplementation\nconst FontFeature.alternativeFractions() : feature = 'afrc', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.alternativeFractions const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.alternativeFractions].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Ubuntu Mono font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Fractions: 1/2 2/3 3/4 4/5',\n      style: TextStyle(\n        fontFamily: 'Ubuntu Mono',\n        fontFeatures: <FontFeature>[\n          FontFeature.alternativeFractions(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.caseSensitiveForms.html",
  "title": "FontFeature.caseSensitiveForms constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.caseSensitiveForms constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.caseSensitiveForms const constructor\nFontFeature.caseSensitiveForms\nbrightness_4\nbrightness_5\nFontFeature.caseSensitiveForms constructor\nconst\nFontFeature.caseSensitiveForms()\nEnable case-sensitive forms. (case)\nSome glyphs, for example parentheses or operators, are typically\ndesigned to fit nicely with mixed case, or even predominantly\nlowercase, text. When these glyphs are placed near strings of\ncapital letters, they appear a little off-center.\nThis feature, when supported by the font, causes these glyphs to\nbe shifted slightly, or otherwise adjusted, so as to form a more\naesthetically pleasing combination with capital letters.\nThe Piazzolla font supports the case feature. It causes\nparentheses, brackets, braces, guillemets, slashes, bullets, and\nsome other glyphs (not shown below) to be shifted up slightly so\nthat capital letters appear centered in comparison. When the\nfeature is disabled, those glyphs are optimized for use with\nlowercase letters, and so capital letters appear to ride higher\nrelative to the punctuation marks.\nThe difference is very subtle. It may be most obvious when\nexamining the square brackets compared to the capital A.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.caseSensitiveForms.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.caseSensitiveForms].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'(A) [A] {A} \u00abA\u00bb A/B A\u2022B',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.caseSensitiveForms(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ae#case\nImplementation\nconst FontFeature.caseSensitiveForms() : feature = 'case', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.caseSensitiveForms const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.caseSensitiveForms].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      '(A) [A] {A} \u00abA\u00bb A/B A\u2022B',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.caseSensitiveForms(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.characterVariant.html",
  "title": "FontFeature.characterVariant constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.characterVariant constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.characterVariant factory constructor\nFontFeature.characterVariant\nbrightness_4\nbrightness_5\nFontFeature.characterVariant constructor\nFontFeature.characterVariant(int value\n)\nSelect a character variant. (cv01 through cv99)\nFonts may have up to 99 character variant sets, numbered 1\nthrough 99, each of which can be independently enabled or\ndisabled.\nRelated character variants are typically grouped into stylistic\nsets, controlled by the FontFeature.stylisticSet feature\n(ssXX).\nThe Source Code Pro font supports the cvXX feature for several\ncharacters. In the example below, variants 1 (cv01), 2\n(cv02), and 4 (cv04) are selected. Variant 1 changes the\nrendering of the \"a\" character, variant 2 changes the lowercase\n\"g\" character, and variant 4 changes the lowercase \"i\" and \"l\"\ncharacters. There are also variants (not shown here) that\ncontrol the rendering of various greek characters such as beta\nand theta.\nNotably, this can be contrasted with the stylistic sets, where\nthe set which affects the \"a\" character also affects beta, and\nthe set which affects the \"g\" character also affects theta and\ndelta.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.characterVariant.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.characterVariant].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Source Code Pro font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn Text(\n'a\u00e1\u00e2 \u03b2 g\u01f5\u011d \u03b8\u0431 Ii\u00ed\u00ee Ll',\nstyle: TextStyle(\nfontFamily: 'Source Code Pro',\nfontFeatures: <FontFeature>[\nFontFeature.characterVariant(1),\nFontFeature.characterVariant(2),\nFontFeature.characterVariant(4),\n],\n),\n);\n}\n}\nSee also:\nFontFeature.stylisticSet, which allows for groups of characters\nvariants to be selected at once, as opposed to individual character variants.\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ae#cv01-cv99\nImplementation\nfactory FontFeature.characterVariant(int value) {\nassert(value >= 1);\nassert(value <= 99);\nreturn FontFeature('cv${value.toString().padLeft(2, \"0\")}');\n}\nFlutter\ndart:ui\nFontFeature\nFontFeature.characterVariant factory constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.characterVariant].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Source Code Pro font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return Text(\n      'a\u00e1\u00e2 \u03b2 g\u01f5\u011d \u03b8\u0431 Ii\u00ed\u00ee Ll',\n      style: TextStyle(\n        fontFamily: 'Source Code Pro',\n        fontFeatures: <FontFeature>[\n          FontFeature.characterVariant(1),\n          FontFeature.characterVariant(2),\n          FontFeature.characterVariant(4),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.contextualAlternates.html",
  "title": "FontFeature.contextualAlternates constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.contextualAlternates constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.contextualAlternates const constructor\nFontFeature.contextualAlternates\nbrightness_4\nbrightness_5\nFontFeature.contextualAlternates constructor\nconst\nFontFeature.contextualAlternates()\nEnable contextual alternates. (calt)\nWith this feature enabled, specific glyphs may be replaced by\nalternatives based on nearby text.\nThe Barriecito font supports the calt feature. It causes some\nletters in close proximity to other instances of themselves to\nuse different glyphs, to give the appearance of more variation\nin the glyphs, rather than having each letter always use a\nparticular glyph.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.contextualAlternates.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.contextualAlternates].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Barriecito font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n\"Ooohh, we weren't going to tell him that.\",\nstyle: TextStyle(\nfontFamily: 'Barriecito',\nfontFeatures: <FontFeature>[\nFontFeature.contextualAlternates(),\n],\n),\n);\n}\n}\nSee also:\nFontFeature.randomize, which is more a rarely supported but more\npowerful way to get a similar effect.\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ae#calt\nImplementation\nconst FontFeature.contextualAlternates() : feature = 'calt', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.contextualAlternates const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.contextualAlternates].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Barriecito font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      \"Ooohh, we weren't going to tell him that.\",\n      style: TextStyle(\n        fontFamily: 'Barriecito',\n        fontFeatures: <FontFeature>[\n          FontFeature.contextualAlternates(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.denominator.html",
  "title": "FontFeature.denominator constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.denominator constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.denominator const constructor\nFontFeature.denominator\nbrightness_4\nbrightness_5\nFontFeature.denominator constructor\nconst\nFontFeature.denominator()\nDisplay digits as denominators. (dnom)\nThis is typically used automatically by the font rendering\nsystem as part of the implementation of frac for the denominator\npart of fractions (see FontFeature.fractions).\nThe Piazzolla font supports the dnom feature. It causes\nthe digits to be rendered smaller and near the bottom of the EM box.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.denominator.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.denominator].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Fractions: 1/2 2/3 3/4 4/5',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.denominator(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ae#dnom\nImplementation\nconst FontFeature.denominator() : feature = 'dnom', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.denominator const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.denominator].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Fractions: 1/2 2/3 3/4 4/5',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.denominator(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.fractions.html",
  "title": "FontFeature.fractions constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.fractions constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.fractions const constructor\nFontFeature.fractions\nbrightness_4\nbrightness_5\nFontFeature.fractions constructor\nconst\nFontFeature.fractions()\nUse ligatures to represent fractions. (afrc)\nWhen this feature is enabled (and the font supports it),\nsequences of digits separated by U+002F SOLIDUS character (/) or\nU+2044 FRACTION SLASH (\u2044) are replaced by ligatures that\nrepresent the corresponding fraction.\nThis feature may imply the FontFeature.numerators and\nFontFeature.denominator features.\nThe Ubuntu Mono font supports the frac feature. It causes\ndigits around slashes to be turned into dedicated fraction\nglyphs. This contrasts to the effect seen with\nFontFeature.alternativeFractions.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.fractions.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.fractions].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Ubuntu Mono font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Fractions: 1/2 2/3 3/4 4/5',\nstyle: TextStyle(\nfontFamily: 'Ubuntu Mono',\nfontFeatures: <FontFeature>[\nFontFeature.fractions(),\n],\n),\n);\n}\n}\nSee also:\nFontFeature.alternativeFractions, which has a similar (but different) effect.\ndocs.microsoft.com/en-us/typography/opentype/spec/features_fj#frac\nImplementation\nconst FontFeature.fractions() : feature = 'frac', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.fractions const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.fractions].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Ubuntu Mono font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Fractions: 1/2 2/3 3/4 4/5',\n      style: TextStyle(\n        fontFamily: 'Ubuntu Mono',\n        fontFeatures: <FontFeature>[\n          FontFeature.fractions(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.historicalForms.html",
  "title": "FontFeature.historicalForms constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.historicalForms constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.historicalForms const constructor\nFontFeature.historicalForms\nbrightness_4\nbrightness_5\nFontFeature.historicalForms constructor\nconst\nFontFeature.historicalForms()\nUse historical forms. (hist)\nSome fonts have alternatives for letters whose forms have changed\nthrough the ages. In the Latin alphabet, this is common for\nexample with the long-form \"s\" or the Fraktur \"k\". This feature enables\nthose alternative glyphs.\nThis does not enable legacy ligatures, only single-character alternatives.\nTo enable historical ligatures, use FontFeature.historicalLigatures.\nThis feature may override other glyph-substitution features.\nThe Cardo font supports the hist feature specifically for the\nletter \"s\": it changes occurrences of that letter for the glyph\nused by U+017F LATIN SMALL LETTER LONG S.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.historicalForms.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.historicalForms].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Cardo font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'VIBRANT fish assisted his business.',\nstyle: TextStyle(\nfontFamily: 'Sorts Mill Goudy',\nfontFeatures: <FontFeature>[\nFontFeature.historicalForms(), // Enables \"hist\".\n// Use FontFeature.historicalLigatures() to enable \"hlig\" as well.\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_fj#hist\nImplementation\nconst FontFeature.historicalForms() : feature = 'hist', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.historicalForms const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.historicalForms].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Cardo font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'VIBRANT fish assisted his business.',\n      style: TextStyle(\n        fontFamily: 'Sorts Mill Goudy',\n        fontFeatures: <FontFeature>[\n          FontFeature.historicalForms(), // Enables \"hist\".\n          // Use FontFeature.historicalLigatures() to enable \"hlig\" as well.\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.historicalLigatures.html",
  "title": "FontFeature.historicalLigatures constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.historicalLigatures constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.historicalLigatures const constructor\nFontFeature.historicalLigatures\nbrightness_4\nbrightness_5\nFontFeature.historicalLigatures constructor\nconst\nFontFeature.historicalLigatures()\nUse historical ligatures. (hlig)\nSome fonts support ligatures that have fallen out of favor today,\nbut were historically in common use. This feature enables those\nligatures.\nFor example, the \"long s\" glyph was historically typeset with\ncharacters such as \"t\" and \"h\" as a single ligature.\nThis does not enable the legacy forms, only ligatures. See\nFontFeature.historicalForms to enable single characters to be\nreplaced with their historical alternatives. Combining both is\nusually desired since the ligatures typically apply specifically\nto characters that have historical forms as well. For example,\nthe historical forms feature might replace the \"s\" character\nwith the \"long s\" (\u017f) character, while the historical ligatures\nfeature might specifically apply to cases where \"long s\" is\nfollowed by other characters such as \"t\". In such cases, without\nthe historical forms being enabled, the ligatures would only\napply when the \"long s\" is used explicitly.\nThis feature may override other glyph-substitution features.\nThe Cardo font supports the hlig feature. It has legacy\nligatures for \"VI\" and \"NT\", and various ligatures involving the\n\"long s\". In the example below, both historical forms (hist 1)\nand historical ligatures (hlig 1) are enabled, so, for\ninstance, \"fish\" becomes \"fi\u017fh\" which is then rendered using a\nligature for the last two characters.\nSimilarly, the word \"business\" is turned into \"bu\u017fine\u017f\u017f\" by\nhist, and the \u017fi and \u017f\u017f pairs are ligated by hlig.\nObserve in particular the position of the dot of the \"i\" in\n\"business\" in the various combinations of these features.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.historicalLigatures.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.historicalLigatures].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Cardo font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'VIBRANT fish assisted his business.',\nstyle: TextStyle(\nfontFamily: 'Sorts Mill Goudy',\nfontFeatures: <FontFeature>[\nFontFeature.historicalForms(), // Enables \"hist\".\nFontFeature.historicalLigatures(), // Enables \"hlig\".\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_fj#hlig\nImplementation\nconst FontFeature.historicalLigatures() : feature = 'hlig', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.historicalLigatures const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.historicalLigatures].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Cardo font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'VIBRANT fish assisted his business.',\n      style: TextStyle(\n        fontFamily: 'Sorts Mill Goudy',\n        fontFeatures: <FontFeature>[\n          FontFeature.historicalForms(), // Enables \"hist\".\n          FontFeature.historicalLigatures(), // Enables \"hlig\".\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.liningFigures.html",
  "title": "FontFeature.liningFigures constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.liningFigures constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.liningFigures const constructor\nFontFeature.liningFigures\nbrightness_4\nbrightness_5\nFontFeature.liningFigures constructor\nconst\nFontFeature.liningFigures()\nUse lining figures. (lnum)\nSome fonts have digits that, like lowercase latin letters, have\nboth descenders and ascenders. In some situations, especially in\nconjunction with capital letters, this leads to an aesthetically\nquestionable irregularity. Lining figures, on the other hand,\nhave a uniform height, and align with the baseline and the\nheight of capital letters. Conceptually, they can be thought of\nas \"capital digits\".\nThis feature may conflict with FontFeature.oldstyleFigures.\nThe Sorts Mill Goudy font supports the lnum feature. It causes\ndigits to fit more seamlessly with capital letters.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.liningFigures.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.liningFigures].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Sorts Mill Goudy font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'CALL 311-555-2368 NOW!',\nstyle: TextStyle(\nfontFamily: 'Sorts Mill Goudy',\nfontFeatures: <FontFeature>[\nFontFeature.liningFigures(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ko#lnum\nImplementation\nconst FontFeature.liningFigures() : feature = 'lnum', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.liningFigures const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.liningFigures].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Sorts Mill Goudy font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'CALL 311-555-2368 NOW!',\n      style: TextStyle(\n        fontFamily: 'Sorts Mill Goudy',\n        fontFeatures: <FontFeature>[\n          FontFeature.liningFigures(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.localeAware.html",
  "title": "FontFeature.localeAware constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.localeAware constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.localeAware const constructor\nFontFeature.localeAware\nbrightness_4\nbrightness_5\nFontFeature.localeAware constructor\nconst\nFontFeature.localeAware({bool enable = true}\n)\nUse locale-specific glyphs. (locl)\nSome characters, most notably those in the Unicode Han\nUnification blocks, vary in presentation based on the locale in\nuse. For example, the ideograph for \"grass\" (U+8349, \u8349) has a\nbroken top line in Traditional Chinese, but a solid top line in\nSimplified Chinese, Japanese, Korean, and Vietnamese. This kind\nof variation also exists with other alphabets, for example\nCyrillic characters as used in the Bulgarian and Serbian\nalphabets vary from their Russian counterparts.\nA particular font may default to the forms for the locale for\nwhich it was constructed, but still support alternative forms\nfor other locales. When this feature is enabled, the locale (as\nspecified using painting.TextStyle.locale, for instance) is\nused to determine which glyphs to use when locale-specific\nalternatives exist. Disabling this feature causes the font\nrendering to ignore locale information and only use the default\nglyphs.\nThis feature is enabled by default. Using\nFontFeature.localeAware(enable: false) disables the\nlocale-awareness. (So does not specifying the locale in the\nfirst place, of course.)\nThe Noto Sans CJK font supports the locl feature for CJK characters.\nIn this example, the localeAware feature is not explicitly used, as it is\nenabled by default. This example instead shows how to set the locale,\nthus demonstrating how Noto Sans adapts the glyph shapes to the locale.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.localeAware.1 mysample\ncontent_copy\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.localeAware].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Noto family of fonts can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'\u6b21 \u5316 \u5203 \u76f4 \u5165 \u4ee4',\nlocale: Locale(\n'zh', 'CN'), // or Locale('ja'), Locale('ko'), Locale('zh', 'TW'), etc\nstyle: TextStyle(\nfontFamily: 'Noto Sans',\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ko#locl\nen.wikipedia.org/wiki/Han_unification\nen.wikipedia.org/wiki/Cyrillic_script\nImplementation\nconst FontFeature.localeAware({ bool enable = true }) : feature = 'locl', value = enable ? 1 : 0;\nFlutter\ndart:ui\nFontFeature\nFontFeature.localeAware const constructor\nFontFeature class",
  "code_examples": [
   "import 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.localeAware].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Noto family of fonts can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      '\u6b21 \u5316 \u5203 \u76f4 \u5165 \u4ee4',\n      locale: Locale(\n          'zh', 'CN'), // or Locale('ja'), Locale('ko'), Locale('zh', 'TW'), etc\n      style: TextStyle(\n        fontFamily: 'Noto Sans',\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.notationalForms.html",
  "title": "FontFeature.notationalForms constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.notationalForms constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.notationalForms const constructor\nFontFeature.notationalForms\nbrightness_4\nbrightness_5\nFontFeature.notationalForms constructor\nconst\nFontFeature.notationalForms([int value = 1]\n)\nDisplay alternative glyphs for numerals (alternate annotation forms). (nalt)\nReplaces glyphs used in numbering lists (e.g. 1, 2, 3...; or a, b, c...) with notational\nvariants that might be more typographically interesting.\nFonts sometimes support multiple alternatives, and the argument\nselects the set to use (a positive integer, or 0 to disable the\nfeature). The default set if none is specified is 1.\nThe Gothic A1 font supports several notational variant sets via\nthe nalt feature.\nSet 1 changes the spacing of the glyphs. Set 2 parenthesizes the\nlatin letters and reduces the numerals to subscripts. Set 3\ncircles the glyphs. Set 4 parenthesizes the digits. Set 5 uses\nreverse-video circles for the digits. Set 7 superscripts the\ndigits.\nThe code below shows how to select set 3.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.notationalForms.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.notationalForms].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Gothic A1 font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'abc 123',\nstyle: TextStyle(\nfontFamily: 'Gothic A1',\nfontFeatures: <FontFeature>[\nFontFeature.notationalForms(3), // circled letters and digits\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ko#nalt\nImplementation\nconst FontFeature.notationalForms([this.value = 1]) : feature = 'nalt', assert(value >= 0);\nFlutter\ndart:ui\nFontFeature\nFontFeature.notationalForms const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.notationalForms].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Gothic A1 font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'abc 123',\n      style: TextStyle(\n        fontFamily: 'Gothic A1',\n        fontFeatures: <FontFeature>[\n          FontFeature.notationalForms(3), // circled letters and digits\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.numerators.html",
  "title": "FontFeature.numerators constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.numerators constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.numerators const constructor\nFontFeature.numerators\nbrightness_4\nbrightness_5\nFontFeature.numerators constructor\nconst\nFontFeature.numerators()\nDisplay digits as numerators. (numr)\nThis is typically used automatically by the font rendering\nsystem as part of the implementation of frac for the numerator\npart of fractions (see FontFeature.fractions).\nThe Piazzolla font supports the numr feature. It causes\nthe digits to be rendered smaller and near the top of the EM box.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.numerators.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.numerators].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\n/// This is the stateless widget that the main application instantiates.\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Fractions: 1/2 2/3 3/4 4/5',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.numerators(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ko#numr\nImplementation\nconst FontFeature.numerators() : feature = 'numr', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.numerators const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.numerators].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\n/// This is the stateless widget that the main application instantiates.\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Fractions: 1/2 2/3 3/4 4/5',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.numerators(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.oldstyleFigures.html",
  "title": "FontFeature.oldstyleFigures constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.oldstyleFigures constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.oldstyleFigures const constructor\nFontFeature.oldstyleFigures\nbrightness_4\nbrightness_5\nFontFeature.oldstyleFigures constructor\nconst\nFontFeature.oldstyleFigures()\nUse old style figures. (onum)\nSome fonts have variants of the figures (e.g. the digit 9) that,\nwhen this feature is enabled, render with descenders under the\nbaseline instead of being entirely above the baseline. If the\ndefault digits are lining figures, this allows the selection of\ndigits that fit better with mixed case (uppercase and lowercase)\ntext.\nThis overrides FontFeature.slashedZero and may conflict with\nFontFeature.liningFigures.\nThe Piazzolla font supports the onum feature. It causes\ndigits to extend below the baseline.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.oldstyleFigures.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.oldstyleFigures].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Call 311-555-2368 now!',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.oldstyleFigures(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ko#onum\nen.wikipedia.org/wiki/Text_figures\nImplementation\nconst FontFeature.oldstyleFigures() : feature = 'onum', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.oldstyleFigures const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.oldstyleFigures].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Call 311-555-2368 now!',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.oldstyleFigures(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.ordinalForms.html",
  "title": "FontFeature.ordinalForms constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.ordinalForms constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.ordinalForms const constructor\nFontFeature.ordinalForms\nbrightness_4\nbrightness_5\nFontFeature.ordinalForms constructor\nconst\nFontFeature.ordinalForms()\nUse ordinal forms for alphabetic glyphs. (ordn)\nSome fonts have variants of the alphabetic glyphs intended for\nuse after numbers when expressing ordinals, as in \"1st\", \"2nd\",\n\"3rd\". This feature enables those alternative glyphs.\nThis may override other features that substitute glyphs.\nThe Piazzolla font supports the ordn feature. It causes\nalphabetic glyphs to become smaller and superscripted.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.ordinalForms.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.ordinalForms].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'1st, 2nd, 3rd, 4th...',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.ordinalForms(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_ko#ordn\nImplementation\nconst FontFeature.ordinalForms() : feature = 'ordn', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.ordinalForms const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.ordinalForms].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      '1st, 2nd, 3rd, 4th...',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.ordinalForms(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.proportionalFigures.html",
  "title": "FontFeature.proportionalFigures constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.proportionalFigures constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.proportionalFigures const constructor\nFontFeature.proportionalFigures\nbrightness_4\nbrightness_5\nFontFeature.proportionalFigures constructor\nconst\nFontFeature.proportionalFigures()\nUse proportional (varying width) figures. (pnum)\nFor fonts that have both proportional and tabular (monospace) figures,\nthis enables the proportional figures.\nThis is mutually exclusive with FontFeature.tabularFigures.\nThe default behavior varies from font to font.\nThe Kufam font supports the pnum feature. It causes the digits\nto become proportionally-sized, rather than all being the same\nwidth. In this font this is especially noticeable with the digit\n\"1\": normally, the 1 has very noticeable serifs in this\nsans-serif font, but with the proportionally figures enabled,\nthe digit becomes much narrower.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.proportionalFigures.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.proportionalFigures].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Kufam font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Call 311-555-2368 now!',\nstyle: TextStyle(\nfontFamily: 'Kufam',\nfontFeatures: <FontFeature>[\nFontFeature.proportionalFigures(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#pnum\nImplementation\nconst FontFeature.proportionalFigures() : feature = 'pnum', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.proportionalFigures const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.proportionalFigures].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Kufam font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Call 311-555-2368 now!',\n      style: TextStyle(\n        fontFamily: 'Kufam',\n        fontFeatures: <FontFeature>[\n          FontFeature.proportionalFigures(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.scientificInferiors.html",
  "title": "FontFeature.scientificInferiors constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.scientificInferiors constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.scientificInferiors const constructor\nFontFeature.scientificInferiors\nbrightness_4\nbrightness_5\nFontFeature.scientificInferiors constructor\nconst\nFontFeature.scientificInferiors()\nUse scientific inferiors. (sinf)\nSome fonts have variants of the figures (e.g. the digit 2) that,\nwhen this feature is enabled, render in a manner more\nappropriate for subscripted digits (\"inferiors\") used in\nscientific contexts, e.g. the subscripts in chemical formulae.\nThis may override other features that substitute glyphs.\nThe Piazzolla font supports the sinf feature. It causes\ndigits to be smaller and subscripted.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.scientificInferiors.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.scientificInferiors].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'C8H10N4O2',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.scientificInferiors(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#sinf\nImplementation\nconst FontFeature.scientificInferiors() : feature = 'sinf', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.scientificInferiors const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.scientificInferiors].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'C8H10N4O2',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.scientificInferiors(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.slashedZero.html",
  "title": "FontFeature.slashedZero constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.slashedZero constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.slashedZero const constructor\nFontFeature.slashedZero\nbrightness_4\nbrightness_5\nFontFeature.slashedZero constructor\nconst\nFontFeature.slashedZero()\nUse the slashed zero. (zero)\nSome fonts contain both a circular zero and a zero with a slash. This\nenables the use of the latter form.\nThis is overridden by FontFeature.oldstyleFigures.\nThe Source Code Pro font supports the zero feature. It causes the\nzero digit to be drawn with a slash rather than the default rendering,\nwhich in this case has a dot through the zero rather than a slash.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.slashedZero.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.slashedZero].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Source Code Pro font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'One million is: 1,000,000.00',\nstyle: TextStyle(\nfontFamily: 'Source Code Pro',\nfontFeatures: <FontFeature>[\nFontFeature.slashedZero(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_uz#zero\nImplementation\nconst FontFeature.slashedZero() : feature = 'zero', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.slashedZero const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.slashedZero].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Source Code Pro font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'One million is: 1,000,000.00',\n      style: TextStyle(\n        fontFamily: 'Source Code Pro',\n        fontFeatures: <FontFeature>[\n          FontFeature.slashedZero(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.stylisticAlternates.html",
  "title": "FontFeature.stylisticAlternates constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.stylisticAlternates constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.stylisticAlternates const constructor\nFontFeature.stylisticAlternates\nbrightness_4\nbrightness_5\nFontFeature.stylisticAlternates constructor\nconst\nFontFeature.stylisticAlternates()\nEnable stylistic alternates. (salt)\nSome fonts have alternative forms that are not tied to a\nparticular purpose (such as being historical forms, or\ncontextually relevant alternatives, or ligatures, etc). This\nfont feature enables these purely stylistic alternatives.\nThis may override other features that substitute glyphs.\nThe Source Code Pro font supports the salt feature. It causes\nsome glyphs to be rendered differently, for example the \"a\" and\n\"g\" glyphs change from their typographically common\ndouble-storey forms to simpler single-storey forms, the dollar\nsign's line changes from discontinuous to continuous (and is\nangled), and the \"0\" rendering changes from a center dot to a\nslash.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.stylisticAlternates.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.stylisticAlternates].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Source Code Pro font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\nr'Agile Game - $100 initial bet',\nstyle: TextStyle(\nfontFamily: 'Source Code Pro',\nfontFeatures: <FontFeature>[\nFontFeature.stylisticAlternates(),\n],\n),\n);\n}\n}\nSee also:\nFontFeature.contextualAlternates, which is enables alternates specific to certain contexts.\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#salt\nImplementation\nconst FontFeature.stylisticAlternates() : feature = 'salt', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.stylisticAlternates const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.stylisticAlternates].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Source Code Pro font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      r'Agile Game - $100 initial bet',\n      style: TextStyle(\n        fontFamily: 'Source Code Pro',\n        fontFeatures: <FontFeature>[\n          FontFeature.stylisticAlternates(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.stylisticSet.html",
  "title": "FontFeature.stylisticSet constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.stylisticSet constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.stylisticSet factory constructor\nFontFeature.stylisticSet\nbrightness_4\nbrightness_5\nFontFeature.stylisticSet constructor\nFontFeature.stylisticSet(int value\n)\nSelect a stylistic set. (ss01 through ss20)\nFonts may have up to 20 stylistic sets, numbered 1 through 20,\neach of which can be independently enabled or disabled.\nFor more fine-grained control, in some fonts individual\ncharacter variants can also be controlled by the\nFontFeature.characterVariant feature (cvXX).\nThe Source Code Pro font supports the ssXX feature for several\nsets. In the example below, stylistic sets 2 (ss02), 3\n(ss03), and 4 (ss04) are selected. Stylistic set 2 changes\nthe rendering of the \"a\" character and the beta character,\nstylistic set 3 changes the lowercase \"g\", theta, and delta\ncharacters, and stylistic set 4 changes the lowercase \"i\" and\n\"l\" characters.\nThis font also supports character variants (see\nFontFeature.characterVariant).\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.stylisticSet.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.stylisticSet].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Source Code Pro font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn Text(\n'a\u00e1\u00e2 \u03b2 g\u01f5\u011d \u03b8\u0431 Ii\u00ed\u00ee Ll',\nstyle: TextStyle(\nfontFamily: 'Source Code Pro',\nfontFeatures: <FontFeature>[\nFontFeature.stylisticSet(2),\nFontFeature.stylisticSet(3),\nFontFeature.stylisticSet(4),\n],\n),\n);\n}\n}\nThe Piazzolla font supports the ssXX feature for more\nelaborate stylistic effects. Set 1 turns some Latin characters\ninto Roman numerals, set 2 enables some ASCII characters to be\nused to create pretty arrows, and so forth.\nThese stylistic sets do not correspond to character variants.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.stylisticSet.2 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.stylisticSet].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn Text(\n'-> MCMXCVII <-', // 1997\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.stylisticSet(1),\nFontFeature.stylisticSet(2),\n],\n),\n);\n}\n}\nSee also:\nFontFeature.characterVariant, which allows for individual character\nvariants to be selected, as opposed to entire sets.\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#ssxx\nImplementation\nfactory FontFeature.stylisticSet(int value) {\nassert(value >= 1);\nassert(value <= 20);\nreturn FontFeature('ss${value.toString().padLeft(2, \"0\")}');\n}\nFlutter\ndart:ui\nFontFeature\nFontFeature.stylisticSet factory constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.stylisticSet].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Source Code Pro font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return Text(\n      'a\u00e1\u00e2 \u03b2 g\u01f5\u011d \u03b8\u0431 Ii\u00ed\u00ee Ll',\n      style: TextStyle(\n        fontFamily: 'Source Code Pro',\n        fontFeatures: <FontFeature>[\n          FontFeature.stylisticSet(2),\n          FontFeature.stylisticSet(3),\n          FontFeature.stylisticSet(4),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.stylisticSet].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return Text(\n      '-> MCMXCVII <-', // 1997\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.stylisticSet(1),\n          FontFeature.stylisticSet(2),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.subscripts.html",
  "title": "FontFeature.subscripts constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.subscripts constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.subscripts const constructor\nFontFeature.subscripts\nbrightness_4\nbrightness_5\nFontFeature.subscripts constructor\nconst\nFontFeature.subscripts()\nEnable subscripts. (subs)\nThis feature causes some fonts to change some glyphs to their subscripted form.\nIt typically does not affect all glyphs, and so is not appropriate for generally causing\nall text to be subscripted.\nThis may override other features that substitute glyphs.\nThe Piazzolla font supports the subs feature. It causes\ndigits to be smaller and subscripted.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.subscripts.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.subscripts].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Line from x1,y1 to x2,y2',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.subscripts(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#subs\nFontFeature.scientificInferiors, which is similar but intended specifically for\nsubscripts used in scientific contexts.\nFontFeature.superscripts, which is similar but for subscripting.\nImplementation\nconst FontFeature.subscripts() : feature = 'subs', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.subscripts const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.subscripts].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Line from x1,y1 to x2,y2',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.subscripts(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.superscripts.html",
  "title": "FontFeature.superscripts constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.superscripts constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.superscripts const constructor\nFontFeature.superscripts\nbrightness_4\nbrightness_5\nFontFeature.superscripts constructor\nconst\nFontFeature.superscripts()\nEnable superscripts. (sups)\nThis feature causes some fonts to change some glyphs to their\nsuperscripted form. This may be more than just changing their\nposition. For example, digits might change to lining figures\n(see FontFeature.liningFigures) in addition to being raised\nand shrunk.\nIt typically does not affect all glyphs, and so is not\nappropriate for generally causing all text to be superscripted.\nThis may override other features that substitute glyphs.\nThe Sorts Mill Goudy font supports the sups feature. It causes\ndigits to be smaller, superscripted, and changes them to lining\nfigures (so they are all the same height).\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.superscripts.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.superscripts].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Sorts Mill Goudy font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'The isotope 238U decays to 206Pb',\nstyle: TextStyle(\nfontFamily: 'Sorts Mill Goudy',\nfontFeatures: <FontFeature>[\nFontFeature.superscripts(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#sups\nFontFeature.subscripts, which is similar but for subscripting.\nImplementation\nconst FontFeature.superscripts() : feature = 'sups', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.superscripts const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.superscripts].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Sorts Mill Goudy font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'The isotope 238U decays to 206Pb',\n      style: TextStyle(\n        fontFamily: 'Sorts Mill Goudy',\n        fontFeatures: <FontFeature>[\n          FontFeature.superscripts(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.swash.html",
  "title": "FontFeature.swash constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.swash constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.swash const constructor\nFontFeature.swash\nbrightness_4\nbrightness_5\nFontFeature.swash constructor\nconst\nFontFeature.swash([int value = 1]\n)\nEnable swash glyphs. (swsh)\nSome fonts have beautiful flourishes on some characters. These\ncome in many forms, such as exaggerated serifs, long tails, long\nentry strokes, or other forms of decorative extensions to the\nbase character.\nThis feature enables the rendering of these flourishes. Some\nfonts have many swashes per character; the argument, if\nspecified, selects which swash to use (0 disables them\naltogether).\nSome fonts have an absurd number of alternative swashes. For\nexample, Adobe's Poetica famously has 63 different ampersand\nforms available through this feature!\nThe BioRhyme Expanded font supports the swsh feature specifically\nfor the capital \"Q\" and \"R\" glyphs and the ampersand.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.swash.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [FontFeature.FontFeature.swash].\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The BioRhyme Expanded font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Queer & Romantic',\nstyle: TextStyle(\nfontFamily: 'BioRhyme Expanded',\nfontFeatures: <FontFeature>[\nFontFeature.swash(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#swsh\nen.wikipedia.org/wiki/Swash_(typography)\nImplementation\nconst FontFeature.swash([this.value = 1]) : feature = 'swsh', assert(value >= 0);\nFlutter\ndart:ui\nFontFeature\nFontFeature.swash const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [FontFeature.FontFeature.swash].\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The BioRhyme Expanded font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Queer & Romantic',\n      style: TextStyle(\n        fontFamily: 'BioRhyme Expanded',\n        fontFeatures: <FontFeature>[\n          FontFeature.swash(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/dart-ui/FontFeature/FontFeature.tabularFigures.html",
  "title": "FontFeature.tabularFigures constructor - FontFeature - dart:ui library - Dart API",
  "documentation_content": "FontFeature.tabularFigures constructor - FontFeature - dart:ui library - Dart API\nmenu\nFlutter\ndart:ui\nFontFeature\nFontFeature.tabularFigures const constructor\nFontFeature.tabularFigures\nbrightness_4\nbrightness_5\nFontFeature.tabularFigures constructor\nconst\nFontFeature.tabularFigures()\nUse tabular (monospace) figures. (tnum)\nFor fonts that have both proportional (varying width) and tabular figures,\nthis enables the tabular figures. Tabular figures are monospaced (all the\nsame width), so that they align in tables of figures.\nThis is mutually exclusive with FontFeature.proportionalFigures.\nThe default behavior varies from font to font.\nThe Piazzolla font supports the tnum feature. It causes the\ndigits to become uniformly-sized, rather than having variable\nwidths. In this font this is especially noticeable with the\ndigit \"1\"; with tabular figures enabled, the \"1\" digit is more\nwidely spaced.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=dart.dart_ui.FontFeature.tabularFigures.1 mysample\ncontent_copy\nimport 'dart:ui';\nimport 'package:flutter/widgets.dart';\n/// Flutter code sample for [dart]:ui FontFeature.FontFeature.tabularFigures.\nvoid main() => runApp(const ExampleApp());\nclass ExampleApp extends StatelessWidget {\nconst ExampleApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn WidgetsApp(\nbuilder: (BuildContext context, Widget? navigator) =>\nconst ExampleWidget(),\ncolor: const Color(0xffffffff),\n);\n}\n}\nclass ExampleWidget extends StatelessWidget {\nconst ExampleWidget({super.key});\n@override\nWidget build(BuildContext context) {\n// The Piazzolla font can be downloaded from Google Fonts\n// (https://www.google.com/fonts).\nreturn const Text(\n'Call 311-555-2368 now!',\nstyle: TextStyle(\nfontFamily: 'Piazzolla',\nfontFeatures: <FontFeature>[\nFontFeature.tabularFigures(),\n],\n),\n);\n}\n}\nSee also:\ndocs.microsoft.com/en-us/typography/opentype/spec/features_pt#tnum\nImplementation\nconst FontFeature.tabularFigures() : feature = 'tnum', value = 1;\nFlutter\ndart:ui\nFontFeature\nFontFeature.tabularFigures const constructor\nFontFeature class",
  "code_examples": [
   "import 'dart:ui';\n\nimport 'package:flutter/widgets.dart';\n\n/// Flutter code sample for [dart]:ui FontFeature.FontFeature.tabularFigures.\n\nvoid main() => runApp(const ExampleApp());\n\nclass ExampleApp extends StatelessWidget {\n  const ExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return WidgetsApp(\n      builder: (BuildContext context, Widget? navigator) =>\n          const ExampleWidget(),\n      color: const Color(0xffffffff),\n    );\n  }\n}\n\nclass ExampleWidget extends StatelessWidget {\n  const ExampleWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    // The Piazzolla font can be downloaded from Google Fonts\n    // (https://www.google.com/fonts).\n    return const Text(\n      'Call 311-555-2368 now!',\n      style: TextStyle(\n        fontFamily: 'Piazzolla',\n        fontFeatures: <FontFeature>[\n          FontFeature.tabularFigures(),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/foundation/ChangeNotifier-class.html",
  "title": "ChangeNotifier class - foundation library - Dart API",
  "documentation_content": "ChangeNotifier class - foundation library - Dart API\nmenu\nFlutter\nfoundation\nChangeNotifier class\nChangeNotifier\nbrightness_4\nbrightness_5\ndescription\nChangeNotifier class\nmixin\nA class that can be extended or mixed in that provides a change notification\nAPI using VoidCallback for notifications.\nIt is O(1) for adding listeners and O(N) for removing listeners and dispatching\nnotifications (where N is the number of listeners).\nUsing ChangeNotifier subclasses for data models\nA data structure can extend or mix in ChangeNotifier to implement the\nListenable interface and thus become usable with widgets that listen for\nchanges to Listenables, such as ListenableBuilder.\nThe following example implements a simple counter that utilizes a\nListenableBuilder to limit rebuilds to only the Text widget containing\nthe count. The current count is stored in a ChangeNotifier subclass, which\nrebuilds the ListenableBuilder's contents when its value is changed.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=foundation.ChangeNotifier.1 mysample\nIn this case, the ChangeNotifier subclass encapsulates a list, and notifies\nthe clients any time an item is added to the list. This example only supports\nadding items; as an exercise, consider adding buttons to remove items from\nthe list as well.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=foundation.ChangeNotifier.2 mysample\nSee also:\nValueNotifier, which is a ChangeNotifier that wraps a single value.\nImplemented types\nListenable\nImplementers\nCupertinoTabController\nDataTableSource\nDraggableScrollableController\nFocusManager\nFocusNode\nInspectorSelection\nKeepAliveHandle\nMouseTracker\nMultiSelectableSelectionContainerDelegate\nPlatformRouteInformationProvider\nRenderEditablePainter\nRestorableProperty\nRestorationManager\nScrollbarPainter\nScrollController\nSemanticsOwner\nShortcutManager\nShortcutRegistry\nSliverOverlapAbsorberHandle\nSnapshotController\nSnapshotPainter\nTabController\nToggleablePainter\nTwoDimensionalChildDelegate\nValueNotifier\nViewportOffset\nConstructors\nChangeNotifier()\nProperties\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhasListeners\n\u2192 bool\nWhether any listeners are currently registered.\nread-only\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\naddListener(VoidCallback listener)\n\u2192 void\nRegister a closure to be called when the object changes.\noverride\ndispose()\n\u2192 void\nDiscards any resources used by the object. After this is called, the\nobject is not in a usable state and should be discarded (calls to\naddListener will throw after the object is disposed).\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nnotifyListeners()\n\u2192 void\nCall all the registered listeners.\nremoveListener(VoidCallback listener)\n\u2192 void\nRemove a previously registered closure from the list of closures that are\nnotified when the object changes.\noverride\ntoString()\n\u2192 String\nA string representation of this object.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\ndebugAssertNotDisposed(ChangeNotifier notifier)\n\u2192 bool\nUsed by subclasses to assert that the ChangeNotifier has not yet been\ndisposed.\nmaybeDispatchObjectCreation(ChangeNotifier object)\n\u2192 void\nDispatches event of the object creation to MemoryAllocations.instance.\nFlutter\nfoundation\nChangeNotifier class",
  "code_examples": [
   "import 'dart:math' as math;\n\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for a [ChangeNotifier] with a [ListenableBuilder].\n\nvoid main() {\n  runApp(const ListenableBuilderExample());\n}\n\nclass ListModel with ChangeNotifier {\n  final List<int> _values = <int>[];\n  List<int> get values => _values.toList(); // O(N), makes a new copy each time.\n\n  void add(int value) {\n    _values.add(value);\n    notifyListeners();\n  }\n}\n\nclass ListenableBuilderExample extends StatefulWidget {\n  const ListenableBuilderExample({super.key});\n\n  @override\n  State<ListenableBuilderExample> createState() =>\n      _ListenableBuilderExampleState();\n}\n\nclass _ListenableBuilderExampleState extends State<ListenableBuilderExample> {\n  final ListModel _listNotifier = ListModel();\n  final math.Random _random = math.Random(0); // fixed seed for reproducability\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ListenableBuilder Example')),\n        body: ListBody(listNotifier: _listNotifier),\n        floatingActionButton: FloatingActionButton(\n          onPressed: () => _listNotifier.add(_random\n              .nextInt(1 << 31)), // 1 << 31 is the maximum supported value\n          child: const Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n\nclass ListBody extends StatelessWidget {\n  const ListBody({super.key, required this.listNotifier});\n\n  final ListModel listNotifier;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: <Widget>[\n          const Text('Current values:'),\n          Expanded(\n            child: ListenableBuilder(\n              listenable: listNotifier,\n              builder: (BuildContext context, Widget? child) {\n                // We rebuild the ListView each time the list changes,\n                // so that the framework knows to update the rendering.\n                final List<int> values = listNotifier.values; // copy the list\n                return ListView.builder(\n                  itemBuilder: (BuildContext context, int index) => ListTile(\n                    title: Text('${values[index]}'),\n                  ),\n                  itemCount: values.length,\n                );\n              },\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for a [ChangeNotifier] with a [ListenableBuilder].\n\nvoid main() {\n  runApp(const ListenableBuilderExample());\n}\n\nclass CounterModel with ChangeNotifier {\n  int _count = 0;\n  int get count => _count;\n\n  void increment() {\n    _count += 1;\n    notifyListeners();\n  }\n}\n\nclass ListenableBuilderExample extends StatefulWidget {\n  const ListenableBuilderExample({super.key});\n\n  @override\n  State<ListenableBuilderExample> createState() =>\n      _ListenableBuilderExampleState();\n}\n\nclass _ListenableBuilderExampleState extends State<ListenableBuilderExample> {\n  final CounterModel _counter = CounterModel();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ListenableBuilder Example')),\n        body: CounterBody(counterNotifier: _counter),\n        floatingActionButton: FloatingActionButton(\n          onPressed: _counter.increment,\n          child: const Icon(Icons.add),\n        ),\n      ),\n    );\n  }\n}\n\nclass CounterBody extends StatelessWidget {\n  const CounterBody({super.key, required this.counterNotifier});\n\n  final CounterModel counterNotifier;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          const Text('Current counter value:'),\n          // Thanks to the ListenableBuilder, only the widget displaying the\n          // current count is rebuilt when counterValueNotifier notifies its\n          // listeners. The Text widget above and CounterBody itself aren't\n          // rebuilt.\n          ListenableBuilder(\n            listenable: counterNotifier,\n            builder: (BuildContext context, Widget? child) {\n              return Text('${counterNotifier.count}');\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/gestures/BaseTapAndDragGestureRecognizer-class.html",
  "title": "BaseTapAndDragGestureRecognizer class - gestures library - Dart API",
  "documentation_content": "BaseTapAndDragGestureRecognizer class - gestures library - Dart API\nmenu\nFlutter\ngestures\nBaseTapAndDragGestureRecognizer class\nBaseTapAndDragGestureRecognizer\nbrightness_4\nbrightness_5\ndescription\nBaseTapAndDragGestureRecognizer class\nsealed\nA base class for gesture recognizers that recognize taps and movements.\nTakes on the responsibilities of TapGestureRecognizer and\nDragGestureRecognizer in one GestureRecognizer.\nGesture arena behavior\nBaseTapAndDragGestureRecognizer competes on the pointer events of\nkPrimaryButton only when it has at least one non-null onTap*\nor onDrag* callback.\nIt will declare defeat if it determines that a gesture is not a\ntap (e.g. if the pointer is dragged too far while it's contacting the\nscreen) or a drag (e.g. if the pointer was not dragged far enough to\nbe considered a drag.\nThis recognizer will not immediately declare victory for every tap that it\nrecognizes, but it declares victory for every drag.\nThe recognizer will declare victory when all other recognizer's in\nthe arena have lost, if the timer of kPressTimeout elapses and a tap\nseries greater than 1 is being tracked, or until the pointer has moved\na sufficient global distance from the origin to be considered a drag.\nIf this recognizer loses the arena (either by declaring defeat or by\nanother recognizer declaring victory) while the pointer is contacting the\nscreen, it will fire onCancel instead of onTapUp or onDragEnd.\nWhen competing with TapGestureRecognizer and DragGestureRecognizer\nSimilar to TapGestureRecognizer and DragGestureRecognizer,\nBaseTapAndDragGestureRecognizer will not aggressively declare victory when it detects\na tap, so when it is competing with those gesture recognizers and others it has a chance\nof losing.\nWhen competing against TapGestureRecognizer, if the pointer does not move past the tap\ntolerance, then the recognizer that entered the arena first will win. In this case the\ngesture detected is a tap. If the pointer does travel past the tap tolerance then this\nrecognizer will be declared winner by default. The gesture detected in this case is a drag.\nWhen competing against DragGestureRecognizer, if the pointer does not move a sufficient\nglobal distance to be considered a drag, the recognizers will tie in the arena. If the\npointer does travel enough distance then the recognizer that entered the arena\nfirst will win. The gesture detected in this case is a drag.\nThis example shows how to use the TapAndPanGestureRecognizer along with a\nRawGestureDetector to scale a Widget.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=gestures.BaseTapAndDragGestureRecognizer.1 mysample\nThis example shows how to hook up TapAndPanGestureRecognizers' to nested\nRawGestureDetectors'. It assumes that the code is being used inside a State\nobject with a _last field that is then displayed as the child of the gesture detector.\nIn this example, if the pointer has moved past the drag threshold, then the\nthe first TapAndPanGestureRecognizer instance to receive the PointerEvent\nwill win the arena because the recognizer will immediately declare victory.\nThe first one to receive the event in the example will depend on where on both\ncontainers the pointer lands first. If your pointer begins in the overlapping\narea of both containers, then the inner-most widget will receive the event first.\nIf your pointer begins in the yellow container then it will be the first to\nreceive the event.\nIf the pointer has not moved past the drag threshold, then the first recognizer\nto enter the arena will win (i.e. they both tie and the gesture arena will call\nGestureArenaManager.sweep so the first member of the arena will win).\nlink\ncontent_copy\nRawGestureDetector(\ngestures: <Type, GestureRecognizerFactory>{\nTapAndPanGestureRecognizer: GestureRecognizerFactoryWithHandlers<TapAndPanGestureRecognizer>(\n() => TapAndPanGestureRecognizer(),\n(TapAndPanGestureRecognizer instance) {\ninstance\n..onTapDown = (TapDragDownDetails details) { setState(() { _last = 'down_a'; }); }\n..onDragStart = (TapDragStartDetails details) { setState(() { _last = 'drag_start_a'; }); }\n..onDragUpdate = (TapDragUpdateDetails details) { setState(() { _last = 'drag_update_a'; }); }\n..onDragEnd = (TapDragEndDetails details) { setState(() { _last = 'drag_end_a'; }); }\n..onTapUp = (TapDragUpDetails details) { setState(() { _last = 'up_a'; }); }\n..onCancel = () { setState(() { _last = 'cancel_a'; }); };\n},\n),\n},\nchild: Container(\nwidth: 300.0,\nheight: 300.0,\ncolor: Colors.yellow,\nalignment: Alignment.center,\nchild: RawGestureDetector(\ngestures: <Type, GestureRecognizerFactory>{\nTapAndPanGestureRecognizer: GestureRecognizerFactoryWithHandlers<TapAndPanGestureRecognizer>(\n() => TapAndPanGestureRecognizer(),\n(TapAndPanGestureRecognizer instance) {\ninstance\n..onTapDown = (TapDragDownDetails details) { setState(() { _last = 'down_b'; }); }\n..onDragStart = (TapDragStartDetails details) { setState(() { _last = 'drag_start_b'; }); }\n..onDragUpdate = (TapDragUpdateDetails details) { setState(() { _last = 'drag_update_b'; }); }\n..onDragEnd = (TapDragEndDetails details) { setState(() { _last = 'drag_end_b'; }); }\n..onTapUp = (TapDragUpDetails details) { setState(() { _last = 'up_b'; }); }\n..onCancel = () { setState(() { _last = 'cancel_b'; }); };\n},\n),\n},\nchild: Container(\nwidth: 150.0,\nheight: 150.0,\ncolor: Colors.blue,\nchild: Text(_last),\n),\n),\n),\n)\nInheritance\nObject\nGestureArenaMember\nGestureRecognizer\nOneSequenceGestureRecognizer\nBaseTapAndDragGestureRecognizer\nImplementers\nTapAndDragGestureRecognizer\nTapAndHorizontalDragGestureRecognizer\nTapAndPanGestureRecognizer\nConstructors\nBaseTapAndDragGestureRecognizer({Object? debugOwner, Set<PointerDeviceKind>? supportedDevices, AllowedButtonsFilter? allowedButtonsFilter})\nCreates a tap and drag gesture recognizer.\nProperties\nconsecutiveTapCount\n\u2192 int\nread-onlyinherited\ncurrentDown\n\u2192 PointerDownEvent?\nread-onlyinherited\ncurrentUp\n\u2192 PointerUpEvent?\nread-onlyinherited\ndebugDescription\n\u2192 String\nReturns a very short pretty description of the gesture that the\nrecognizer looks for, like 'tap' or 'horizontal drag'.\nread-onlyoverride\ndebugOwner\n\u2192 Object?\nThe recognizer's owner.\nfinalinherited\ndragStartBehavior\n\u2194 DragStartBehavior\nConfigure the behavior of offsets passed to onDragStart.\nread / write\ndragUpdateThrottleFrequency\n\u2194 Duration?\nThe frequency at which the onDragUpdate callback is called.\nread / write\ngestureSettings\n\u2194 DeviceGestureSettings?\nOptional device specific configuration for device gestures that will\ntake precedence over framework defaults.\nread / writeinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nmaxConsecutiveTap\n\u2194 int?\nAn upper bound for the amount of taps that can belong to one tap series.\nread / write\nonCancel\n\u2194 GestureCancelCallback?\nThe pointer that previously triggered onTapDown did not complete.\nread / write\nonDragEnd\n\u2194 GestureTapDragEndCallback?\nA pointer that was previously in contact with the screen with a primary\nbutton and moving is no longer in contact with the screen and was moving\nat a specific velocity when it stopped contacting the screen.\nread / write\nonDragStart\n\u2194 GestureTapDragStartCallback?\nA pointer has contacted the screen with a primary button and has begun to\nmove.\nread / write\nonDragUpdate\n\u2194 GestureTapDragUpdateCallback?\nA pointer that is in contact with the screen with a primary button and\nmoving has moved again.\nread / write\nonTapDown\n\u2194 GestureTapDragDownCallback?\nA pointer has contacted the screen at a particular location with a primary\nbutton, which might be the start of a tap.\nread / write\nonTapTrackReset\n\u2194 VoidCallback?\nCallback used to indicate that a tap tracking has been reset which\nhappens on the next PointerDownEvent after the timer between two taps\nelapses, the recognizer loses the arena, the gesture is cancelled or\nthe recognizer is disposed of.\nread / writeinherited\nonTapTrackStart\n\u2194 VoidCallback?\nCallback used to indicate that a tap tracking has started upon\na PointerDownEvent.\nread / writeinherited\nonTapUp\n\u2194 GestureTapDragUpCallback?\nA pointer has stopped contacting the screen at a particular location,\nwhich is recognized as a tap of a primary button.\nread / write\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsupportedDevices\n\u2194 Set<PointerDeviceKind>?\nThe kind of devices that are allowed to be recognized as provided by\nsupportedDevices in the constructor, or the currently deprecated kind.\nThese cannot both be set. If both are null, events from all device kinds will be\ntracked and recognized.\nread / writeinherited\nteam\n\u2194 GestureArenaTeam?\nThe team that this recognizer belongs to, if any.\nread / writeinherited\nMethods\nacceptGesture(int pointer)\n\u2192 void\nCalled when this member wins the arena for the given pointer id.\noverride\naddAllowedPointer(PointerDownEvent event)\n\u2192 void\nRegisters a new pointer that's been checked to be allowed by this gesture\nrecognizer.\noverride\naddAllowedPointerPanZoom(PointerPanZoomStartEvent event)\n\u2192 void\nRegisters a new pointer pan/zoom that's been checked to be allowed by this\ngesture recognizer.\ninherited\naddPointer(PointerDownEvent event)\n\u2192 void\nRegisters a new pointer that might be relevant to this gesture\ndetector.\ninherited\naddPointerPanZoom(PointerPanZoomStartEvent event)\n\u2192 void\nRegisters a new pointer pan/zoom that might be relevant to this gesture\ndetector.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\ndidStopTrackingLastPointer(int pointer)\n\u2192 void\nCalled when the number of pointers this recognizer is tracking changes from one to zero.\noverride\ndispose()\n\u2192 void\nReleases any resources used by the object.\noverride\ngetKindForPointer(int pointer)\n\u2192 PointerDeviceKind\nFor a given pointer ID, returns the device kind associated with it.\ninherited\nhandleEvent(PointerEvent event)\n\u2192 void\nCalled when a pointer event is routed to this recognizer.\noverride\nhandleNonAllowedPointer(PointerDownEvent event)\n\u2192 void\nHandles a pointer being added that's not allowed by this recognizer.\noverride\nhandleNonAllowedPointerPanZoom(PointerPanZoomStartEvent event)\n\u2192 void\nHandles a pointer pan/zoom being added that's not allowed by this recognizer.\ninherited\ninvokeCallback<T>(String name, RecognizerCallback<T> callback, {String debugReport()?})\n\u2192 T?\nInvoke a callback provided by the application, catching and logging any\nexceptions.\ninherited\nisPointerAllowed(PointerEvent event)\n\u2192 bool\nChecks whether or not a pointer is allowed to be tracked by this recognizer.\noverride\nisPointerPanZoomAllowed(PointerPanZoomStartEvent event)\n\u2192 bool\nChecks whether or not a pointer pan/zoom is allowed to be tracked by this recognizer.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nrejectGesture(int pointer)\n\u2192 void\nCalled when this member loses the arena for the given pointer id.\noverride\nresolve(GestureDisposition disposition)\n\u2192 void\nResolves this recognizer's participation in each gesture arena with the\ngiven disposition.\ninherited\nresolvePointer(int pointer, GestureDisposition disposition)\n\u2192 void\nResolves this recognizer's participation in the given gesture arena with\nthe given disposition.\ninherited\nstartTrackingPointer(int pointer, [Matrix4? transform])\n\u2192 void\nCauses events related to the given pointer ID to be routed to this recognizer.\ninherited\nstopTrackingIfPointerNoLongerDown(PointerEvent event)\n\u2192 void\nStops tracking the pointer associated with the given event if the event is\na PointerUpEvent or a PointerCancelEvent event.\ninherited\nstopTrackingPointer(int pointer)\n\u2192 void\nStops events related to the given pointer ID from being routed to this recognizer.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA brief description of this object, usually just the runtimeType and the\nhashCode.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ngestures\nBaseTapAndDragGestureRecognizer class",
  "code_examples": [
   "import 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [TapAndPanGestureRecognizer].\n\nvoid main() {\n  runApp(const TapAndDragToZoomApp());\n}\n\nclass TapAndDragToZoomApp extends StatelessWidget {\n  const TapAndDragToZoomApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: Scaffold(\n        body: Center(\n          child: TapAndDragToZoomWidget(\n            child: MyBoxWidget(),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass MyBoxWidget extends StatelessWidget {\n  const MyBoxWidget({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      color: Colors.blueAccent,\n      height: 100.0,\n      width: 100.0,\n    );\n  }\n}\n\n// This widget will scale its child up when it detects a drag up, after a\n// double tap/click. It will scale the widget down when it detects a drag down,\n// after a double tap. Dragging down and then up after a double tap/click will\n// zoom the child in/out. The scale of the child will be reset when the drag ends.\nclass TapAndDragToZoomWidget extends StatefulWidget {\n  const TapAndDragToZoomWidget({super.key, required this.child});\n\n  final Widget child;\n\n  @override\n  State<TapAndDragToZoomWidget> createState() => _TapAndDragToZoomWidgetState();\n}\n\nclass _TapAndDragToZoomWidgetState extends State<TapAndDragToZoomWidget> {\n  final double scaleMultiplier = -0.0001;\n  double _currentScale = 1.0;\n  Offset? _previousDragPosition;\n\n  static double _keepScaleWithinBounds(double scale) {\n    const double minScale = 0.1;\n    const double maxScale = 30;\n    if (scale <= 0) {\n      return minScale;\n    }\n    if (scale >= 30) {\n      return maxScale;\n    }\n    return scale;\n  }\n\n  void _zoomLogic(Offset currentDragPosition) {\n    final double dx =\n        (_previousDragPosition!.dx - currentDragPosition.dx).abs();\n    final double dy =\n        (_previousDragPosition!.dy - currentDragPosition.dy).abs();\n\n    if (dx > dy) {\n      // Ignore horizontal drags.\n      _previousDragPosition = currentDragPosition;\n      return;\n    }\n\n    if (currentDragPosition.dy < _previousDragPosition!.dy) {\n      // Zoom out on drag up.\n      setState(() {\n        _currentScale += currentDragPosition.dy * scaleMultiplier;\n        _currentScale = _keepScaleWithinBounds(_currentScale);\n      });\n    } else {\n      // Zoom in on drag down.\n      setState(() {\n        _currentScale -= currentDragPosition.dy * scaleMultiplier;\n        _currentScale = _keepScaleWithinBounds(_currentScale);\n      });\n    }\n    _previousDragPosition = currentDragPosition;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return RawGestureDetector(\n      gestures: <Type, GestureRecognizerFactory>{\n        TapAndPanGestureRecognizer:\n            GestureRecognizerFactoryWithHandlers<TapAndPanGestureRecognizer>(\n                () => TapAndPanGestureRecognizer(),\n                (TapAndPanGestureRecognizer instance) {\n          instance\n            ..onTapDown = (TapDragDownDetails details) {\n              _previousDragPosition = details.globalPosition;\n            }\n            ..onDragStart = (TapDragStartDetails details) {\n              if (details.consecutiveTapCount == 2) {\n                _zoomLogic(details.globalPosition);\n              }\n            }\n            ..onDragUpdate = (TapDragUpdateDetails details) {\n              if (details.consecutiveTapCount == 2) {\n                _zoomLogic(details.globalPosition);\n              }\n            }\n            ..onDragEnd = (TapDragEndDetails details) {\n              if (details.consecutiveTapCount == 2) {\n                setState(() {\n                  _currentScale = 1.0;\n                });\n                _previousDragPosition = null;\n              }\n            };\n        }),\n      },\n      child: Transform.scale(\n        scale: _currentScale,\n        child: widget.child,\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/gestures/PointerSignalResolver-class.html",
  "title": "PointerSignalResolver class - gestures library - Dart API",
  "documentation_content": "PointerSignalResolver class - gestures library - Dart API\nmenu\nFlutter\ngestures\nPointerSignalResolver class\nPointerSignalResolver\nbrightness_4\nbrightness_5\ndescription\nPointerSignalResolver class\nMediates disputes over which listener should handle pointer signal events\nwhen multiple listeners wish to handle those events.\nPointer signals (such as PointerScrollEvent) are immediate, so unlike\nevents that participate in the gesture arena, pointer signals always\nresolve at the end of event dispatch. Yet if objects interested in handling\nthese signal events were to handle them directly, it would cause issues\nsuch as multiple Scrollable widgets in the widget hierarchy responding\nto the same mouse wheel event. Using this class, these events will only\nbe dispatched to the first registered handler, which will in turn\ncorrespond to the widget that's deepest in the widget hierarchy.\nTo use this class, objects should register their event handler like so:\nvoid handleSignalEvent(PointerSignalEvent event) {\nGestureBinding.instance.pointerSignalResolver.register(event, (PointerSignalEvent event) {\n// handle the event...\n});\n}\nHere is an example that demonstrates the effect of not using the resolver\nversus using it.\nWhen this example is set to not use the resolver, then triggering the\nmouse wheel over the outer box will cause only the outer box to change\ncolor, but triggering the mouse wheel over the inner box will cause both\nthe outer and the inner boxes to change color (because they're both\nreceiving the event).\nWhen this example is set to use the resolver, then only the box located\ndirectly under the cursor will change color when the mouse wheel is\ntriggered.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=gestures.PointerSignalResolver.1 mysample\nConstructors\nPointerSignalResolver()\nProperties\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nregister(PointerSignalEvent event, PointerSignalResolvedCallback callback)\n\u2192 void\nRegisters interest in handling event.\nresolve(PointerSignalEvent event)\n\u2192 void\nResolves the event, calling the first registered callback if there was\none.\ntoString()\n\u2192 String\nA string representation of this object.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\ngestures\nPointerSignalResolver class",
  "code_examples": [
   "import 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [PointerSignalResolver].\n\nvoid main() => runApp(const PointerSignalResolverExampleApp());\n\nclass PointerSignalResolverExampleApp extends StatelessWidget {\n  const PointerSignalResolverExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: PointerSignalResolverExample(),\n    );\n  }\n}\n\nclass ColorChanger extends StatefulWidget {\n  const ColorChanger({\n    super.key,\n    required this.initialColor,\n    required this.useResolver,\n    this.child,\n  });\n\n  final HSVColor initialColor;\n  final bool useResolver;\n  final Widget? child;\n\n  @override\n  State<ColorChanger> createState() => _ColorChangerState();\n}\n\nclass _ColorChangerState extends State<ColorChanger> {\n  late HSVColor color;\n\n  void rotateColor() {\n    setState(() {\n      color = color.withHue((color.hue + 3) % 360.0);\n    });\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    color = widget.initialColor;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return DecoratedBox(\n      decoration: BoxDecoration(\n        border: const Border.fromBorderSide(BorderSide()),\n        color: color.toColor(),\n      ),\n      child: Listener(\n        onPointerSignal: (PointerSignalEvent event) {\n          if (widget.useResolver) {\n            GestureBinding.instance.pointerSignalResolver.register(event,\n                (PointerSignalEvent event) {\n              rotateColor();\n            });\n          } else {\n            rotateColor();\n          }\n        },\n        child: Stack(\n          fit: StackFit.expand,\n          children: <Widget>[\n            const AbsorbPointer(),\n            if (widget.child != null) widget.child!,\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass PointerSignalResolverExample extends StatefulWidget {\n  const PointerSignalResolverExample({super.key});\n\n  @override\n  State<PointerSignalResolverExample> createState() =>\n      _PointerSignalResolverExampleState();\n}\n\nclass _PointerSignalResolverExampleState\n    extends State<PointerSignalResolverExample> {\n  bool useResolver = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: Stack(\n        fit: StackFit.expand,\n        children: <Widget>[\n          ColorChanger(\n            initialColor: const HSVColor.fromAHSV(0.2, 120.0, 1, 1),\n            useResolver: useResolver,\n            child: FractionallySizedBox(\n              widthFactor: 0.5,\n              heightFactor: 0.5,\n              child: ColorChanger(\n                initialColor: const HSVColor.fromAHSV(1, 60.0, 1, 1),\n                useResolver: useResolver,\n              ),\n            ),\n          ),\n          Align(\n            alignment: Alignment.topLeft,\n            child: Row(\n              children: <Widget>[\n                Switch(\n                  value: useResolver,\n                  onChanged: (bool value) {\n                    setState(() {\n                      useResolver = value;\n                    });\n                  },\n                ),\n                const Text(\n                  'Use the PointerSignalResolver?',\n                  style: TextStyle(fontWeight: FontWeight.bold),\n                ),\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/AboutListTile-class.html",
  "title": "AboutListTile class - material library - Dart API",
  "documentation_content": "AboutListTile class - material library - Dart API\nmenu\nFlutter\nmaterial\nAboutListTile class\nAboutListTile\nbrightness_4\nbrightness_5\ndescription\nAboutListTile class\nA ListTile that shows an about box.\nThis widget is often added to an app's Drawer. When tapped it shows\nan about box dialog with showAboutDialog.\nThe about box will include a button that shows licenses for software used by\nthe application. The licenses shown are those returned by the\nLicenseRegistry API, which can be used to add more licenses to the list.\nIf your application does not have a Drawer, you should provide an\naffordance to call showAboutDialog or (at least) showLicensePage.\nThis sample shows two ways to open AboutDialog. The first one\nuses an AboutListTile, and the second uses the showAboutDialog function.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AboutListTile.1 mysample\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nAboutListTile\nConstructors\nAboutListTile({Key? key, Widget? icon, Widget? child, String? applicationName, String? applicationVersion, Widget? applicationIcon, String? applicationLegalese, List<Widget>? aboutBoxChildren, bool? dense})\nCreates a list tile for showing an about box.\nconst\nProperties\naboutBoxChildren\n\u2192 List<Widget>?\nWidgets to add to the AboutDialog after the name, version, and legalese.\nfinal\napplicationIcon\n\u2192 Widget?\nThe icon to show next to the application name in the AboutDialog.\nfinal\napplicationLegalese\n\u2192 String?\nA string to show in small print in the AboutDialog.\nfinal\napplicationName\n\u2192 String?\nThe name of the application.\nfinal\napplicationVersion\n\u2192 String?\nThe version of this build of the application.\nfinal\nchild\n\u2192 Widget?\nThe label to show on this drawer item.\nfinal\ndense\n\u2192 bool?\nWhether this list tile is part of a vertically dense list.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nicon\n\u2192 Widget?\nThe icon to show for this drawer item.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nAboutListTile class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AboutListTile].\n\nvoid main() => runApp(const AboutListTileExampleApp());\n\nclass AboutListTileExampleApp extends StatelessWidget {\n  const AboutListTileExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: AboutListTileExample(),\n    );\n  }\n}\n\nclass AboutListTileExample extends StatelessWidget {\n  const AboutListTileExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    final TextStyle textStyle = theme.textTheme.bodyMedium!;\n    final List<Widget> aboutBoxChildren = <Widget>[\n      const SizedBox(height: 24),\n      RichText(\n        text: TextSpan(\n          children: <TextSpan>[\n            TextSpan(\n                style: textStyle,\n                text: \"Flutter is Google's UI toolkit for building beautiful, \"\n                    'natively compiled applications for mobile, web, and desktop '\n                    'from a single codebase. Learn more about Flutter at '),\n            TextSpan(\n                style: textStyle.copyWith(color: theme.colorScheme.primary),\n                text: 'https://flutter.dev'),\n            TextSpan(style: textStyle, text: '.'),\n          ],\n        ),\n      ),\n    ];\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Show About Example'),\n      ),\n      drawer: Drawer(\n        child: SingleChildScrollView(\n          child: SafeArea(\n            child: AboutListTile(\n              icon: const Icon(Icons.info),\n              applicationIcon: const FlutterLogo(),\n              applicationName: 'Show About Example',\n              applicationVersion: 'August 2019',\n              applicationLegalese: '\\u{a9} 2014 The Flutter Authors',\n              aboutBoxChildren: aboutBoxChildren,\n            ),\n          ),\n        ),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: const Text('Show About Example'),\n          onPressed: () {\n            showAboutDialog(\n              context: context,\n              applicationIcon: const FlutterLogo(),\n              applicationName: 'Show About Example',\n              applicationVersion: 'August 2019',\n              applicationLegalese: '\\u{a9} 2014 The Flutter Authors',\n              children: aboutBoxChildren,\n            );\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ActionChip-class.html",
  "title": "ActionChip class - material library - Dart API",
  "documentation_content": "ActionChip class - material library - Dart API\nmenu\nFlutter\nmaterial\nActionChip class\nActionChip\nbrightness_4\nbrightness_5\ndescription\nActionChip class\nA Material Design action chip.\nAction chips are a set of options which trigger an action related to primary\ncontent. Action chips should appear dynamically and contextually in a UI.\nAction chips can be tapped to trigger an action or show progress and\nconfirmation. For Material 3, a disabled state is supported for Action\nchips and is specified with onPressed being null. For previous versions\nof Material Design, it is recommended to remove the Action chip from\nthe interface entirely rather than display a disabled chip.\nAction chips are displayed after primary content, such as below a card or\npersistently at the bottom of a screen.\nThe material button widgets, ElevatedButton, TextButton, and\nOutlinedButton, are an alternative to action chips, which should appear\nstatically and consistently in a UI.\nRequires one of its ancestors to be a Material widget.\nThis example shows how to create an ActionChip with a leading icon.\nThe icon is updated when the ActionChip is pressed.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ActionChip.1 mysample\nMaterial Design 3\nActionChip can be used for both the Assist and Suggestion chips from\nMaterial Design 3. If ThemeData.useMaterial3 is true, then ActionChip\nwill be styled to match the Material Design 3 Assist and Suggestion chips.\nCreating an Assist chip\nAssist chips are used to provide a quick way to perform an action.\nTo create an Action chip, set the icon property to the icon\nthat represents the action and set the label to the name of the action.\nCreating a Suggestion chip\nSuggestion chips usually display generated suggestions for the user,\nlike a suggested response to a message.\nTo create a Suggestion chip, set the label to the suggestion\nand don't set the icon property.\nSee also:\nChip, a chip that displays information and can be deleted.\nInputChip, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.\nChoiceChip, allows a single selection from a set of options. Choice\nchips contain related descriptive text or categories.\nCircleAvatar, which shows images or initials of people.\nWrap, A widget that displays its children in multiple horizontal or\nvertical runs.\nmaterial.io/design/components/chips.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nActionChip\nImplemented types\nChipAttributes\nTappableChipAttributes\nDisabledChipAttributes\nConstructors\nActionChip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, VoidCallback? onPressed, double? pressElevation, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialStateProperty<Color?>? color, Color? backgroundColor, Color? disabledColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme})\nCreate a chip that acts like a button.\nconst\nActionChip.elevated({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, VoidCallback? onPressed, double? pressElevation, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialStateProperty<Color?>? color, Color? backgroundColor, Color? disabledColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme})\nCreate an elevated chip that acts like a button.\nconst\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\navatar\n\u2192 Widget?\nA widget to display prior to the chip's label.\nfinal\nbackgroundColor\n\u2192 Color?\nColor to be used for the unselected, enabled chip's background.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncolor\n\u2192 MaterialStateProperty<Color?>?\nThe color that fills the chip, in all MaterialStates.\nfinal\ndisabledColor\n\u2192 Color?\nThe color used for the chip's background to indicate that it is not\nenabled.\nfinal\nelevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\niconTheme\n\u2192 IconThemeData?\nTheme used for all icons in the chip.\nfinal\nisEnabled\n\u2192 bool\nWhether or not this chip is enabled for input.\nread-onlyoverride\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nlabel\n\u2192 Widget\nThe primary content of the chip.\nfinal\nlabelPadding\n\u2192 EdgeInsetsGeometry?\nThe padding around the label widget.\nfinal\nlabelStyle\n\u2192 TextStyle?\nThe style to be applied to the chip's label.\nfinal\nmaterialTapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the tap target.\nfinal\nonPressed\n\u2192 VoidCallback?\nCalled when the user taps the chip.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe padding between the contents of the chip and the outside shape.\nfinal\npressElevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent during the\npress motion.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshadowColor\n\u2192 Color?\nColor of the chip's shadow when the elevation is greater than 0.\nfinal\nshape\n\u2192 OutlinedBorder?\nThe OutlinedBorder to draw around the chip.\nfinal\nside\n\u2192 BorderSide?\nThe color and weight of the chip's outline.\nfinal\nsurfaceTintColor\n\u2192 Color?\nColor of the chip's surface tint overlay when its elevation is\ngreater than 0.\nfinal\ntooltip\n\u2192 String?\nTooltip string to be used for the body area (where the label and avatar\nare) of the chip.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the chip's layout will be.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nActionChip class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\nvoid main() => runApp(const ChipApp());\n\nclass ChipApp extends StatelessWidget {\n  const ChipApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: const ActionChipExample(),\n    );\n  }\n}\n\nclass ActionChipExample extends StatefulWidget {\n  const ActionChipExample({super.key});\n\n  @override\n  State<ActionChipExample> createState() => _ActionChipExampleState();\n}\n\nclass _ActionChipExampleState extends State<ActionChipExample> {\n  bool favorite = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('ActionChip Sample'),\n      ),\n      body: Center(\n        child: ActionChip(\n          avatar: Icon(favorite ? Icons.favorite : Icons.favorite_border),\n          label: const Text('Save to favorites'),\n          onPressed: () {\n            setState(() {\n              favorite = !favorite;\n            });\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ActionIconTheme-class.html",
  "title": "ActionIconTheme class - material library - Dart API",
  "documentation_content": "ActionIconTheme class - material library - Dart API\nmenu\nFlutter\nmaterial\nActionIconTheme class\nActionIconTheme\nbrightness_4\nbrightness_5\ndescription\nActionIconTheme class\nAn inherited widget that overrides the default icon of BackButtonIcon,\nCloseButtonIcon, DrawerButtonIcon, and EndDrawerButtonIcon in this\nwidget's subtree.\nThis example shows how to define custom builders for drawer and back\nbuttons.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ActionIconTheme.1 mysample\nInheritance\nObject\nDiagnosticableTree\nWidget\nProxyWidget\nInheritedWidget\nInheritedTheme\nActionIconTheme\nConstructors\nActionIconTheme({Key? key, required ActionIconThemeData data, required Widget child})\nCreates a theme that overrides the default icon of BackButtonIcon,\nCloseButtonIcon, DrawerButtonIcon, and EndDrawerButtonIcon in this\nwidget's subtree.\nconst\nProperties\nchild\n\u2192 Widget\nThe widget below this widget in the tree.\nfinalinherited\ndata\n\u2192 ActionIconThemeData\nSpecifies the default icon overrides for descendant BackButtonIcon,\nCloseButtonIcon, DrawerButtonIcon, and EndDrawerButtonIcon widgets.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateElement()\n\u2192 InheritedElement\nInflates this configuration to a concrete instance.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nupdateShouldNotify(covariant ActionIconTheme oldWidget)\n\u2192 bool\nWhether the framework should notify widgets that inherit from this widget.\noverride\nwrap(BuildContext context, Widget child)\n\u2192 Widget\nReturn a copy of this inherited theme with the specified child.\noverride\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\nof(BuildContext context)\n\u2192 ActionIconThemeData?\nThe closest instance of this class that encloses the given context.\nFlutter\nmaterial\nActionIconTheme class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ActionIconTheme].\n\nvoid main() {\n  runApp(const ActionIconThemeExampleApp());\n}\n\nclass _CustomEndDrawerIcon extends StatelessWidget {\n  const _CustomEndDrawerIcon();\n\n  @override\n  Widget build(BuildContext context) {\n    final MaterialLocalizations localization =\n        MaterialLocalizations.of(context);\n    return Icon(\n      Icons.more_horiz,\n      semanticLabel: localization.openAppDrawerTooltip,\n    );\n  }\n}\n\nclass _CustomDrawerIcon extends StatelessWidget {\n  const _CustomDrawerIcon();\n\n  @override\n  Widget build(BuildContext context) {\n    final MaterialLocalizations localization =\n        MaterialLocalizations.of(context);\n    return Icon(\n      Icons.segment,\n      semanticLabel: localization.openAppDrawerTooltip,\n    );\n  }\n}\n\nclass ActionIconThemeExampleApp extends StatelessWidget {\n  const ActionIconThemeExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(\n        useMaterial3: true,\n        actionIconTheme: ActionIconThemeData(\n          backButtonIconBuilder: (BuildContext context) {\n            return const Icon(Icons.arrow_back_ios_new_rounded);\n          },\n          drawerButtonIconBuilder: (BuildContext context) {\n            return const _CustomDrawerIcon();\n          },\n          endDrawerButtonIconBuilder: (BuildContext context) {\n            return const _CustomEndDrawerIcon();\n          },\n        ),\n      ),\n      home: const MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\nclass MyHomePage extends StatelessWidget {\n  const MyHomePage({super.key, required this.title});\n\n  final String title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(title),\n      ),\n      drawer: Drawer(\n        child: Column(\n          children: <Widget>[\n            TextButton(child: const Text('Drawer Item'), onPressed: () {}),\n          ],\n        ),\n      ),\n      body: const Center(\n        child: NextPageButton(),\n      ),\n    );\n  }\n}\n\nclass NextPageButton extends StatelessWidget {\n  const NextPageButton({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return ElevatedButton.icon(\n      onPressed: () {\n        Navigator.of(context).push(\n          MaterialPageRoute<MySecondPage>(builder: (BuildContext context) {\n            return const MySecondPage();\n          }),\n        );\n      },\n      icon: const Icon(Icons.arrow_forward),\n      label: const Text('Next page'),\n    );\n  }\n}\n\nclass MySecondPage extends StatelessWidget {\n  const MySecondPage({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Second page'),\n      ),\n      endDrawer: const Drawer(),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/AdaptiveTextSelectionToolbar/getAdaptiveButtons.html",
  "title": "getAdaptiveButtons method - AdaptiveTextSelectionToolbar class - material library - Dart API",
  "documentation_content": "getAdaptiveButtons method - AdaptiveTextSelectionToolbar class - material library - Dart API\nmenu\nFlutter\nmaterial\nAdaptiveTextSelectionToolbar\ngetAdaptiveButtons static method\ngetAdaptiveButtons\nbrightness_4\nbrightness_5\ndescription\ngetAdaptiveButtons static method\nIterable<Widget>\ngetAdaptiveButtons(BuildContext context,\nList<ContextMenuButtonItem> buttonItems\n)\nReturns a List of Widgets generated by turning buttonItems into the\ndefault context menu buttons for the current platform.\nThis is useful when building a text selection toolbar with the default\nbutton appearance for the given platform, but where the toolbar and/or the\nbutton actions and labels may be custom.\nThis sample demonstrates how to use getAdaptiveButtons to generate\ndefault button widgets in a custom toolbar.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AdaptiveTextSelectionToolbar.getAdaptiveButtons.1 mysample\nSee also:\nCupertinoAdaptiveTextSelectionToolbar.getAdaptiveButtons, which is the\nCupertino equivalent of this class and builds only the Cupertino\nbuttons.\nImplementation\nstatic Iterable<Widget> getAdaptiveButtons(BuildContext context, List<ContextMenuButtonItem> buttonItems) {\nswitch (Theme.of(context).platform) {\ncase TargetPlatform.iOS:\nreturn buttonItems.map((ContextMenuButtonItem buttonItem) {\nreturn CupertinoTextSelectionToolbarButton.buttonItem(\nbuttonItem: buttonItem,\n);\n});\ncase TargetPlatform.fuchsia:\ncase TargetPlatform.android:\nfinal List<Widget> buttons = <Widget>[];\nfor (int i = 0; i < buttonItems.length; i++) {\nfinal ContextMenuButtonItem buttonItem = buttonItems[i];\nbuttons.add(TextSelectionToolbarTextButton(\npadding: TextSelectionToolbarTextButton.getPadding(i, buttonItems.length),\nonPressed: buttonItem.onPressed,\nchild: Text(getButtonLabel(context, buttonItem)),\n));\n}\nreturn buttons;\ncase TargetPlatform.linux:\ncase TargetPlatform.windows:\nreturn buttonItems.map((ContextMenuButtonItem buttonItem) {\nreturn DesktopTextSelectionToolbarButton.text(\ncontext: context,\nonPressed: buttonItem.onPressed,\ntext: getButtonLabel(context, buttonItem),\n);\n});\ncase TargetPlatform.macOS:\nreturn buttonItems.map((ContextMenuButtonItem buttonItem) {\nreturn CupertinoDesktopTextSelectionToolbarButton.text(\nonPressed: buttonItem.onPressed,\ntext: getButtonLabel(context, buttonItem),\n);\n});\n}\n}\nFlutter\nmaterial\nAdaptiveTextSelectionToolbar\ngetAdaptiveButtons static method\nAdaptiveTextSelectionToolbar class",
  "code_examples": [
   "import 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\nvoid main() => runApp(const EditableTextToolbarBuilderExampleApp());\n\nclass EditableTextToolbarBuilderExampleApp extends StatefulWidget {\n  const EditableTextToolbarBuilderExampleApp({super.key});\n\n  @override\n  State<EditableTextToolbarBuilderExampleApp> createState() =>\n      _EditableTextToolbarBuilderExampleAppState();\n}\n\nclass _EditableTextToolbarBuilderExampleAppState\n    extends State<EditableTextToolbarBuilderExampleApp> {\n  final TextEditingController _controller = TextEditingController(\n    text:\n        'Right click (desktop) or long press (mobile) to see the menu with a custom toolbar.',\n  );\n\n  @override\n  void initState() {\n    super.initState();\n    // On web, disable the browser's context menu since this example uses a custom\n    // Flutter-rendered context menu.\n    if (kIsWeb) {\n      BrowserContextMenu.disableContextMenu();\n    }\n  }\n\n  @override\n  void dispose() {\n    if (kIsWeb) {\n      BrowserContextMenu.enableContextMenu();\n    }\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Custom toolbar, default-looking buttons'),\n        ),\n        body: Center(\n          child: Column(\n            children: <Widget>[\n              const SizedBox(height: 20.0),\n              TextField(\n                controller: _controller,\n                contextMenuBuilder: (BuildContext context,\n                    EditableTextState editableTextState) {\n                  return _MyTextSelectionToolbar(\n                    anchor: editableTextState.contextMenuAnchors.primaryAnchor,\n                    // getAdaptiveButtons creates the default button widgets for\n                    // the current platform.\n                    children: AdaptiveTextSelectionToolbar.getAdaptiveButtons(\n                      context,\n                      // These buttons just close the menu when clicked.\n                      <ContextMenuButtonItem>[\n                        ContextMenuButtonItem(\n                          label: 'One',\n                          onPressed: () => ContextMenuController.removeAny(),\n                        ),\n                        ContextMenuButtonItem(\n                          label: 'Two',\n                          onPressed: () => ContextMenuController.removeAny(),\n                        ),\n                        ContextMenuButtonItem(\n                          label: 'Three',\n                          onPressed: () => ContextMenuController.removeAny(),\n                        ),\n                        ContextMenuButtonItem(\n                          label: 'Four',\n                          onPressed: () => ContextMenuController.removeAny(),\n                        ),\n                        ContextMenuButtonItem(\n                          label: 'Five',\n                          onPressed: () => ContextMenuController.removeAny(),\n                        ),\n                      ],\n                    ).toList(),\n                  );\n                },\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n/// A simple, yet totally custom, text selection toolbar.\n///\n/// Displays its children in a scrollable grid.\nclass _MyTextSelectionToolbar extends StatelessWidget {\n  const _MyTextSelectionToolbar({\n    required this.anchor,\n    required this.children,\n  });\n\n  final Offset anchor;\n  final List<Widget> children;\n\n  @override\n  Widget build(BuildContext context) {\n    return Stack(\n      children: <Widget>[\n        Positioned(\n          top: anchor.dy,\n          left: anchor.dx,\n          child: Container(\n            width: 200.0,\n            height: 200.0,\n            color: Colors.cyanAccent.withOpacity(0.5),\n            child: GridView.count(\n              padding: const EdgeInsets.all(12.0),\n              crossAxisCount: 2,\n              children: children,\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/AlertDialog-class.html",
  "title": "AlertDialog class - material library - Dart API",
  "documentation_content": "AlertDialog class - material library - Dart API\nmenu\nFlutter\nmaterial\nAlertDialog class\nAlertDialog\nbrightness_4\nbrightness_5\ndescription\nAlertDialog class\nA Material Design alert dialog.\nAn alert dialog (also known as a basic dialog) informs the user about\nsituations that require acknowledgment. An alert dialog has an optional\ntitle and an optional list of actions. The title is displayed above the\ncontent and the actions are displayed below the content.\nFor dialogs that offer the user a choice between several options, consider\nusing a SimpleDialog.\nTypically passed as the child widget to showDialog, which displays the\ndialog.\nThis snippet shows a method in a State which, when called, displays a dialog box\nand returns a Future that completes when the dialog is dismissed.\nlink\ncontent_copy\nFuture<void> _showMyDialog() async {\nreturn showDialog<void>(\ncontext: context,\nbarrierDismissible: false, // user must tap button!\nbuilder: (BuildContext context) {\nreturn AlertDialog(\ntitle: const Text('AlertDialog Title'),\ncontent: const SingleChildScrollView(\nchild: ListBody(\nchildren: <Widget>[\nText('This is a demo alert dialog.'),\nText('Would you like to approve of this message?'),\n],\n),\n),\nactions: <Widget>[\nTextButton(\nchild: const Text('Approve'),\nonPressed: () {\nNavigator.of(context).pop();\n},\n),\n],\n);\n},\n);\n}\nThis demo shows a TextButton which when pressed, calls showDialog. When called, this method\ndisplays a Material dialog above the current contents of the app and returns\na Future that completes when the dialog is dismissed.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AlertDialog.2 mysample\nThis sample shows the creation of AlertDialog, as described in:\nhttps://m3.material.io/components/dialogs/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AlertDialog.3 mysample\nAlert dialogs and scrolling\nBy default, alert dialogs size themselves to contain their children.\nIf the content is too large to fit on the screen vertically, the dialog will\ndisplay the title and actions, and let the content overflow. This is\nrarely desired. Consider using a scrolling widget for content, such as\nSingleChildScrollView, to avoid overflow.\nBecause the dialog attempts to size itself to the contents, the content\nmust support reporting its intrinsic dimensions. In particular, this means\nthat lazily-rendered widgets such as ListView, GridView, and\nCustomScrollView, will not work in an AlertDialog unless they are\nwrapped in a widget that forces a particular size (e.g. a SizedBox).\nFor finer-grained control over the sizing of a dialog, consider using\nDialog directly.\nSee also:\nSimpleDialog, which handles the scrolling of the contents but has no actions.\nDialog, on which AlertDialog and SimpleDialog are based.\nCupertinoAlertDialog, an iOS-styled alert dialog.\nshowDialog, which actually displays the dialog and returns its result.\nmaterial.io/design/components/dialogs.html#alert-dialog\nm3.material.io/components/dialogs\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nAlertDialog\nConstructors\nAlertDialog({Key? key, Widget? icon, EdgeInsetsGeometry? iconPadding, Color? iconColor, Widget? title, EdgeInsetsGeometry? titlePadding, TextStyle? titleTextStyle, Widget? content, EdgeInsetsGeometry? contentPadding, TextStyle? contentTextStyle, List<Widget>? actions, EdgeInsetsGeometry? actionsPadding, MainAxisAlignment? actionsAlignment, OverflowBarAlignment? actionsOverflowAlignment, VerticalDirection? actionsOverflowDirection, double? actionsOverflowButtonSpacing, EdgeInsetsGeometry? buttonPadding, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, String? semanticLabel, EdgeInsets insetPadding = _defaultInsetPadding, Clip clipBehavior = Clip.none, ShapeBorder? shape, AlignmentGeometry? alignment, bool scrollable = false})\nCreates an alert dialog.\nconst\nAlertDialog.adaptive({Key? key, Widget? icon, EdgeInsetsGeometry? iconPadding, Color? iconColor, Widget? title, EdgeInsetsGeometry? titlePadding, TextStyle? titleTextStyle, Widget? content, EdgeInsetsGeometry? contentPadding, TextStyle? contentTextStyle, List<Widget>? actions, EdgeInsetsGeometry? actionsPadding, MainAxisAlignment? actionsAlignment, OverflowBarAlignment? actionsOverflowAlignment, VerticalDirection? actionsOverflowDirection, double? actionsOverflowButtonSpacing, EdgeInsetsGeometry? buttonPadding, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, String? semanticLabel, EdgeInsets insetPadding, Clip clipBehavior, ShapeBorder? shape, AlignmentGeometry? alignment, bool scrollable, ScrollController? scrollController, ScrollController? actionScrollController, Duration insetAnimationDuration, Curve insetAnimationCurve})\nCreates an adaptive AlertDialog based on whether the target platform is\niOS or macOS, following Material design's\nCross-platform guidelines.\nconst\nfactory\nProperties\nactions\n\u2192 List<Widget>?\nThe (optional) set of actions that are displayed at the bottom of the\ndialog with an OverflowBar.\nfinal\nactionsAlignment\n\u2192 MainAxisAlignment?\nDefines the horizontal layout of the actions according to the same\nrules as for Row.mainAxisAlignment.\nfinal\nactionsOverflowAlignment\n\u2192 OverflowBarAlignment?\nThe horizontal alignment of actions within the vertical\n\"overflow\" layout.\nfinal\nactionsOverflowButtonSpacing\n\u2192 double?\nThe spacing between actions when the OverflowBar switches to a column\nlayout because the actions don't fit horizontally.\nfinal\nactionsOverflowDirection\n\u2192 VerticalDirection?\nThe vertical direction of actions if the children overflow\nhorizontally.\nfinal\nactionsPadding\n\u2192 EdgeInsetsGeometry?\nPadding around the set of actions at the bottom of the dialog.\nfinal\nalignment\n\u2192 AlignmentGeometry?\nHow to align the Dialog.\nfinal\nbackgroundColor\n\u2192 Color?\nThe background color of the surface of this Dialog.\nfinal\nbuttonPadding\n\u2192 EdgeInsetsGeometry?\nThe padding that surrounds each button in actions.\nfinal\nclipBehavior\n\u2192 Clip\nControls how the contents of the dialog are clipped (or not) to the given\nshape.\nfinal\ncontent\n\u2192 Widget?\nThe (optional) content of the dialog is displayed in the center of the\ndialog in a lighter font.\nfinal\ncontentPadding\n\u2192 EdgeInsetsGeometry?\nPadding around the content.\nfinal\ncontentTextStyle\n\u2192 TextStyle?\nStyle for the text in the content of this AlertDialog.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate of this Dialog.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nicon\n\u2192 Widget?\nAn optional icon to display at the top of the dialog.\nfinal\niconColor\n\u2192 Color?\nColor for the Icon in the icon of this AlertDialog.\nfinal\niconPadding\n\u2192 EdgeInsetsGeometry?\nPadding around the icon.\nfinal\ninsetPadding\n\u2192 EdgeInsets\nThe amount of padding added to MediaQueryData.viewInsets on the outside\nof the dialog. This defines the minimum space between the screen's edges\nand the dialog.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nscrollable\n\u2192 bool\nDetermines whether the title and content widgets are wrapped in a\nscrollable.\nfinal\nsemanticLabel\n\u2192 String?\nThe semantic label of the dialog used by accessibility frameworks to\nannounce screen transitions when the dialog is opened and closed.\nfinal\nshadowColor\n\u2192 Color?\nThe color used to paint a drop shadow under the dialog's Material,\nwhich reflects the dialog's elevation.\nfinal\nshape\n\u2192 ShapeBorder?\nThe shape of this dialog's border.\nfinal\nsurfaceTintColor\n\u2192 Color?\nThe color used as a surface tint overlay on the dialog's background color,\nwhich reflects the dialog's elevation.\nfinal\ntitle\n\u2192 Widget?\nThe (optional) title of the dialog is displayed in a large font at the top\nof the dialog, below the (optional) icon.\nfinal\ntitlePadding\n\u2192 EdgeInsetsGeometry?\nPadding around the title.\nfinal\ntitleTextStyle\n\u2192 TextStyle?\nStyle for the text in the title of this AlertDialog.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nAlertDialog class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AlertDialog].\n\nvoid main() => runApp(const AlertDialogExampleApp());\n\nclass AlertDialogExampleApp extends StatelessWidget {\n  const AlertDialogExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('AlertDialog Sample')),\n        body: const Center(\n          child: DialogExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass DialogExample extends StatelessWidget {\n  const DialogExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextButton(\n      onPressed: () => showDialog<String>(\n        context: context,\n        builder: (BuildContext context) => AlertDialog(\n          title: const Text('AlertDialog Title'),\n          content: const Text('AlertDialog description'),\n          actions: <Widget>[\n            TextButton(\n              onPressed: () => Navigator.pop(context, 'Cancel'),\n              child: const Text('Cancel'),\n            ),\n            TextButton(\n              onPressed: () => Navigator.pop(context, 'OK'),\n              child: const Text('OK'),\n            ),\n          ],\n        ),\n      ),\n      child: const Text('Show Dialog'),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AlertDialog].\n\nvoid main() => runApp(const AlertDialogExampleApp());\n\nclass AlertDialogExampleApp extends StatelessWidget {\n  const AlertDialogExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('AlertDialog Sample')),\n        body: const Center(\n          child: DialogExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass DialogExample extends StatelessWidget {\n  const DialogExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextButton(\n      onPressed: () => showDialog<String>(\n        context: context,\n        builder: (BuildContext context) => AlertDialog(\n          title: const Text('AlertDialog Title'),\n          content: const Text('AlertDialog description'),\n          actions: <Widget>[\n            TextButton(\n              onPressed: () => Navigator.pop(context, 'Cancel'),\n              child: const Text('Cancel'),\n            ),\n            TextButton(\n              onPressed: () => Navigator.pop(context, 'OK'),\n              child: const Text('OK'),\n            ),\n          ],\n        ),\n      ),\n      child: const Text('Show Dialog'),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/AlertDialog/AlertDialog.adaptive.html",
  "title": "AlertDialog.adaptive constructor - AlertDialog - material library - Dart API",
  "documentation_content": "AlertDialog.adaptive constructor - AlertDialog - material library - Dart API\nmenu\nFlutter\nmaterial\nAlertDialog\nAlertDialog.adaptive const constructor\nAlertDialog.adaptive\nbrightness_4\nbrightness_5\ndescription\nAlertDialog.adaptive constructor\nconst\nAlertDialog.adaptive({Key? key,\nWidget? icon,\nEdgeInsetsGeometry? iconPadding,\nColor? iconColor,\nWidget? title,\nEdgeInsetsGeometry? titlePadding,\nTextStyle? titleTextStyle,\nWidget? content,\nEdgeInsetsGeometry? contentPadding,\nTextStyle? contentTextStyle,\nList<Widget>? actions,\nEdgeInsetsGeometry? actionsPadding,\nMainAxisAlignment? actionsAlignment,\nOverflowBarAlignment? actionsOverflowAlignment,\nVerticalDirection? actionsOverflowDirection,\ndouble? actionsOverflowButtonSpacing,\nEdgeInsetsGeometry? buttonPadding,\nColor? backgroundColor,\ndouble? elevation,\nColor? shadowColor,\nColor? surfaceTintColor,\nString? semanticLabel,\nEdgeInsets insetPadding,\nClip clipBehavior,\nShapeBorder? shape,\nAlignmentGeometry? alignment,\nbool scrollable,\nScrollController? scrollController,\nScrollController? actionScrollController,\nDuration insetAnimationDuration,\nCurve insetAnimationCurve}\n)\nCreates an adaptive AlertDialog based on whether the target platform is\niOS or macOS, following Material design's\nCross-platform guidelines.\nOn iOS and macOS, this constructor creates a CupertinoAlertDialog. On\nother platforms, this creates a Material design AlertDialog.\nTypically passed as a child of showAdaptiveDialog, which will display\nthe alert differently based on platform.\nIf a CupertinoAlertDialog is created only these parameters are used:\ntitle, content, actions, scrollController,\nactionScrollController, insetAnimationDuration, and\ninsetAnimationCurve. If a material AlertDialog is created,\nscrollController, actionScrollController, insetAnimationDuration,\nand insetAnimationCurve are ignored.\nThe target platform is based on the current Theme: ThemeData.platform.\nThis demo shows a TextButton which when pressed, calls showAdaptiveDialog.\nWhen called, this method displays an adaptive dialog above the current\ncontents of the app, with different behaviors depending on target platform.\nCupertinoDialogAction is conditionally used as the child to show more\nplatform specific design.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AlertDialog.adaptive.1 mysample\nImplementation\nconst factory AlertDialog.adaptive({\nKey? key,\nWidget? icon,\nEdgeInsetsGeometry? iconPadding,\nColor? iconColor,\nWidget? title,\nEdgeInsetsGeometry? titlePadding,\nTextStyle? titleTextStyle,\nWidget? content,\nEdgeInsetsGeometry? contentPadding,\nTextStyle? contentTextStyle,\nList<Widget>? actions,\nEdgeInsetsGeometry? actionsPadding,\nMainAxisAlignment? actionsAlignment,\nOverflowBarAlignment? actionsOverflowAlignment,\nVerticalDirection? actionsOverflowDirection,\ndouble? actionsOverflowButtonSpacing,\nEdgeInsetsGeometry? buttonPadding,\nColor? backgroundColor,\ndouble? elevation,\nColor? shadowColor,\nColor? surfaceTintColor,\nString? semanticLabel,\nEdgeInsets insetPadding,\nClip clipBehavior,\nShapeBorder? shape,\nAlignmentGeometry? alignment,\nbool scrollable,\nScrollController? scrollController,\nScrollController? actionScrollController,\nDuration insetAnimationDuration,\nCurve insetAnimationCurve,\n}) = _AdaptiveAlertDialog;\nFlutter\nmaterial\nAlertDialog\nAlertDialog.adaptive const constructor\nAlertDialog class",
  "code_examples": [
   "import 'package:flutter/cupertino.dart';\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [AlertDialog].\n\nvoid main() => runApp(const AdaptiveAlertDialogApp());\n\nclass AdaptiveAlertDialogApp extends StatelessWidget {\n  const AdaptiveAlertDialogApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      // Try this: set the platform to TargetPlatform.android and see the difference\n      theme: ThemeData(platform: TargetPlatform.iOS, useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('AlertDialog Sample')),\n        body: const Center(\n          child: AdaptiveDialogExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass AdaptiveDialogExample extends StatelessWidget {\n  const AdaptiveDialogExample({super.key});\n\n  Widget adaptiveAction(\n      {required BuildContext context,\n      required VoidCallback onPressed,\n      required Widget child}) {\n    final ThemeData theme = Theme.of(context);\n    switch (theme.platform) {\n      case TargetPlatform.android:\n      case TargetPlatform.fuchsia:\n      case TargetPlatform.linux:\n      case TargetPlatform.windows:\n        return TextButton(onPressed: onPressed, child: child);\n      case TargetPlatform.iOS:\n      case TargetPlatform.macOS:\n        return CupertinoDialogAction(onPressed: onPressed, child: child);\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return TextButton(\n      onPressed: () => showAdaptiveDialog<String>(\n        context: context,\n        builder: (BuildContext context) => AlertDialog.adaptive(\n          title: const Text('AlertDialog Title'),\n          content: const Text('AlertDialog description'),\n          actions: <Widget>[\n            adaptiveAction(\n              context: context,\n              onPressed: () => Navigator.pop(context, 'Cancel'),\n              child: const Text('Cancel'),\n            ),\n            adaptiveAction(\n              context: context,\n              onPressed: () => Navigator.pop(context, 'OK'),\n              child: const Text('OK'),\n            ),\n          ],\n        ),\n      ),\n      child: const Text('Show Dialog'),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/AnimatedIcon-class.html",
  "title": "AnimatedIcon class - material library - Dart API",
  "documentation_content": "AnimatedIcon class - material library - Dart API\nmenu\nFlutter\nmaterial\nAnimatedIcon class\nAnimatedIcon\nbrightness_4\nbrightness_5\ndescription\nAnimatedIcon class\nShows an animated icon at a given animation progress.\nThe available icons are specified in AnimatedIcons.\nThis example shows how to create an animated icon. The icon is animated\nforward and reverse in a loop.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AnimatedIcon.1 mysample\nSee also:\nIcons, for the list of available static Material Icons.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nAnimatedIcon\nConstructors\nAnimatedIcon({Key? key, required AnimatedIconData icon, required Animation<double> progress, Color? color, double? size, String? semanticLabel, TextDirection? textDirection})\nCreates an AnimatedIcon.\nconst\nProperties\ncolor\n\u2192 Color?\nThe color to use when drawing the icon.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nicon\n\u2192 AnimatedIconData\nThe icon to display. Available icons are listed in AnimatedIcons.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nprogress\n\u2192 Animation<double>\nThe animation progress for the animated icon.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsemanticLabel\n\u2192 String?\nSemantic label for the icon.\nfinal\nsize\n\u2192 double?\nThe size of the icon in logical pixels.\nfinal\ntextDirection\n\u2192 TextDirection?\nThe text direction to use for rendering the icon.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nAnimatedIcon class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AnimatedIcon].\n\nvoid main() {\n  runApp(const AnimatedIconApp());\n}\n\nclass AnimatedIconApp extends StatelessWidget {\n  const AnimatedIconApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        colorSchemeSeed: const Color(0xff6750a4),\n        useMaterial3: true,\n      ),\n      home: const Scaffold(\n        body: AnimatedIconExample(),\n      ),\n    );\n  }\n}\n\nclass AnimatedIconExample extends StatefulWidget {\n  const AnimatedIconExample({super.key});\n\n  @override\n  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();\n}\n\nclass _AnimatedIconExampleState extends State<AnimatedIconExample>\n    with SingleTickerProviderStateMixin {\n  late AnimationController controller;\n  late Animation<double> animation;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )\n      ..forward()\n      ..repeat(reverse: true);\n    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Center(\n        child: AnimatedIcon(\n          icon: AnimatedIcons.menu_arrow,\n          progress: animation,\n          size: 72.0,\n          semanticLabel: 'Show menu',\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/AnimatedIcons-class.html",
  "title": "AnimatedIcons class - material library - Dart API",
  "documentation_content": "AnimatedIcons class - material library - Dart API\nmenu\nFlutter\nmaterial\nAnimatedIcons class\nAnimatedIcons\nbrightness_4\nbrightness_5\ndescription\nAnimatedIcons class\nabstract\nfinal\nIdentifier for the supported Material Design animated icons.\nUse with AnimatedIcon class to show specific animated icons.\nThis example shows how to create an animated icon. The icon is animated\nforward and reverse in a loop.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AnimatedIcons.1 mysample\nSee also:\nIcons, for the list of available static Material Icons.\nConstructors\nAnimatedIcons()\nProperties\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoString()\n\u2192 String\nA string representation of this object.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nConstants\nadd_event\n\u2192 const AnimatedIconData\nThe Material Design add to event icon animation.\n_$add_event\narrow_menu\n\u2192 const AnimatedIconData\nThe Material Design arrow to menu icon animation.\n_$arrow_menu\nclose_menu\n\u2192 const AnimatedIconData\nThe Material Design close to menu icon animation.\n_$close_menu\nellipsis_search\n\u2192 const AnimatedIconData\nThe Material Design ellipsis to search icon animation.\n_$ellipsis_search\nevent_add\n\u2192 const AnimatedIconData\nThe Material Design event to add icon animation.\n_$event_add\nhome_menu\n\u2192 const AnimatedIconData\nThe Material Design home to menu icon animation.\n_$home_menu\nlist_view\n\u2192 const AnimatedIconData\nThe Material Design list to view icon animation.\n_$list_view\nmenu_arrow\n\u2192 const AnimatedIconData\nThe Material Design menu to arrow icon animation.\n_$menu_arrow\nmenu_close\n\u2192 const AnimatedIconData\nThe Material Design menu to close icon animation.\n_$menu_close\nmenu_home\n\u2192 const AnimatedIconData\nThe Material Design menu to home icon animation.\n_$menu_home\npause_play\n\u2192 const AnimatedIconData\nThe Material Design pause to play icon animation.\n_$pause_play\nplay_pause\n\u2192 const AnimatedIconData\nThe Material Design play to pause icon animation.\n_$play_pause\nsearch_ellipsis\n\u2192 const AnimatedIconData\nThe Material Design search to ellipsis icon animation.\n_$search_ellipsis\nview_list\n\u2192 const AnimatedIconData\nThe Material Design view to list icon animation.\n_$view_list\nFlutter\nmaterial\nAnimatedIcons class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AnimatedIcon].\n\nfinal Map<String, AnimatedIconData> iconsList = <String, AnimatedIconData>{\n  'add_event': AnimatedIcons.add_event,\n  'arrow_menu': AnimatedIcons.arrow_menu,\n  'close_menu': AnimatedIcons.close_menu,\n  'ellipsis_search': AnimatedIcons.ellipsis_search,\n  'event_add': AnimatedIcons.event_add,\n  'home_menu': AnimatedIcons.home_menu,\n  'list_view': AnimatedIcons.list_view,\n  'menu_arrow': AnimatedIcons.menu_arrow,\n  'menu_close': AnimatedIcons.menu_close,\n  'menu_home': AnimatedIcons.menu_home,\n  'pause_play': AnimatedIcons.pause_play,\n  'play_pause': AnimatedIcons.play_pause,\n  'search_ellipsis': AnimatedIcons.search_ellipsis,\n  'view_list': AnimatedIcons.view_list,\n};\n\nvoid main() {\n  runApp(const AnimatedIconApp());\n}\n\nclass AnimatedIconApp extends StatelessWidget {\n  const AnimatedIconApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        colorSchemeSeed: const Color(0xff6750a4),\n        useMaterial3: true,\n      ),\n      home: const Scaffold(\n        body: AnimatedIconExample(),\n      ),\n    );\n  }\n}\n\nclass AnimatedIconExample extends StatefulWidget {\n  const AnimatedIconExample({super.key});\n\n  @override\n  State<AnimatedIconExample> createState() => _AnimatedIconExampleState();\n}\n\nclass _AnimatedIconExampleState extends State<AnimatedIconExample>\n    with SingleTickerProviderStateMixin {\n  late AnimationController controller;\n  late Animation<double> animation;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = AnimationController(\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )\n      ..forward()\n      ..repeat(reverse: true);\n    animation = Tween<double>(begin: 0.0, end: 1.0).animate(controller);\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: GridView(\n        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 4,\n        ),\n        children:\n            iconsList.entries.map((MapEntry<String, AnimatedIconData> entry) {\n          return Card(\n            child: Center(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: <Widget>[\n                  AnimatedIcon(\n                    icon: entry.value,\n                    progress: animation,\n                    size: 72.0,\n                    semanticLabel: entry.key,\n                  ),\n                  const SizedBox(height: 8.0),\n                  Text(entry.key),\n                ],\n              ),\n            ),\n          );\n        }).toList(),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/AppBar-class.html",
  "title": "AppBar class - material library - Dart API",
  "documentation_content": "AppBar class - material library - Dart API\nmenu\nFlutter\nmaterial\nAppBar class\nAppBar\nbrightness_4\nbrightness_5\ndescription\nAppBar class\nA Material Design app bar.\nAn app bar consists of a toolbar and potentially other widgets, such as a\nTabBar and a FlexibleSpaceBar. App bars typically expose one or more\ncommon actions with IconButtons which are optionally followed by a\nPopupMenuButton for less common operations (sometimes called the \"overflow\nmenu\").\nApp bars are typically used in the Scaffold.appBar property, which places\nthe app bar as a fixed-height widget at the top of the screen. For a scrollable\napp bar, see SliverAppBar, which embeds an AppBar in a sliver for use in\na CustomScrollView.\nThe AppBar displays the toolbar widgets, leading, title, and actions,\nabove the bottom (if any). The bottom is usually used for a TabBar. If\na flexibleSpace widget is specified then it is stacked behind the toolbar\nand the bottom widget. The following diagram shows where each of these slots\nappears in the toolbar when the writing language is left-to-right (e.g.\nEnglish):\nThe AppBar insets its content based on the ambient MediaQuery's padding,\nto avoid system UI intrusions. It's taken care of by Scaffold when used in\nthe Scaffold.appBar property. When animating an AppBar, unexpected\nMediaQuery changes (as is common in Hero animations) may cause the content\nto suddenly jump. Wrap the AppBar in a MediaQuery widget, and adjust its\npadding such that the animation is smooth.\nIf the leading widget is omitted, but the AppBar is in a Scaffold with\na Drawer, then a button will be inserted to open the drawer. Otherwise, if\nthe nearest Navigator has any previous routes, a BackButton is inserted\ninstead. This behavior can be turned off by setting the automaticallyImplyLeading\nto false. In that case a null leading widget will result in the middle/title widget\nstretching to start.\nThis sample shows an AppBar with two simple actions. The first action\nopens a SnackBar, while the second action navigates to a new page.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AppBar.1 mysample\nMaterial Design 3 introduced new types of app bar.\nThis sample shows the creation of an AppBar widget with the shadowColor and\nscrolledUnderElevation properties set, as described in:\nhttps://m3.material.io/components/top-app-bar/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AppBar.2 mysample\nTroubleshooting\nWhy don't my TextButton actions appear?\nIf the app bar's actions contains TextButtons, they will not\nbe visible if their foreground (text) color is the same as the\napp bar's background color.\nIn Material v2 (i.e., when ThemeData.useMaterial3 is false),\nthe default app bar backgroundColor is the overall theme's\nColorScheme.primary if the overall theme's brightness is\nBrightness.light. Unfortunately this is the same as the default\nButtonStyle.foregroundColor for TextButton for light themes.\nIn this case a preferable text button foreground color is\nColorScheme.onPrimary, a color that contrasts nicely with\nColorScheme.primary. To remedy the problem, override\nTextButton.style:\nThis sample shows an AppBar with two action buttons with their primary\ncolor set to ColorScheme.onPrimary.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AppBar.3 mysample\nThis example shows how to listen to a nested Scrollable's scroll notification\nin a nested scroll view using the notificationPredicate property and use it\nto make scrolledUnderElevation take effect.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.AppBar.4 mysample\nSee also:\nScaffold, which displays the AppBar in its Scaffold.appBar slot.\nSliverAppBar, which uses AppBar to provide a flexible app bar that\ncan be used in a CustomScrollView.\nTabBar, which is typically placed in the bottom slot of the AppBar\nif the screen has multiple pages arranged in tabs.\nIconButton, which is used with actions to show buttons on the app bar.\nPopupMenuButton, to show a popup menu on the app bar, via actions.\nFlexibleSpaceBar, which is used with flexibleSpace when the app bar\ncan expand and collapse.\nmaterial.io/design/components/app-bars-top.html\nm3.material.io/components/top-app-bar\nCookbook: Place a floating app bar above a list\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nAppBar\nImplemented types\nPreferredSizeWidget\nConstructors\nAppBar({Key? key, Widget? leading, bool automaticallyImplyLeading = true, Widget? title, List<Widget>? actions, Widget? flexibleSpace, PreferredSizeWidget? bottom, double? elevation, double? scrolledUnderElevation, ScrollNotificationPredicate notificationPredicate = defaultScrollNotificationPredicate, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, Color? backgroundColor, Color? foregroundColor, IconThemeData? iconTheme, IconThemeData? actionsIconTheme, bool primary = true, bool? centerTitle, bool excludeHeaderSemantics = false, double? titleSpacing, double toolbarOpacity = 1.0, double bottomOpacity = 1.0, double? toolbarHeight, double? leadingWidth, TextStyle? toolbarTextStyle, TextStyle? titleTextStyle, SystemUiOverlayStyle? systemOverlayStyle, bool forceMaterialTransparency = false, Clip? clipBehavior})\nCreates a Material Design app bar.\nProperties\nactions\n\u2192 List<Widget>?\nA list of Widgets to display in a row after the title widget.\nfinal\nactionsIconTheme\n\u2192 IconThemeData?\nThe color, opacity, and size to use for the icons that appear in the app\nbar's actions.\nfinal\nautomaticallyImplyLeading\n\u2192 bool\nControls whether we should try to imply the leading widget if null.\nfinal\nbackgroundColor\n\u2192 Color?\nThe fill color to use for an app bar's Material.\nfinal\nbottom\n\u2192 PreferredSizeWidget?\nThis widget appears across the bottom of the app bar.\nfinal\nbottomOpacity\n\u2192 double\nHow opaque the bottom part of the app bar is.\nfinal\ncenterTitle\n\u2192 bool?\nWhether the title should be centered.\nfinal\nclipBehavior\n\u2192 Clip?\nThe content will be clipped (or not) according to this option.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate at which to place this app bar relative to its parent.\nfinal\nexcludeHeaderSemantics\n\u2192 bool\nWhether the title should be wrapped with header Semantics.\nfinal\nflexibleSpace\n\u2192 Widget?\nThis widget is stacked behind the toolbar and the tab bar. Its height will\nbe the same as the app bar's overall height.\nfinal\nforceMaterialTransparency\n\u2192 bool\nForces the AppBar's Material widget type to be MaterialType.transparency\n(instead of Material's default type).\nfinal\nforegroundColor\n\u2192 Color?\nThe default color for Text and Icons within the app bar.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\niconTheme\n\u2192 IconThemeData?\nThe color, opacity, and size to use for toolbar icons.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nleading\n\u2192 Widget?\nA widget to display before the toolbar's title.\nfinal\nleadingWidth\n\u2192 double?\nDefines the width of leading widget.\nfinal\nnotificationPredicate\n\u2192 ScrollNotificationPredicate\nA check that specifies which child's ScrollNotifications should be\nlistened to.\nfinal\npreferredSize\n\u2192 Size\nA size whose height is the sum of toolbarHeight and the bottom widget's\npreferred height.\nfinal\nprimary\n\u2192 bool\nWhether this app bar is being displayed at the top of the screen.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nscrolledUnderElevation\n\u2192 double?\nThe elevation that will be used if this app bar has something\nscrolled underneath it.\nfinal\nshadowColor\n\u2192 Color?\nThe color of the shadow below the app bar.\nfinal\nshape\n\u2192 ShapeBorder?\nThe shape of the app bar's Material as well as its shadow.\nfinal\nsurfaceTintColor\n\u2192 Color?\nThe color of the surface tint overlay applied to the app bar's\nbackground color to indicate elevation.\nfinal\nsystemOverlayStyle\n\u2192 SystemUiOverlayStyle?\nSpecifies the style to use for the system overlays (e.g. the status bar on\nAndroid or iOS, the system navigation bar on Android).\nfinal\ntitle\n\u2192 Widget?\nThe primary widget displayed in the app bar.\nfinal\ntitleSpacing\n\u2192 double?\nThe spacing around title content on the horizontal axis. This spacing is\napplied even if there is no leading content or actions. If you want\ntitle to take all the space available, set this value to 0.0.\nfinal\ntitleTextStyle\n\u2192 TextStyle?\nThe default text style for the AppBar's title widget.\nfinal\ntoolbarHeight\n\u2192 double?\nDefines the height of the toolbar component of an AppBar.\nfinal\ntoolbarOpacity\n\u2192 double\nHow opaque the toolbar part of the app bar is.\nfinal\ntoolbarTextStyle\n\u2192 TextStyle?\nThe default text style for the AppBar's leading, and\nactions widgets, but not its title.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<AppBar>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\npreferredHeightFor(BuildContext context, Size preferredSize)\n\u2192 double\nUsed by Scaffold to compute its AppBar's overall height. The returned value is\nthe same preferredSize.height unless AppBar.toolbarHeight was null and\nAppBarTheme.of(context).toolbarHeight is non-null. In that case the\nreturn value is the sum of the theme's toolbar height and the height of\nthe app bar's AppBar.bottom widget.\nFlutter\nmaterial\nAppBar class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AppBar].\n\nvoid main() => runApp(const AppBarApp());\n\nclass AppBarApp extends StatelessWidget {\n  const AppBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: AppBarExample(),\n    );\n  }\n}\n\nclass AppBarExample extends StatelessWidget {\n  const AppBarExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final ButtonStyle style = TextButton.styleFrom(\n      foregroundColor: Theme.of(context).colorScheme.onPrimary,\n    );\n    return Scaffold(\n      appBar: AppBar(\n        actions: <Widget>[\n          TextButton(\n            style: style,\n            onPressed: () {},\n            child: const Text('Action 1'),\n          ),\n          TextButton(\n            style: style,\n            onPressed: () {},\n            child: const Text('Action 2'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AppBar].\n\nList<String> titles = <String>[\n  'Cloud',\n  'Beach',\n  'Sunny',\n];\n\nvoid main() => runApp(const AppBarApp());\n\nclass AppBarApp extends StatelessWidget {\n  const AppBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: const AppBarExample(),\n    );\n  }\n}\n\nclass AppBarExample extends StatelessWidget {\n  const AppBarExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final ColorScheme colorScheme = Theme.of(context).colorScheme;\n    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);\n    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);\n    const int tabsCount = 3;\n\n    return DefaultTabController(\n      initialIndex: 1,\n      length: tabsCount,\n      child: Scaffold(\n        appBar: AppBar(\n          title: const Text('AppBar Sample'),\n          // This check specifies which nested Scrollable's scroll notification\n          // should be listened to.\n          //\n          // When `ThemeData.useMaterial3` is true and scroll view has\n          // scrolled underneath the app bar, this updates the app bar\n          // background color and elevation.\n          //\n          // This sets `notification.depth == 1` to listen to the scroll\n          // notification from the nested `ListView.builder`.\n          notificationPredicate: (ScrollNotification notification) {\n            return notification.depth == 1;\n          },\n          // The elevation value of the app bar when scroll view has\n          // scrolled underneath the app bar.\n          scrolledUnderElevation: 4.0,\n          shadowColor: Theme.of(context).shadowColor,\n          bottom: TabBar(\n            tabs: <Widget>[\n              Tab(\n                icon: const Icon(Icons.cloud_outlined),\n                text: titles[0],\n              ),\n              Tab(\n                icon: const Icon(Icons.beach_access_sharp),\n                text: titles[1],\n              ),\n              Tab(\n                icon: const Icon(Icons.brightness_5_sharp),\n                text: titles[2],\n              ),\n            ],\n          ),\n        ),\n        body: TabBarView(\n          children: <Widget>[\n            ListView.builder(\n              itemCount: 25,\n              itemBuilder: (BuildContext context, int index) {\n                return ListTile(\n                  tileColor: index.isOdd ? oddItemColor : evenItemColor,\n                  title: Text('${titles[0]} $index'),\n                );\n              },\n            ),\n            ListView.builder(\n              itemCount: 25,\n              itemBuilder: (BuildContext context, int index) {\n                return ListTile(\n                  tileColor: index.isOdd ? oddItemColor : evenItemColor,\n                  title: Text('${titles[1]} $index'),\n                );\n              },\n            ),\n            ListView.builder(\n              itemCount: 25,\n              itemBuilder: (BuildContext context, int index) {\n                return ListTile(\n                  tileColor: index.isOdd ? oddItemColor : evenItemColor,\n                  title: Text('${titles[2]} $index'),\n                );\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AppBar].\n\nfinal List<int> _items = List<int>.generate(51, (int index) => index);\n\nvoid main() => runApp(const AppBarApp());\n\nclass AppBarApp extends StatelessWidget {\n  const AppBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        colorSchemeSeed: const Color(0xff6750a4),\n        useMaterial3: true,\n      ),\n      home: const AppBarExample(),\n    );\n  }\n}\n\nclass AppBarExample extends StatefulWidget {\n  const AppBarExample({super.key});\n\n  @override\n  State<AppBarExample> createState() => _AppBarExampleState();\n}\n\nclass _AppBarExampleState extends State<AppBarExample> {\n  bool shadowColor = false;\n  double? scrolledUnderElevation;\n\n  @override\n  Widget build(BuildContext context) {\n    final ColorScheme colorScheme = Theme.of(context).colorScheme;\n    final Color oddItemColor = colorScheme.primary.withOpacity(0.05);\n    final Color evenItemColor = colorScheme.primary.withOpacity(0.15);\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('AppBar Demo'),\n        scrolledUnderElevation: scrolledUnderElevation,\n        shadowColor: shadowColor ? Theme.of(context).colorScheme.shadow : null,\n      ),\n      body: GridView.builder(\n        itemCount: _items.length,\n        padding: const EdgeInsets.all(8.0),\n        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 3,\n          childAspectRatio: 2.0,\n          mainAxisSpacing: 10.0,\n          crossAxisSpacing: 10.0,\n        ),\n        itemBuilder: (BuildContext context, int index) {\n          if (index == 0) {\n            return Center(\n              child: Text(\n                'Scroll to see the Appbar in effect.',\n                style: Theme.of(context).textTheme.labelLarge,\n                textAlign: TextAlign.center,\n              ),\n            );\n          }\n          return Container(\n            alignment: Alignment.center,\n            // tileColor: _items[index].isOdd ? oddItemColor : evenItemColor,\n            decoration: BoxDecoration(\n              borderRadius: BorderRadius.circular(20.0),\n              color: _items[index].isOdd ? oddItemColor : evenItemColor,\n            ),\n            child: Text('Item $index'),\n          );\n        },\n      ),\n      bottomNavigationBar: BottomAppBar(\n        child: Padding(\n          padding: const EdgeInsets.all(8),\n          child: OverflowBar(\n            overflowAlignment: OverflowBarAlignment.center,\n            alignment: MainAxisAlignment.center,\n            overflowSpacing: 5.0,\n            children: <Widget>[\n              ElevatedButton.icon(\n                onPressed: () {\n                  setState(() {\n                    shadowColor = !shadowColor;\n                  });\n                },\n                icon: Icon(\n                  shadowColor ? Icons.visibility_off : Icons.visibility,\n                ),\n                label: const Text('shadow color'),\n              ),\n              const SizedBox(width: 5),\n              ElevatedButton(\n                onPressed: () {\n                  if (scrolledUnderElevation == null) {\n                    setState(() {\n                      // Default elevation is 3.0, increment by 1.0.\n                      scrolledUnderElevation = 4.0;\n                    });\n                  } else {\n                    setState(() {\n                      scrolledUnderElevation = scrolledUnderElevation! + 1.0;\n                    });\n                  }\n                },\n                child: Text(\n                  'scrolledUnderElevation: ${scrolledUnderElevation ?? 'default'}',\n                ),\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [AppBar].\n\nvoid main() => runApp(const AppBarApp());\n\nclass AppBarApp extends StatelessWidget {\n  const AppBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: AppBarExample(),\n    );\n  }\n}\n\nclass AppBarExample extends StatelessWidget {\n  const AppBarExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('AppBar Demo'),\n        actions: <Widget>[\n          IconButton(\n            icon: const Icon(Icons.add_alert),\n            tooltip: 'Show Snackbar',\n            onPressed: () {\n              ScaffoldMessenger.of(context).showSnackBar(\n                  const SnackBar(content: Text('This is a snackbar')));\n            },\n          ),\n          IconButton(\n            icon: const Icon(Icons.navigate_next),\n            tooltip: 'Go to the next page',\n            onPressed: () {\n              Navigator.push(context, MaterialPageRoute<void>(\n                builder: (BuildContext context) {\n                  return Scaffold(\n                    appBar: AppBar(\n                      title: const Text('Next page'),\n                    ),\n                    body: const Center(\n                      child: Text(\n                        'This is the next page',\n                        style: TextStyle(fontSize: 24),\n                      ),\n                    ),\n                  );\n                },\n              ));\n            },\n          ),\n        ],\n      ),\n      body: const Center(\n        child: Text(\n          'This is the home page',\n          style: TextStyle(fontSize: 24),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Autocomplete-class.html",
  "title": "Autocomplete class - material library - Dart API",
  "documentation_content": "Autocomplete class - material library - Dart API\nmenu\nFlutter\nmaterial\nAutocomplete<T extends Object> class\nAutocomplete\nbrightness_4\nbrightness_5\ndescription\nAutocomplete<T extends Object> class\nA widget for helping the user make a selection by entering some text and\nchoosing from among a list of options.\nThe user's text input is received in a field built with the\nfieldViewBuilder parameter. The options to be displayed are determined\nusing optionsBuilder and rendered with optionsViewBuilder.\nThis example shows how to create a very basic Autocomplete widget using the\ndefault UI.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Autocomplete.1 mysample\nThis example shows how to create an Autocomplete widget with a custom type.\nTry searching with text from the name or email field.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Autocomplete.2 mysample\nThis example shows how to create an Autocomplete widget whose options are\nfetched over the network.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Autocomplete.3 mysample\nThis example shows how to create an Autocomplete widget whose options are\nfetched over the network. It uses debouncing to wait to perform the network\nrequest until after the user finishes typing.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Autocomplete.4 mysample\nThis example shows how to create an Autocomplete widget whose options are\nfetched over the network. It includes both debouncing and error handling, so\nthat failed network requests show an error to the user and can be recovered\nfrom. Try toggling the network Switch widget to simulate going offline.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Autocomplete.5 mysample\nSee also:\nRawAutocomplete, which is what Autocomplete is built upon, and which\ncontains more detailed examples.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nAutocomplete\nConstructors\nAutocomplete({Key? key, required AutocompleteOptionsBuilder<T> optionsBuilder, AutocompleteOptionToString<T> displayStringForOption = RawAutocomplete.defaultStringForOption, AutocompleteFieldViewBuilder fieldViewBuilder = _defaultFieldViewBuilder, AutocompleteOnSelected<T>? onSelected, double optionsMaxHeight = 200.0, AutocompleteOptionsViewBuilder<T>? optionsViewBuilder, OptionsViewOpenDirection optionsViewOpenDirection = OptionsViewOpenDirection.down, TextEditingValue? initialValue})\nCreates an instance of Autocomplete.\nconst\nProperties\ndisplayStringForOption\n\u2192 AutocompleteOptionToString<T>\nReturns the string to display in the field when the option is selected.\nfinal\nfieldViewBuilder\n\u2192 AutocompleteFieldViewBuilder\nBuilds the field whose input is used to get the options.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninitialValue\n\u2192 TextEditingValue?\nThe initial value to use for the text field.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonSelected\n\u2192 AutocompleteOnSelected<T>?\nCalled when an option is selected by the user.\nfinal\noptionsBuilder\n\u2192 AutocompleteOptionsBuilder<T>\nA function that returns the current selectable options objects given the\ncurrent TextEditingValue.\nfinal\noptionsMaxHeight\n\u2192 double\nThe maximum height used for the default Material options list widget.\nfinal\noptionsViewBuilder\n\u2192 AutocompleteOptionsViewBuilder<T>?\nBuilds the selectable options widgets from a list of options objects.\nfinal\noptionsViewOpenDirection\n\u2192 OptionsViewOpenDirection\nThe direction in which to open the options-view overlay.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nAutocomplete<T extends Object> class",
  "code_examples": [
   "import 'dart:async';\n\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [Autocomplete] that demonstrates fetching the\n/// options asynchronously and debouncing the network calls.\n\nconst Duration fakeAPIDuration = Duration(seconds: 1);\nconst Duration debounceDuration = Duration(milliseconds: 500);\n\nvoid main() => runApp(const AutocompleteExampleApp());\n\nclass AutocompleteExampleApp extends StatelessWidget {\n  const AutocompleteExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Autocomplete - async and debouncing'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                  'Type below to autocomplete the following possible results: ${_FakeAPI._kOptions}.'),\n              const _AsyncAutocomplete(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass _AsyncAutocomplete extends StatefulWidget {\n  const _AsyncAutocomplete();\n\n  @override\n  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();\n}\n\nclass _AsyncAutocompleteState extends State<_AsyncAutocomplete> {\n  // The query currently being searched for. If null, there is no pending\n  // request.\n  String? _currentQuery;\n\n  // The most recent options received from the API.\n  late Iterable<String> _lastOptions = <String>[];\n\n  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;\n\n  // Calls the \"remote\" API to search with the given query. Returns null when\n  // the call has been made obsolete.\n  Future<Iterable<String>?> _search(String query) async {\n    _currentQuery = query;\n\n    // In a real application, there should be some error handling here.\n    final Iterable<String> options = await _FakeAPI.search(_currentQuery!);\n\n    // If another search happened after this one, throw away these options.\n    if (_currentQuery != query) {\n      return null;\n    }\n    _currentQuery = null;\n\n    return options;\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Autocomplete<String>(\n      optionsBuilder: (TextEditingValue textEditingValue) async {\n        final Iterable<String>? options =\n            await _debouncedSearch(textEditingValue.text);\n        if (options == null) {\n          return _lastOptions;\n        }\n        _lastOptions = options;\n        return options;\n      },\n      onSelected: (String selection) {\n        debugPrint('You just selected $selection');\n      },\n    );\n  }\n}\n\n// Mimics a remote API.\nclass _FakeAPI {\n  static const List<String> _kOptions = <String>[\n    'aardvark',\n    'bobcat',\n    'chameleon',\n  ];\n\n  // Searches the options, but injects a fake \"network\" delay.\n  static Future<Iterable<String>> search(String query) async {\n    await Future<void>.delayed(fakeAPIDuration); // Fake 1 second delay.\n    if (query == '') {\n      return const Iterable<String>.empty();\n    }\n    return _kOptions.where((String option) {\n      return option.contains(query.toLowerCase());\n    });\n  }\n}\n\ntypedef _Debounceable<S, T> = Future<S?> Function(T parameter);\n\n/// Returns a new function that is a debounced version of the given function.\n///\n/// This means that the original function will be called only after no calls\n/// have been made for the given Duration.\n_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {\n  _DebounceTimer? debounceTimer;\n\n  return (T parameter) async {\n    if (debounceTimer != null && !debounceTimer!.isCompleted) {\n      debounceTimer!.cancel();\n    }\n    debounceTimer = _DebounceTimer();\n    try {\n      await debounceTimer!.future;\n    } catch (error) {\n      if (error is _CancelException) {\n        return null;\n      }\n      rethrow;\n    }\n    return function(parameter);\n  };\n}\n\n// A wrapper around Timer used for debouncing.\nclass _DebounceTimer {\n  _DebounceTimer() {\n    _timer = Timer(debounceDuration, _onComplete);\n  }\n\n  late final Timer _timer;\n  final Completer<void> _completer = Completer<void>();\n\n  void _onComplete() {\n    _completer.complete();\n  }\n\n  Future<void> get future => _completer.future;\n\n  bool get isCompleted => _completer.isCompleted;\n\n  void cancel() {\n    _timer.cancel();\n    _completer.completeError(const _CancelException());\n  }\n}\n\n// An exception indicating that the timer was canceled.\nclass _CancelException implements Exception {\n  const _CancelException();\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Autocomplete].\n\nvoid main() => runApp(const AutocompleteExampleApp());\n\nclass AutocompleteExampleApp extends StatelessWidget {\n  const AutocompleteExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Autocomplete Basic'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                  'Type below to autocomplete the following possible results: ${AutocompleteBasicExample._kOptions}.'),\n              const AutocompleteBasicExample(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass AutocompleteBasicExample extends StatelessWidget {\n  const AutocompleteBasicExample({super.key});\n\n  static const List<String> _kOptions = <String>[\n    'aardvark',\n    'bobcat',\n    'chameleon',\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return Autocomplete<String>(\n      optionsBuilder: (TextEditingValue textEditingValue) {\n        if (textEditingValue.text == '') {\n          return const Iterable<String>.empty();\n        }\n        return _kOptions.where((String option) {\n          return option.contains(textEditingValue.text.toLowerCase());\n        });\n      },\n      onSelected: (String selection) {\n        debugPrint('You just selected $selection');\n      },\n    );\n  }\n}\n",
   "import 'dart:async';\n\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for [Autocomplete] that demonstrates fetching the\n/// options asynchronously and debouncing the network calls, including handling\n/// network errors.\n\nvoid main() => runApp(const AutocompleteExampleApp());\n\nconst Duration fakeAPIDuration = Duration(seconds: 1);\nconst Duration debounceDuration = Duration(milliseconds: 500);\n\nclass AutocompleteExampleApp extends StatelessWidget {\n  const AutocompleteExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text(\n              'Autocomplete - async, debouncing, and network errors'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                  'Type below to autocomplete the following possible results: ${_FakeAPI._kOptions}.'),\n              const SizedBox(height: 32.0),\n              const _AsyncAutocomplete(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass _AsyncAutocomplete extends StatefulWidget {\n  const _AsyncAutocomplete();\n\n  @override\n  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();\n}\n\nclass _AsyncAutocompleteState extends State<_AsyncAutocomplete> {\n  // The query currently being searched for. If null, there is no pending\n  // request.\n  String? _currentQuery;\n\n  // The most recent options received from the API.\n  late Iterable<String> _lastOptions = <String>[];\n\n  late final _Debounceable<Iterable<String>?, String> _debouncedSearch;\n\n  // Whether to consider the fake network to be offline.\n  bool _networkEnabled = true;\n\n  // A network error was recieved on the most recent query.\n  bool _networkError = false;\n\n  // Calls the \"remote\" API to search with the given query. Returns null when\n  // the call has been made obsolete.\n  Future<Iterable<String>?> _search(String query) async {\n    _currentQuery = query;\n\n    late final Iterable<String> options;\n    try {\n      options = await _FakeAPI.search(_currentQuery!, _networkEnabled);\n    } catch (error) {\n      if (error is _NetworkException) {\n        setState(() {\n          _networkError = true;\n        });\n        return <String>[];\n      }\n      rethrow;\n    }\n\n    // If another search happened after this one, throw away these options.\n    if (_currentQuery != query) {\n      return null;\n    }\n    _currentQuery = null;\n\n    return options;\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _debouncedSearch = _debounce<Iterable<String>?, String>(_search);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: <Widget>[\n        Text(\n          _networkEnabled\n              ? 'Network is on, toggle to induce network errors.'\n              : 'Network is off, toggle to allow requests to go through.',\n        ),\n        Switch(\n          value: _networkEnabled,\n          onChanged: (bool? value) {\n            setState(() {\n              _networkEnabled = !_networkEnabled;\n            });\n          },\n        ),\n        const SizedBox(\n          height: 32.0,\n        ),\n        Autocomplete<String>(\n          fieldViewBuilder: (BuildContext context,\n              TextEditingController controller,\n              FocusNode focusNode,\n              VoidCallback onFieldSubmitted) {\n            return TextFormField(\n              decoration: InputDecoration(\n                errorText:\n                    _networkError ? 'Network error, please try again.' : null,\n              ),\n              controller: controller,\n              focusNode: focusNode,\n              onFieldSubmitted: (String value) {\n                onFieldSubmitted();\n              },\n            );\n          },\n          optionsBuilder: (TextEditingValue textEditingValue) async {\n            setState(() {\n              _networkError = false;\n            });\n            final Iterable<String>? options =\n                await _debouncedSearch(textEditingValue.text);\n            if (options == null) {\n              return _lastOptions;\n            }\n            _lastOptions = options;\n            return options;\n          },\n          onSelected: (String selection) {\n            debugPrint('You just selected $selection');\n          },\n        ),\n      ],\n    );\n  }\n}\n\n// Mimics a remote API.\nclass _FakeAPI {\n  static const List<String> _kOptions = <String>[\n    'aardvark',\n    'bobcat',\n    'chameleon',\n  ];\n\n  // Searches the options, but injects a fake \"network\" delay.\n  static Future<Iterable<String>> search(\n      String query, bool networkEnabled) async {\n    await Future<void>.delayed(fakeAPIDuration); // Fake 1 second delay.\n    if (!networkEnabled) {\n      throw const _NetworkException();\n    }\n    if (query == '') {\n      return const Iterable<String>.empty();\n    }\n    return _kOptions.where((String option) {\n      return option.contains(query.toLowerCase());\n    });\n  }\n}\n\ntypedef _Debounceable<S, T> = Future<S?> Function(T parameter);\n\n/// Returns a new function that is a debounced version of the given function.\n///\n/// This means that the original function will be called only after no calls\n/// have been made for the given Duration.\n_Debounceable<S, T> _debounce<S, T>(_Debounceable<S?, T> function) {\n  _DebounceTimer? debounceTimer;\n\n  return (T parameter) async {\n    if (debounceTimer != null && !debounceTimer!.isCompleted) {\n      debounceTimer!.cancel();\n    }\n    debounceTimer = _DebounceTimer();\n    try {\n      await debounceTimer!.future;\n    } catch (error) {\n      if (error is _CancelException) {\n        return null;\n      }\n      rethrow;\n    }\n    return function(parameter);\n  };\n}\n\n// A wrapper around Timer used for debouncing.\nclass _DebounceTimer {\n  _DebounceTimer() {\n    _timer = Timer(debounceDuration, _onComplete);\n  }\n\n  late final Timer _timer;\n  final Completer<void> _completer = Completer<void>();\n\n  void _onComplete() {\n    _completer.complete();\n  }\n\n  Future<void> get future => _completer.future;\n\n  bool get isCompleted => _completer.isCompleted;\n\n  void cancel() {\n    _timer.cancel();\n    _completer.completeError(const _CancelException());\n  }\n}\n\n// An exception indicating that the timer was canceled.\nclass _CancelException implements Exception {\n  const _CancelException();\n}\n\n// An exception indicating that a network request has failed.\nclass _NetworkException implements Exception {\n  const _NetworkException();\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Autocomplete].\n\nvoid main() => runApp(const AutocompleteExampleApp());\n\nclass AutocompleteExampleApp extends StatelessWidget {\n  const AutocompleteExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Autocomplete Basic User'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                  'Type below to autocomplete the following possible results: ${AutocompleteBasicUserExample._userOptions}.'),\n              const AutocompleteBasicUserExample(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\n@immutable\nclass User {\n  const User({\n    required this.email,\n    required this.name,\n  });\n\n  final String email;\n  final String name;\n\n  @override\n  String toString() {\n    return '$name, $email';\n  }\n\n  @override\n  bool operator ==(Object other) {\n    if (other.runtimeType != runtimeType) {\n      return false;\n    }\n    return other is User && other.name == name && other.email == email;\n  }\n\n  @override\n  int get hashCode => Object.hash(email, name);\n}\n\nclass AutocompleteBasicUserExample extends StatelessWidget {\n  const AutocompleteBasicUserExample({super.key});\n\n  static const List<User> _userOptions = <User>[\n    User(name: 'Alice', email: 'alice@example.com'),\n    User(name: 'Bob', email: 'bob@example.com'),\n    User(name: 'Charlie', email: 'charlie123@gmail.com'),\n  ];\n\n  static String _displayStringForOption(User option) => option.name;\n\n  @override\n  Widget build(BuildContext context) {\n    return Autocomplete<User>(\n      displayStringForOption: _displayStringForOption,\n      optionsBuilder: (TextEditingValue textEditingValue) {\n        if (textEditingValue.text == '') {\n          return const Iterable<User>.empty();\n        }\n        return _userOptions.where((User option) {\n          return option\n              .toString()\n              .contains(textEditingValue.text.toLowerCase());\n        });\n      },\n      onSelected: (User selection) {\n        debugPrint('You just selected ${_displayStringForOption(selection)}');\n      },\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Autocomplete] that shows how to fetch the options\n/// from a remote API.\n\nconst Duration fakeAPIDuration = Duration(seconds: 1);\n\nvoid main() => runApp(const AutocompleteExampleApp());\n\nclass AutocompleteExampleApp extends StatelessWidget {\n  const AutocompleteExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Autocomplete - async'),\n        ),\n        body: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: <Widget>[\n              Text(\n                  'Type below to autocomplete the following possible results: ${_FakeAPI._kOptions}.'),\n              const _AsyncAutocomplete(),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass _AsyncAutocomplete extends StatefulWidget {\n  const _AsyncAutocomplete();\n\n  @override\n  State<_AsyncAutocomplete> createState() => _AsyncAutocompleteState();\n}\n\nclass _AsyncAutocompleteState extends State<_AsyncAutocomplete> {\n  // The query currently being searched for. If null, there is no pending\n  // request.\n  String? _searchingWithQuery;\n\n  // The most recent options received from the API.\n  late Iterable<String> _lastOptions = <String>[];\n\n  @override\n  Widget build(BuildContext context) {\n    return Autocomplete<String>(\n      optionsBuilder: (TextEditingValue textEditingValue) async {\n        _searchingWithQuery = textEditingValue.text;\n        final Iterable<String> options =\n            await _FakeAPI.search(_searchingWithQuery!);\n\n        // If another search happened after this one, throw away these options.\n        // Use the previous options intead and wait for the newer request to\n        // finish.\n        if (_searchingWithQuery != textEditingValue.text) {\n          return _lastOptions;\n        }\n\n        _lastOptions = options;\n        return options;\n      },\n      onSelected: (String selection) {\n        debugPrint('You just selected $selection');\n      },\n    );\n  }\n}\n\n// Mimics a remote API.\nclass _FakeAPI {\n  static const List<String> _kOptions = <String>[\n    'aardvark',\n    'bobcat',\n    'chameleon',\n  ];\n\n  // Searches the options, but injects a fake \"network\" delay.\n  static Future<Iterable<String>> search(String query) async {\n    await Future<void>.delayed(fakeAPIDuration); // Fake 1 second delay.\n    if (query == '') {\n      return const Iterable<String>.empty();\n    }\n    return _kOptions.where((String option) {\n      return option.contains(query.toLowerCase());\n    });\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/BottomAppBar-class.html",
  "title": "BottomAppBar class - material library - Dart API",
  "documentation_content": "BottomAppBar class - material library - Dart API\nmenu\nFlutter\nmaterial\nBottomAppBar class\nBottomAppBar\nbrightness_4\nbrightness_5\ndescription\nBottomAppBar class\nA container that is typically used with Scaffold.bottomNavigationBar.\nTypically used with a Scaffold and a FloatingActionButton.\nlink\ncontent_copy\nScaffold(\nbottomNavigationBar: BottomAppBar(\ncolor: Colors.white,\nchild: bottomAppBarContents,\n),\nfloatingActionButton: const FloatingActionButton(onPressed: null),\n)\nThis example shows the BottomAppBar, which can be configured to have a notch using the\nBottomAppBar.shape property. This also includes an optional FloatingActionButton, which illustrates\nthe FloatingActionButtonLocations in relation to the BottomAppBar.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.BottomAppBar.2 mysample\nThis example shows Material 3 BottomAppBar with its expected look and behaviors.\nThis also includes an optional FloatingActionButton, which illustrates\nthe FloatingActionButtonLocation.endContained.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.BottomAppBar.3 mysample\nSee also:\nNotchedShape which calculates the notch for a notched BottomAppBar.\nFloatingActionButton which the BottomAppBar makes a notch for.\nAppBar for a toolbar that is shown at the top of the screen.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nBottomAppBar\nConstructors\nBottomAppBar({Key? key, Color? color, double? elevation, NotchedShape? shape, Clip clipBehavior = Clip.none, double notchMargin = 4.0, Widget? child, EdgeInsetsGeometry? padding, Color? surfaceTintColor, Color? shadowColor, double? height})\nCreates a bottom application bar.\nconst\nProperties\nchild\n\u2192 Widget?\nThe widget below this widget in the tree.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncolor\n\u2192 Color?\nThe bottom app bar's background color.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate at which to place this bottom app bar relative to its\nparent.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheight\n\u2192 double?\nThe double value used to indicate the height of the BottomAppBar.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nnotchMargin\n\u2192 double\nThe margin between the FloatingActionButton and the BottomAppBar's\nnotch.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe amount of space to surround the child inside the bounds of the BottomAppBar.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshadowColor\n\u2192 Color?\nThe color of the shadow below the app bar.\nfinal\nshape\n\u2192 NotchedShape?\nThe notch that is made for the floating action button.\nfinal\nsurfaceTintColor\n\u2192 Color?\nA custom color for the Material 3 surface-tint elevation effect.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<StatefulWidget>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nBottomAppBar class",
  "code_examples": [
   "import 'package:flutter/material.dart';\nimport 'package:flutter/rendering.dart';\n\n/// Flutter code sample for [BottomAppBar] with Material 3.\n\nvoid main() {\n  runApp(const BottomAppBarDemo());\n}\n\nclass BottomAppBarDemo extends StatefulWidget {\n  const BottomAppBarDemo({super.key});\n\n  @override\n  State createState() => _BottomAppBarDemoState();\n}\n\nclass _BottomAppBarDemoState extends State<BottomAppBarDemo> {\n  static const List<Color> colors = <Color>[\n    Colors.yellow,\n    Colors.orange,\n    Colors.pink,\n    Colors.purple,\n    Colors.cyan,\n  ];\n\n  static final List<Widget> items = List<Widget>.generate(\n    colors.length,\n    (int index) => Container(color: colors[index], height: 150.0),\n  ).reversed.toList();\n\n  late ScrollController _controller;\n  bool _showFab = true;\n  bool _isElevated = true;\n  bool _isVisible = true;\n\n  FloatingActionButtonLocation get _fabLocation => _isVisible\n      ? FloatingActionButtonLocation.endContained\n      : FloatingActionButtonLocation.endFloat;\n\n  void _listen() {\n    final ScrollDirection direction = _controller.position.userScrollDirection;\n    if (direction == ScrollDirection.forward) {\n      _show();\n    } else if (direction == ScrollDirection.reverse) {\n      _hide();\n    }\n  }\n\n  void _show() {\n    if (!_isVisible) {\n      setState(() => _isVisible = true);\n    }\n  }\n\n  void _hide() {\n    if (_isVisible) {\n      setState(() => _isVisible = false);\n    }\n  }\n\n  void _onShowFabChanged(bool value) {\n    setState(() {\n      _showFab = value;\n    });\n  }\n\n  void _onElevatedChanged(bool value) {\n    setState(() {\n      _isElevated = value;\n    });\n  }\n\n  void _addNewItem() {\n    setState(() {\n      items.insert(\n        0,\n        Container(color: colors[items.length % 5], height: 150.0),\n      );\n    });\n  }\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = ScrollController();\n    _controller.addListener(_listen);\n  }\n\n  @override\n  void dispose() {\n    _controller.removeListener(_listen);\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('Bottom App Bar Demo'),\n        ),\n        body: Column(\n          children: <Widget>[\n            SwitchListTile(\n              title: const Text('Floating Action Button'),\n              value: _showFab,\n              onChanged: _onShowFabChanged,\n            ),\n            SwitchListTile(\n              title: const Text('Bottom App Bar Elevation'),\n              value: _isElevated,\n              onChanged: _onElevatedChanged,\n            ),\n            Expanded(\n              child: ListView(\n                controller: _controller,\n                children: items.toList(),\n              ),\n            ),\n          ],\n        ),\n        floatingActionButton: _showFab\n            ? FloatingActionButton(\n                onPressed: _addNewItem,\n                tooltip: 'Add New Item',\n                elevation: _isVisible ? 0.0 : null,\n                child: const Icon(Icons.add),\n              )\n            : null,\n        floatingActionButtonLocation: _fabLocation,\n        bottomNavigationBar:\n            _DemoBottomAppBar(isElevated: _isElevated, isVisible: _isVisible),\n      ),\n    );\n  }\n}\n\nclass _DemoBottomAppBar extends StatelessWidget {\n  const _DemoBottomAppBar({\n    required this.isElevated,\n    required this.isVisible,\n  });\n\n  final bool isElevated;\n  final bool isVisible;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedContainer(\n      duration: const Duration(milliseconds: 200),\n      height: isVisible ? 80.0 : 0,\n      child: BottomAppBar(\n        elevation: isElevated ? null : 0.0,\n        child: Row(\n          children: <Widget>[\n            IconButton(\n              tooltip: 'Open popup menu',\n              icon: const Icon(Icons.more_vert),\n              onPressed: () {\n                final SnackBar snackBar = SnackBar(\n                  content: const Text('Yay! A SnackBar!'),\n                  action: SnackBarAction(\n                    label: 'Undo',\n                    onPressed: () {},\n                  ),\n                );\n\n                // Find the ScaffoldMessenger in the widget tree\n                // and use it to show a SnackBar.\n                ScaffoldMessenger.of(context).showSnackBar(snackBar);\n              },\n            ),\n            IconButton(\n              tooltip: 'Search',\n              icon: const Icon(Icons.search),\n              onPressed: () {},\n            ),\n            IconButton(\n              tooltip: 'Favorite',\n              icon: const Icon(Icons.favorite),\n              onPressed: () {},\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [BottomAppBar].\n\nvoid main() {\n  runApp(const BottomAppBarDemo());\n}\n\nclass BottomAppBarDemo extends StatefulWidget {\n  const BottomAppBarDemo({super.key});\n\n  @override\n  State createState() => _BottomAppBarDemoState();\n}\n\nclass _BottomAppBarDemoState extends State<BottomAppBarDemo> {\n  bool _showFab = true;\n  bool _showNotch = true;\n  FloatingActionButtonLocation _fabLocation =\n      FloatingActionButtonLocation.endDocked;\n\n  void _onShowNotchChanged(bool value) {\n    setState(() {\n      _showNotch = value;\n    });\n  }\n\n  void _onShowFabChanged(bool value) {\n    setState(() {\n      _showFab = value;\n    });\n  }\n\n  void _onFabLocationChanged(FloatingActionButtonLocation? value) {\n    setState(() {\n      _fabLocation = value ?? FloatingActionButtonLocation.endDocked;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n          automaticallyImplyLeading: false,\n          title: const Text('Bottom App Bar Demo'),\n        ),\n        body: ListView(\n          padding: const EdgeInsets.only(bottom: 88),\n          children: <Widget>[\n            SwitchListTile(\n              title: const Text(\n                'Floating Action Button',\n              ),\n              value: _showFab,\n              onChanged: _onShowFabChanged,\n            ),\n            SwitchListTile(\n              title: const Text('Notch'),\n              value: _showNotch,\n              onChanged: _onShowNotchChanged,\n            ),\n            const Padding(\n              padding: EdgeInsets.all(16),\n              child: Text('Floating action button position'),\n            ),\n            RadioListTile<FloatingActionButtonLocation>(\n              title: const Text('Docked - End'),\n              value: FloatingActionButtonLocation.endDocked,\n              groupValue: _fabLocation,\n              onChanged: _onFabLocationChanged,\n            ),\n            RadioListTile<FloatingActionButtonLocation>(\n              title: const Text('Docked - Center'),\n              value: FloatingActionButtonLocation.centerDocked,\n              groupValue: _fabLocation,\n              onChanged: _onFabLocationChanged,\n            ),\n            RadioListTile<FloatingActionButtonLocation>(\n              title: const Text('Floating - End'),\n              value: FloatingActionButtonLocation.endFloat,\n              groupValue: _fabLocation,\n              onChanged: _onFabLocationChanged,\n            ),\n            RadioListTile<FloatingActionButtonLocation>(\n              title: const Text('Floating - Center'),\n              value: FloatingActionButtonLocation.centerFloat,\n              groupValue: _fabLocation,\n              onChanged: _onFabLocationChanged,\n            ),\n          ],\n        ),\n        floatingActionButton: _showFab\n            ? FloatingActionButton(\n                onPressed: () {},\n                tooltip: 'Create',\n                child: const Icon(Icons.add),\n              )\n            : null,\n        floatingActionButtonLocation: _fabLocation,\n        bottomNavigationBar: _DemoBottomAppBar(\n          fabLocation: _fabLocation,\n          shape: _showNotch ? const CircularNotchedRectangle() : null,\n        ),\n      ),\n    );\n  }\n}\n\nclass _DemoBottomAppBar extends StatelessWidget {\n  const _DemoBottomAppBar({\n    this.fabLocation = FloatingActionButtonLocation.endDocked,\n    this.shape = const CircularNotchedRectangle(),\n  });\n\n  final FloatingActionButtonLocation fabLocation;\n  final NotchedShape? shape;\n\n  static final List<FloatingActionButtonLocation> centerLocations =\n      <FloatingActionButtonLocation>[\n    FloatingActionButtonLocation.centerDocked,\n    FloatingActionButtonLocation.centerFloat,\n  ];\n\n  @override\n  Widget build(BuildContext context) {\n    return BottomAppBar(\n      shape: shape,\n      color: Colors.blue,\n      child: IconTheme(\n        data: IconThemeData(color: Theme.of(context).colorScheme.onPrimary),\n        child: Row(\n          children: <Widget>[\n            IconButton(\n              tooltip: 'Open navigation menu',\n              icon: const Icon(Icons.menu),\n              onPressed: () {},\n            ),\n            if (centerLocations.contains(fabLocation)) const Spacer(),\n            IconButton(\n              tooltip: 'Search',\n              icon: const Icon(Icons.search),\n              onPressed: () {},\n            ),\n            IconButton(\n              tooltip: 'Favorite',\n              icon: const Icon(Icons.favorite),\n              onPressed: () {},\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/BottomNavigationBar-class.html",
  "title": "BottomNavigationBar class - material library - Dart API",
  "documentation_content": "BottomNavigationBar class - material library - Dart API\nmenu\nFlutter\nmaterial\nBottomNavigationBar class\nBottomNavigationBar\nbrightness_4\nbrightness_5\ndescription\nBottomNavigationBar class\nA material widget that's displayed at the bottom of an app for selecting\namong a small number of views, typically between three and five.\nThere is an updated version of this component, NavigationBar, that's\npreferred for new applications and applications that are configured\nfor Material 3 (see ThemeData.useMaterial3).\nThe bottom navigation bar consists of multiple items in the form of\ntext labels, icons, or both, laid out on top of a piece of material. It\nprovides quick navigation between the top-level views of an app. For larger\nscreens, side navigation may be a better fit.\nA bottom navigation bar is usually used in conjunction with a Scaffold,\nwhere it is provided as the Scaffold.bottomNavigationBar argument.\nThe bottom navigation bar's type changes how its items are displayed.\nIf not specified, then it's automatically set to\nBottomNavigationBarType.fixed when there are less than four items, and\nBottomNavigationBarType.shifting otherwise.\nThe length of items must be at least two and each item's icon and\nlabel must not be null.\nBottomNavigationBarType.fixed, the default when there are less than\nfour items. The selected item is rendered with the\nselectedItemColor if it's non-null, otherwise the theme's\nColorScheme.primary color is used for Brightness.light themes\nand ColorScheme.secondary for Brightness.dark themes.\nIf backgroundColor is null, The\nnavigation bar's background color defaults to the Material background\ncolor, ThemeData.canvasColor (essentially opaque white).\nBottomNavigationBarType.shifting, the default when there are four\nor more items. If selectedItemColor is null, all items are rendered\nin white. The navigation bar's background color is the same as the\nBottomNavigationBarItem.backgroundColor of the selected item. In this\ncase it's assumed that each item will have a different background color\nand that background color will contrast well with white.\nUpdating to NavigationBar\nThe NavigationBar widget's visuals\nare a little bit different, see the Material 3 spec at\nm3.material.io/components/navigation-bar/overview for\nmore details.\nThe NavigationBar widget's API is also slightly different.\nTo update from BottomNavigationBar to NavigationBar, you will\nneed to make the following changes.\nInstead of using BottomNavigationBar.items, which\ntakes a list of BottomNavigationBarItems, use\nNavigationBar.destinations, which takes a list of widgets.\nUsually, you use a list of NavigationDestination widgets.\nJust like BottomNavigationBarItems, NavigationDestinations\nhave a label and icon field.\nInstead of using BottomNavigationBar.onTap,\nuse NavigationBar.onDestinationSelected, which is also\na callback that is called when the user taps on a\nnavigation bar item.\nInstead of using BottomNavigationBar.currentIndex,\nuse NavigationBar.selectedIndex, which is also an integer\nthat represents the index of the selected destination.\nYou may also need to make changes to the styling of the\nNavigationBar, see the properties in the NavigationBar\nconstructor for more details.\nUsing BottomNavigationBar\nThis example shows a BottomNavigationBar as it is used within a Scaffold\nwidget. The BottomNavigationBar has three BottomNavigationBarItem\nwidgets, which means it defaults to BottomNavigationBarType.fixed, and\nthe currentIndex is set to index 0. The selected item is\namber. The _onItemTapped function changes the selected item's index\nand displays a corresponding message in the center of the Scaffold.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.BottomNavigationBar.1 mysample\nThis example shows how you would migrate the above BottomNavigationBar\nto the new NavigationBar.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.BottomNavigationBar.2 mysample\nThis example shows a BottomNavigationBar as it is used within a Scaffold\nwidget. The BottomNavigationBar has four BottomNavigationBarItem\nwidgets, which means it defaults to BottomNavigationBarType.shifting, and\nthe currentIndex is set to index 0. The selected item is amber in color.\nWith each BottomNavigationBarItem widget, backgroundColor property is\nalso defined, which changes the background color of BottomNavigationBar,\nwhen that item is selected. The _onItemTapped function changes the\nselected item's index and displays a corresponding message in the center of\nthe Scaffold.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.BottomNavigationBar.3 mysample\nThis example shows BottomNavigationBar used in a Scaffold Widget with\ndifferent interaction patterns. Tapping twice on the first BottomNavigationBarItem\nuses the ScrollController to animate the ListView to the top. The second\nBottomNavigationBarItem shows a Modal Dialog.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.BottomNavigationBar.4 mysample\nSee also:\nBottomNavigationBarItem\nScaffold\nmaterial.io/design/components/bottom-navigation.html\nNavigationBar, this widget's replacement in Material Design 3.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nBottomNavigationBar\nConstructors\nBottomNavigationBar({Key? key, required List<BottomNavigationBarItem> items, ValueChanged<int>? onTap, int currentIndex = 0, double? elevation, BottomNavigationBarType? type, Color? fixedColor, Color? backgroundColor, double iconSize = 24.0, Color? selectedItemColor, Color? unselectedItemColor, IconThemeData? selectedIconTheme, IconThemeData? unselectedIconTheme, double selectedFontSize = 14.0, double unselectedFontSize = 12.0, TextStyle? selectedLabelStyle, TextStyle? unselectedLabelStyle, bool? showSelectedLabels, bool? showUnselectedLabels, MouseCursor? mouseCursor, bool? enableFeedback, BottomNavigationBarLandscapeLayout? landscapeLayout, bool useLegacyColorScheme = true})\nCreates a bottom navigation bar which is typically used as a\nScaffold's Scaffold.bottomNavigationBar argument.\nProperties\nbackgroundColor\n\u2192 Color?\nThe color of the BottomNavigationBar itself.\nfinal\ncurrentIndex\n\u2192 int\nThe index into items for the current active BottomNavigationBarItem.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate of this BottomNavigationBar.\nfinal\nenableFeedback\n\u2192 bool?\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinal\nfixedColor\n\u2192 Color?\nThe value of selectedItemColor.\nread-only\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\niconSize\n\u2192 double\nThe size of all of the BottomNavigationBarItem icons.\nfinal\nitems\n\u2192 List<BottomNavigationBarItem>\nDefines the appearance of the button items that are arrayed within the\nbottom navigation bar.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nlandscapeLayout\n\u2192 BottomNavigationBarLandscapeLayout?\nThe arrangement of the bar's items when the enclosing\nMediaQueryData.orientation is Orientation.landscape.\nfinal\nmouseCursor\n\u2192 MouseCursor?\nThe cursor for a mouse pointer when it enters or is hovering over the\nitems.\nfinal\nonTap\n\u2192 ValueChanged<int>?\nCalled when one of the items is tapped.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselectedFontSize\n\u2192 double\nThe font size of the BottomNavigationBarItem labels when they are selected.\nfinal\nselectedIconTheme\n\u2192 IconThemeData?\nThe size, opacity, and color of the icon in the currently selected\nBottomNavigationBarItem.icon.\nfinal\nselectedItemColor\n\u2192 Color?\nThe color of the selected BottomNavigationBarItem.icon and\nBottomNavigationBarItem.label.\nfinal\nselectedLabelStyle\n\u2192 TextStyle?\nThe TextStyle of the BottomNavigationBarItem labels when they are\nselected.\nfinal\nshowSelectedLabels\n\u2192 bool?\nWhether the labels are shown for the selected BottomNavigationBarItem.\nfinal\nshowUnselectedLabels\n\u2192 bool?\nWhether the labels are shown for the unselected BottomNavigationBarItems.\nfinal\ntype\n\u2192 BottomNavigationBarType?\nDefines the layout and behavior of a BottomNavigationBar.\nfinal\nunselectedFontSize\n\u2192 double\nThe font size of the BottomNavigationBarItem labels when they are not\nselected.\nfinal\nunselectedIconTheme\n\u2192 IconThemeData?\nThe size, opacity, and color of the icon in the currently unselected\nBottomNavigationBarItem.icons.\nfinal\nunselectedItemColor\n\u2192 Color?\nThe color of the unselected BottomNavigationBarItem.icon and\nBottomNavigationBarItem.labels.\nfinal\nunselectedLabelStyle\n\u2192 TextStyle?\nThe TextStyle of the BottomNavigationBarItem labels when they are not\nselected.\nfinal\nuseLegacyColorScheme\n\u2192 bool\nThis flag is controlling how BottomNavigationBar is going to use\nthe colors provided by the selectedIconTheme, unselectedIconTheme,\nselectedItemColor, unselectedItemColor.\nThe default value is true as the new theming logic is a breaking change.\nTo opt-in the new theming logic set the flag to false\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<BottomNavigationBar>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nBottomNavigationBar class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [BottomNavigationBar].\n\nvoid main() => runApp(const BottomNavigationBarExampleApp());\n\nclass BottomNavigationBarExampleApp extends StatelessWidget {\n  const BottomNavigationBarExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: BottomNavigationBarExample(),\n    );\n  }\n}\n\nclass BottomNavigationBarExample extends StatefulWidget {\n  const BottomNavigationBarExample({super.key});\n\n  @override\n  State<BottomNavigationBarExample> createState() =>\n      _BottomNavigationBarExampleState();\n}\n\nclass _BottomNavigationBarExampleState\n    extends State<BottomNavigationBarExample> {\n  int _selectedIndex = 0;\n  static const TextStyle optionStyle =\n      TextStyle(fontSize: 30, fontWeight: FontWeight.bold);\n  static const List<Widget> _widgetOptions = <Widget>[\n    Text(\n      'Index 0: Home',\n      style: optionStyle,\n    ),\n    Text(\n      'Index 1: Business',\n      style: optionStyle,\n    ),\n    Text(\n      'Index 2: School',\n      style: optionStyle,\n    ),\n  ];\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('BottomNavigationBar Sample'),\n      ),\n      body: Center(\n        child: _widgetOptions.elementAt(_selectedIndex),\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(Icons.home),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.business),\n            label: 'Business',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.school),\n            label: 'School',\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: Colors.amber[800],\n        onTap: _onItemTapped,\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [BottomNavigationBar].\n\nvoid main() => runApp(const BottomNavigationBarExampleApp());\n\nclass BottomNavigationBarExampleApp extends StatelessWidget {\n  const BottomNavigationBarExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: BottomNavigationBarExample(),\n    );\n  }\n}\n\nclass BottomNavigationBarExample extends StatefulWidget {\n  const BottomNavigationBarExample({super.key});\n\n  @override\n  State<BottomNavigationBarExample> createState() =>\n      _BottomNavigationBarExampleState();\n}\n\nclass _BottomNavigationBarExampleState\n    extends State<BottomNavigationBarExample> {\n  int _selectedIndex = 0;\n  final ScrollController _homeController = ScrollController();\n\n  Widget _listViewBody() {\n    return ListView.separated(\n        controller: _homeController,\n        itemBuilder: (BuildContext context, int index) {\n          return Center(\n            child: Text(\n              'Item $index',\n            ),\n          );\n        },\n        separatorBuilder: (BuildContext context, int index) => const Divider(\n              thickness: 1,\n            ),\n        itemCount: 50);\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('BottomNavigationBar Sample'),\n      ),\n      body: _listViewBody(),\n      bottomNavigationBar: BottomNavigationBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(Icons.home),\n            label: 'Home',\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.open_in_new_rounded),\n            label: 'Open Dialog',\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: Colors.amber[800],\n        onTap: (int index) {\n          switch (index) {\n            case 0:\n              // only scroll to top when current index is selected.\n              if (_selectedIndex == index) {\n                _homeController.animateTo(\n                  0.0,\n                  duration: const Duration(milliseconds: 500),\n                  curve: Curves.easeOut,\n                );\n              }\n            case 1:\n              showModal(context);\n          }\n          setState(\n            () {\n              _selectedIndex = index;\n            },\n          );\n        },\n      ),\n    );\n  }\n\n  void showModal(BuildContext context) {\n    showDialog<void>(\n      context: context,\n      builder: (BuildContext context) => AlertDialog(\n        content: const Text('Example Dialog'),\n        actions: <TextButton>[\n          TextButton(\n            onPressed: () {\n              Navigator.pop(context);\n            },\n            child: const Text('Close'),\n          )\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [NavigationBar].\n\nvoid main() => runApp(const NavigationBarApp());\n\nclass NavigationBarApp extends StatelessWidget {\n  const NavigationBarApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const NavigationExample(),\n    );\n  }\n}\n\nclass NavigationExample extends StatefulWidget {\n  const NavigationExample({super.key});\n\n  @override\n  State<NavigationExample> createState() => _NavigationExampleState();\n}\n\nclass _NavigationExampleState extends State<NavigationExample> {\n  int currentPageIndex = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData theme = Theme.of(context);\n    return Scaffold(\n      bottomNavigationBar: NavigationBar(\n        onDestinationSelected: (int index) {\n          setState(() {\n            currentPageIndex = index;\n          });\n        },\n        indicatorColor: Colors.amber,\n        selectedIndex: currentPageIndex,\n        destinations: const <Widget>[\n          NavigationDestination(\n            selectedIcon: Icon(Icons.home),\n            icon: Icon(Icons.home_outlined),\n            label: 'Home',\n          ),\n          NavigationDestination(\n            icon: Badge(child: Icon(Icons.notifications_sharp)),\n            label: 'Notifications',\n          ),\n          NavigationDestination(\n            icon: Badge(\n              label: Text('2'),\n              child: Icon(Icons.messenger_sharp),\n            ),\n            label: 'Messages',\n          ),\n        ],\n      ),\n      body: <Widget>[\n        /// Home page\n        Card(\n          shadowColor: Colors.transparent,\n          margin: const EdgeInsets.all(8.0),\n          child: SizedBox.expand(\n            child: Center(\n              child: Text(\n                'Home page',\n                style: theme.textTheme.titleLarge,\n              ),\n            ),\n          ),\n        ),\n\n        /// Notifications page\n        const Padding(\n          padding: EdgeInsets.all(8.0),\n          child: Column(\n            children: <Widget>[\n              Card(\n                child: ListTile(\n                  leading: Icon(Icons.notifications_sharp),\n                  title: Text('Notification 1'),\n                  subtitle: Text('This is a notification'),\n                ),\n              ),\n              Card(\n                child: ListTile(\n                  leading: Icon(Icons.notifications_sharp),\n                  title: Text('Notification 2'),\n                  subtitle: Text('This is a notification'),\n                ),\n              ),\n            ],\n          ),\n        ),\n\n        /// Messages page\n        ListView.builder(\n          reverse: true,\n          itemCount: 2,\n          itemBuilder: (BuildContext context, int index) {\n            if (index == 0) {\n              return Align(\n                alignment: Alignment.centerRight,\n                child: Container(\n                  margin: const EdgeInsets.all(8.0),\n                  padding: const EdgeInsets.all(8.0),\n                  decoration: BoxDecoration(\n                    color: theme.colorScheme.primary,\n                    borderRadius: BorderRadius.circular(8.0),\n                  ),\n                  child: Text(\n                    'Hello',\n                    style: theme.textTheme.bodyLarge!\n                        .copyWith(color: theme.colorScheme.onPrimary),\n                  ),\n                ),\n              );\n            }\n            return Align(\n              alignment: Alignment.centerLeft,\n              child: Container(\n                margin: const EdgeInsets.all(8.0),\n                padding: const EdgeInsets.all(8.0),\n                decoration: BoxDecoration(\n                  color: theme.colorScheme.primary,\n                  borderRadius: BorderRadius.circular(8.0),\n                ),\n                child: Text(\n                  'Hi!',\n                  style: theme.textTheme.bodyLarge!\n                      .copyWith(color: theme.colorScheme.onPrimary),\n                ),\n              ),\n            );\n          },\n        ),\n      ][currentPageIndex],\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [BottomNavigationBar].\n\nvoid main() => runApp(const BottomNavigationBarExampleApp());\n\nclass BottomNavigationBarExampleApp extends StatelessWidget {\n  const BottomNavigationBarExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: BottomNavigationBarExample(),\n    );\n  }\n}\n\nclass BottomNavigationBarExample extends StatefulWidget {\n  const BottomNavigationBarExample({super.key});\n\n  @override\n  State<BottomNavigationBarExample> createState() =>\n      _BottomNavigationBarExampleState();\n}\n\nclass _BottomNavigationBarExampleState\n    extends State<BottomNavigationBarExample> {\n  int _selectedIndex = 0;\n  static const TextStyle optionStyle =\n      TextStyle(fontSize: 30, fontWeight: FontWeight.bold);\n  static const List<Widget> _widgetOptions = <Widget>[\n    Text(\n      'Index 0: Home',\n      style: optionStyle,\n    ),\n    Text(\n      'Index 1: Business',\n      style: optionStyle,\n    ),\n    Text(\n      'Index 2: School',\n      style: optionStyle,\n    ),\n    Text(\n      'Index 3: Settings',\n      style: optionStyle,\n    ),\n  ];\n\n  void _onItemTapped(int index) {\n    setState(() {\n      _selectedIndex = index;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('BottomNavigationBar Sample'),\n      ),\n      body: Center(\n        child: _widgetOptions.elementAt(_selectedIndex),\n      ),\n      bottomNavigationBar: BottomNavigationBar(\n        items: const <BottomNavigationBarItem>[\n          BottomNavigationBarItem(\n            icon: Icon(Icons.home),\n            label: 'Home',\n            backgroundColor: Colors.red,\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.business),\n            label: 'Business',\n            backgroundColor: Colors.green,\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.school),\n            label: 'School',\n            backgroundColor: Colors.purple,\n          ),\n          BottomNavigationBarItem(\n            icon: Icon(Icons.settings),\n            label: 'Settings',\n            backgroundColor: Colors.pink,\n          ),\n        ],\n        currentIndex: _selectedIndex,\n        selectedItemColor: Colors.amber[800],\n        onTap: _onItemTapped,\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ButtonStyle-class.html",
  "title": "ButtonStyle class - material library - Dart API",
  "documentation_content": "ButtonStyle class - material library - Dart API\nmenu\nFlutter\nmaterial\nButtonStyle class\nButtonStyle\nbrightness_4\nbrightness_5\ndescription\nButtonStyle class\nThe visual properties that most buttons have in common.\nButtons and their themes have a ButtonStyle property which defines the visual\nproperties whose default values are to be overridden. The default values are\ndefined by the individual button widgets and are typically based on overall\ntheme's ThemeData.colorScheme and ThemeData.textTheme.\nAll of the ButtonStyle properties are null by default.\nMany of the ButtonStyle properties are MaterialStateProperty objects which\nresolve to different values depending on the button's state. For example\nthe Color properties are defined with MaterialStateProperty<Color> and\ncan resolve to different colors depending on if the button is pressed,\nhovered, focused, disabled, etc.\nThese properties can override the default value for just one state or all of\nthem. For example to create a ElevatedButton whose background color is the\ncolor scheme\u2019s primary color with 50% opacity, but only when the button is\npressed, one could write:\nElevatedButton(\nstyle: ButtonStyle(\nbackgroundColor: MaterialStateProperty.resolveWith<Color?>(\n(Set<MaterialState> states) {\nif (states.contains(MaterialState.pressed)) {\nreturn Theme.of(context).colorScheme.primary.withOpacity(0.5);\n}\nreturn null; // Use the component's default.\n},\n),\n),\nchild: const Text('Fly me to the moon'),\nonPressed: () {\n// ...\n},\n),\nIn this case the background color for all other button states would fallback\nto the ElevatedButton\u2019s default values. To unconditionally set the button's\nbackgroundColor for all states one could write:\nElevatedButton(\nstyle: const ButtonStyle(\nbackgroundColor: MaterialStatePropertyAll<Color>(Colors.green),\n),\nchild: const Text('Let me play among the stars'),\nonPressed: () {\n// ...\n},\n),\nConfiguring a ButtonStyle directly makes it possible to very\nprecisely control the button\u2019s visual attributes for all states.\nThis level of control is typically required when a custom\n\u201cbranded\u201d look and feel is desirable. However, in many cases it\u2019s\nuseful to make relatively sweeping changes based on a few initial\nparameters with simple values. The button styleFrom() methods\nenable such sweeping changes. See for example:\nElevatedButton.styleFrom, FilledButton.styleFrom,\nOutlinedButton.styleFrom, TextButton.styleFrom.\nFor example, to override the default text and icon colors for a\nTextButton, as well as its overlay color, with all of the\nstandard opacity adjustments for the pressed, focused, and\nhovered states, one could write:\nTextButton(\nstyle: TextButton.styleFrom(foregroundColor: Colors.green),\nchild: const Text('Let me see what spring is like'),\nonPressed: () {\n// ...\n},\n),\nTo configure all of the application's text buttons in the same\nway, specify the overall theme's textButtonTheme:\nMaterialApp(\ntheme: ThemeData(\ntextButtonTheme: TextButtonThemeData(\nstyle: TextButton.styleFrom(foregroundColor: Colors.green),\n),\n),\nhome: const MyAppHome(),\n),\nMaterial 3 button types\nMaterial Design 3 specifies five types of common buttons. Flutter provides\nsupport for these using the following button classes:\nType\nFlutter implementation\nElevated\nElevatedButton\nFilled\nFilledButton\nFilled Tonal\nFilledButton.tonal\nOutlined\nOutlinedButton\nText\nTextButton\nThis sample shows how to create each of the Material 3 button types with Flutter.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ButtonStyle.1 mysample\nSee also:\nElevatedButtonTheme, the theme for ElevatedButtons.\nFilledButtonTheme, the theme for FilledButtons.\nOutlinedButtonTheme, the theme for OutlinedButtons.\nTextButtonTheme, the theme for TextButtons.\nMixed in types\nDiagnosticable\nAnnotations\n@immutable\nConstructors\nButtonStyle({MaterialStateProperty<TextStyle?>? textStyle, MaterialStateProperty<Color?>? backgroundColor, MaterialStateProperty<Color?>? foregroundColor, MaterialStateProperty<Color?>? overlayColor, MaterialStateProperty<Color?>? shadowColor, MaterialStateProperty<Color?>? surfaceTintColor, MaterialStateProperty<double?>? elevation, MaterialStateProperty<EdgeInsetsGeometry?>? padding, MaterialStateProperty<Size?>? minimumSize, MaterialStateProperty<Size?>? fixedSize, MaterialStateProperty<Size?>? maximumSize, MaterialStateProperty<Color?>? iconColor, MaterialStateProperty<double?>? iconSize, MaterialStateProperty<BorderSide?>? side, MaterialStateProperty<OutlinedBorder?>? shape, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity, MaterialTapTargetSize? tapTargetSize, Duration? animationDuration, bool? enableFeedback, AlignmentGeometry? alignment, InteractiveInkFeatureFactory? splashFactory})\nCreate a ButtonStyle.\nconst\nProperties\nalignment\n\u2192 AlignmentGeometry?\nThe alignment of the button's child.\nfinal\nanimationDuration\n\u2192 Duration?\nDefines the duration of animated changes for shape and elevation.\nfinal\nbackgroundColor\n\u2192 MaterialStateProperty<Color?>?\nThe button's background fill color.\nfinal\nelevation\n\u2192 MaterialStateProperty<double?>?\nThe elevation of the button's Material.\nfinal\nenableFeedback\n\u2192 bool?\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinal\nfixedSize\n\u2192 MaterialStateProperty<Size?>?\nThe button's size.\nfinal\nforegroundColor\n\u2192 MaterialStateProperty<Color?>?\nThe color for the button's Text and Icon widget descendants.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyoverride\niconColor\n\u2192 MaterialStateProperty<Color?>?\nThe icon's color inside of the button.\nfinal\niconSize\n\u2192 MaterialStateProperty<double?>?\nThe icon's size inside of the button.\nfinal\nmaximumSize\n\u2192 MaterialStateProperty<Size?>?\nThe maximum size of the button itself.\nfinal\nminimumSize\n\u2192 MaterialStateProperty<Size?>?\nThe minimum size of the button itself.\nfinal\nmouseCursor\n\u2192 MaterialStateProperty<MouseCursor?>?\nThe cursor for a mouse pointer when it enters or is hovering over\nthis button's InkWell.\nfinal\noverlayColor\n\u2192 MaterialStateProperty<Color?>?\nThe highlight color that's typically used to indicate that\nthe button is focused, hovered, or pressed.\nfinal\npadding\n\u2192 MaterialStateProperty<EdgeInsetsGeometry?>?\nThe padding between the button's boundary and its child.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshadowColor\n\u2192 MaterialStateProperty<Color?>?\nThe shadow color of the button's Material.\nfinal\nshape\n\u2192 MaterialStateProperty<OutlinedBorder?>?\nThe shape of the button's underlying Material.\nfinal\nside\n\u2192 MaterialStateProperty<BorderSide?>?\nThe color and weight of the button's outline.\nfinal\nsplashFactory\n\u2192 InteractiveInkFeatureFactory?\nCreates the InkWell splash factory, which defines the appearance of\n\"ink\" splashes that occur in response to taps.\nfinal\nsurfaceTintColor\n\u2192 MaterialStateProperty<Color?>?\nThe surface tint color of the button's Material.\nfinal\ntapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the area within which the button may be pressed.\nfinal\ntextStyle\n\u2192 MaterialStateProperty<TextStyle?>?\nThe style for a button's Text widget descendants.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the button's layout will be.\nfinal\nMethods\ncopyWith({MaterialStateProperty<TextStyle?>? textStyle, MaterialStateProperty<Color?>? backgroundColor, MaterialStateProperty<Color?>? foregroundColor, MaterialStateProperty<Color?>? overlayColor, MaterialStateProperty<Color?>? shadowColor, MaterialStateProperty<Color?>? surfaceTintColor, MaterialStateProperty<double?>? elevation, MaterialStateProperty<EdgeInsetsGeometry?>? padding, MaterialStateProperty<Size?>? minimumSize, MaterialStateProperty<Size?>? fixedSize, MaterialStateProperty<Size?>? maximumSize, MaterialStateProperty<Color?>? iconColor, MaterialStateProperty<double?>? iconSize, MaterialStateProperty<BorderSide?>? side, MaterialStateProperty<OutlinedBorder?>? shape, MaterialStateProperty<MouseCursor?>? mouseCursor, VisualDensity? visualDensity, MaterialTapTargetSize? tapTargetSize, Duration? animationDuration, bool? enableFeedback, AlignmentGeometry? alignment, InteractiveInkFeatureFactory? splashFactory})\n\u2192 ButtonStyle\nReturns a copy of this ButtonStyle with the given fields replaced with\nthe new values.\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nmerge(ButtonStyle? style)\n\u2192 ButtonStyle\nReturns a copy of this ButtonStyle where the non-null fields in style\nhave replaced the corresponding null fields in this ButtonStyle.\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringShort()\n\u2192 String\nA brief description of this object, usually just the runtimeType and the\nhashCode.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\noverride\nStatic Methods\nlerp(ButtonStyle? a, ButtonStyle? b, double t)\n\u2192 ButtonStyle?\nLinearly interpolate between two ButtonStyles.\nFlutter\nmaterial\nButtonStyle class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ElevatedButton].\n\nvoid main() {\n  runApp(const ButtonApp());\n}\n\nclass ButtonApp extends StatelessWidget {\n  const ButtonApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      title: 'Button Types',\n      home: const Scaffold(\n        body: ButtonTypesExample(),\n      ),\n    );\n  }\n}\n\nclass ButtonTypesExample extends StatelessWidget {\n  const ButtonTypesExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Padding(\n      padding: EdgeInsets.all(4.0),\n      child: Row(\n        children: <Widget>[\n          Spacer(),\n          ButtonTypesGroup(enabled: true),\n          ButtonTypesGroup(enabled: false),\n          Spacer(),\n        ],\n      ),\n    );\n  }\n}\n\nclass ButtonTypesGroup extends StatelessWidget {\n  const ButtonTypesGroup({super.key, required this.enabled});\n\n  final bool enabled;\n\n  @override\n  Widget build(BuildContext context) {\n    final VoidCallback? onPressed = enabled ? () {} : null;\n    return Padding(\n      padding: const EdgeInsets.all(4.0),\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        children: <Widget>[\n          ElevatedButton(onPressed: onPressed, child: const Text('Elevated')),\n          FilledButton(onPressed: onPressed, child: const Text('Filled')),\n          FilledButton.tonal(\n              onPressed: onPressed, child: const Text('Filled Tonal')),\n          OutlinedButton(onPressed: onPressed, child: const Text('Outlined')),\n          TextButton(onPressed: onPressed, child: const Text('Text')),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Card-class.html",
  "title": "Card class - material library - Dart API",
  "documentation_content": "Card class - material library - Dart API\nmenu\nFlutter\nmaterial\nCard class\nCard\nbrightness_4\nbrightness_5\ndescription\nCard class\nA Material Design card: a panel with slightly rounded corners and an\nelevation shadow.\nA card is a sheet of Material used to represent some related information,\nfor example an album, a geographical location, a meal, contact details, etc.\nThis is what it looks like when run:\nThis sample shows creation of a Card widget that shows album information\nand two actions.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Card.1 mysample\nSometimes the primary action area of a card is the card itself. Cards can be\none large touch target that shows a detail screen when tapped.\nThis sample shows creation of a Card widget that can be tapped. When\ntapped this Card's InkWell displays an \"ink splash\" that fills the\nentire card.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Card.2 mysample\nMaterial Design 3 introduced new types of cards. These can\nbe produced by configuring the Card widget's properties.\nCard widget.\nThis sample shows creation of Card widgets for elevated, filled and\noutlined types, as described in: https://m3.material.io/components/cards/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Card.3 mysample\nSee also:\nListTile, to display icons and text in a card.\nshowDialog, to display a modal card.\nmaterial.io/design/components/cards.html\nm3.material.io/components/cards\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nCard\nConstructors\nCard({Key? key, Color? color, Color? shadowColor, Color? surfaceTintColor, double? elevation, ShapeBorder? shape, bool borderOnForeground = true, EdgeInsetsGeometry? margin, Clip? clipBehavior, Widget? child, bool semanticContainer = true})\nCreates a Material Design card.\nconst\nProperties\nborderOnForeground\n\u2192 bool\nWhether to paint the shape border in front of the child.\nfinal\nchild\n\u2192 Widget?\nThe widget below this widget in the tree.\nfinal\nclipBehavior\n\u2192 Clip?\nThe content will be clipped (or not) according to this option.\nfinal\ncolor\n\u2192 Color?\nThe card's background color.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate at which to place this card. This controls the size of\nthe shadow below the card.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmargin\n\u2192 EdgeInsetsGeometry?\nThe empty space that surrounds the card.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsemanticContainer\n\u2192 bool\nWhether this widget represents a single semantic container, or if false\na collection of individual semantic nodes.\nfinal\nshadowColor\n\u2192 Color?\nThe color to paint the shadow below the card.\nfinal\nshape\n\u2192 ShapeBorder?\nThe shape of the card's Material.\nfinal\nsurfaceTintColor\n\u2192 Color?\nThe color used as an overlay on color to indicate elevation.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nCard class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Card].\n\nvoid main() => runApp(const CardExampleApp());\n\nclass CardExampleApp extends StatelessWidget {\n  const CardExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Card Sample')),\n        body: const CardExample(),\n      ),\n    );\n  }\n}\n\nclass CardExample extends StatelessWidget {\n  const CardExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Card(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: <Widget>[\n            const ListTile(\n              leading: Icon(Icons.album),\n              title: Text('The Enchanted Nightingale'),\n              subtitle: Text('Music by Julie Gable. Lyrics by Sidney Stein.'),\n            ),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.end,\n              children: <Widget>[\n                TextButton(\n                  child: const Text('BUY TICKETS'),\n                  onPressed: () {/* ... */},\n                ),\n                const SizedBox(width: 8),\n                TextButton(\n                  child: const Text('LISTEN'),\n                  onPressed: () {/* ... */},\n                ),\n                const SizedBox(width: 8),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Card].\n\nvoid main() => runApp(const CardExampleApp());\n\nclass CardExampleApp extends StatelessWidget {\n  const CardExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Card Sample')),\n        body: const CardExample(),\n      ),\n    );\n  }\n}\n\nclass CardExample extends StatelessWidget {\n  const CardExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Card(\n        // clipBehavior is necessary because, without it, the InkWell's animation\n        // will extend beyond the rounded edges of the [Card] (see https://github.com/flutter/flutter/issues/109776)\n        // This comes with a small performance cost, and you should not set [clipBehavior]\n        // unless you need it.\n        clipBehavior: Clip.hardEdge,\n        child: InkWell(\n          splashColor: Colors.blue.withAlpha(30),\n          onTap: () {\n            debugPrint('Card tapped.');\n          },\n          child: const SizedBox(\n            width: 300,\n            height: 100,\n            child: Text('A card that can be tapped'),\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Card].\n\nvoid main() {\n  runApp(const CardExamplesApp());\n}\n\nclass CardExamplesApp extends StatelessWidget {\n  const CardExamplesApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Card Examples')),\n        body: const Column(\n          children: <Widget>[\n            Spacer(),\n            ElevatedCardExample(),\n            FilledCardExample(),\n            OutlinedCardExample(),\n            Spacer(),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\n/// An example of the elevated card type.\n///\n/// The default settings for [Card] will provide an elevated\n/// card matching the spec:\n///\n/// https://m3.material.io/components/cards/specs#a012d40d-7a5c-4b07-8740-491dec79d58b\nclass ElevatedCardExample extends StatelessWidget {\n  const ElevatedCardExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Center(\n      child: Card(\n        child: SizedBox(\n          width: 300,\n          height: 100,\n          child: Center(child: Text('Elevated Card')),\n        ),\n      ),\n    );\n  }\n}\n\n/// An example of the filled card type.\n///\n/// To make a [Card] match the filled type, the default elevation and color\n/// need to be changed to the values from the spec:\n///\n/// https://m3.material.io/components/cards/specs#0f55bf62-edf2-4619-b00d-b9ed462f2c5a\nclass FilledCardExample extends StatelessWidget {\n  const FilledCardExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Card(\n        elevation: 0,\n        color: Theme.of(context).colorScheme.surfaceVariant,\n        child: const SizedBox(\n          width: 300,\n          height: 100,\n          child: Center(child: Text('Filled Card')),\n        ),\n      ),\n    );\n  }\n}\n\n/// An example of the outlined card type.\n///\n/// To make a [Card] match the outlined type, the default elevation and shape\n/// need to be changed to the values from the spec:\n///\n/// https://m3.material.io/components/cards/specs#0f55bf62-edf2-4619-b00d-b9ed462f2c5a\nclass OutlinedCardExample extends StatelessWidget {\n  const OutlinedCardExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Card(\n        elevation: 0,\n        shape: RoundedRectangleBorder(\n          side: BorderSide(\n            color: Theme.of(context).colorScheme.outline,\n          ),\n          borderRadius: const BorderRadius.all(Radius.circular(12)),\n        ),\n        child: const SizedBox(\n          width: 300,\n          height: 100,\n          child: Center(child: Text('Outlined Card')),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Checkbox-class.html",
  "title": "Checkbox class - material library - Dart API",
  "documentation_content": "Checkbox class - material library - Dart API\nmenu\nFlutter\nmaterial\nCheckbox class\nCheckbox\nbrightness_4\nbrightness_5\ndescription\nCheckbox class\nA Material Design checkbox.\nThe checkbox itself does not maintain any state. Instead, when the state of\nthe checkbox changes, the widget calls the onChanged callback. Most\nwidgets that use a checkbox will listen for the onChanged callback and\nrebuild the checkbox with a new value to update the visual appearance of\nthe checkbox.\nThe checkbox can optionally display three values - true, false, and null -\nif tristate is true. When value is null a dash is displayed. By default\ntristate is false and the checkbox's value must be true or false.\nRequires one of its ancestors to be a Material widget.\nThis example shows how you can override the default theme of\na Checkbox with a MaterialStateProperty.\nIn this example, the checkbox's color will be Colors.blue when the Checkbox\nis being pressed, hovered, or focused. Otherwise, the checkbox's color will\nbe Colors.red.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Checkbox.1 mysample\nThis example shows what the checkbox error state looks like.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Checkbox.2 mysample\nSee also:\nCheckboxListTile, which combines this widget with a ListTile so that\nyou can give the checkbox a label.\nSwitch, a widget with semantics similar to Checkbox.\nRadio, for selecting among a set of explicit values.\nSlider, for selecting a value in a range.\nmaterial.io/design/components/selection-controls.html#checkboxes\nmaterial.io/design/components/lists.html#types\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nCheckbox\nConstructors\nCheckbox({Key? key, required bool? value, bool tristate = false, required ValueChanged<bool?>? onChanged, MouseCursor? mouseCursor, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? checkColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false, OutlinedBorder? shape, BorderSide? side, bool isError = false, String? semanticLabel})\nCreates a Material Design checkbox.\nconst\nCheckbox.adaptive({Key? key, required bool? value, bool tristate = false, required ValueChanged<bool?>? onChanged, MouseCursor? mouseCursor, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? checkColor, Color? focusColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false, OutlinedBorder? shape, BorderSide? side, bool isError = false, String? semanticLabel})\nCreates an adaptive Checkbox based on whether the target platform is iOS\nor macOS, following Material design's\nCross-platform guidelines.\nconst\nProperties\nactiveColor\n\u2192 Color?\nThe color to use when this checkbox is checked.\nfinal\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\ncheckColor\n\u2192 Color?\nThe color to use for the check icon when this checkbox is checked.\nfinal\nfillColor\n\u2192 MaterialStateProperty<Color?>?\nThe color that fills the checkbox, in all MaterialStates.\nfinal\nfocusColor\n\u2192 Color?\nThe color for the checkbox's Material when it has the input focus.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhoverColor\n\u2192 Color?\nThe color for the checkbox's Material when a pointer is hovering over it.\nfinal\nisError\n\u2192 bool\nTrue if this checkbox wants to show an error state.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmaterialTapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the tap target.\nfinal\nmouseCursor\n\u2192 MouseCursor?\nThe cursor for a mouse pointer when it enters or is hovering over the\nwidget.\nfinal\nonChanged\n\u2192 ValueChanged<bool?>?\nCalled when the value of the checkbox should change.\nfinal\noverlayColor\n\u2192 MaterialStateProperty<Color?>?\nThe color for the checkbox's Material.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsemanticLabel\n\u2192 String?\nThe semantic label for the checkobox that will be announced by screen readers.\nfinal\nshape\n\u2192 OutlinedBorder?\nThe shape of the checkbox's Material.\nfinal\nside\n\u2192 BorderSide?\nThe color and width of the checkbox's border.\nfinal\nsplashRadius\n\u2192 double?\nThe splash radius of the circular Material ink response.\nfinal\ntristate\n\u2192 bool\nIf true the checkbox's value can be true, false, or null.\nfinal\nvalue\n\u2192 bool?\nWhether this checkbox is checked.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the checkbox's layout will be.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<Checkbox>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nConstants\nwidth\n\u2192 const double\nThe width of a checkbox widget.\n18.0\nFlutter\nmaterial\nCheckbox class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for M3 [Checkbox] with error state.\n\nvoid main() => runApp(const CheckboxExampleApp());\n\nclass CheckboxExampleApp extends StatelessWidget {\n  const CheckboxExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          useMaterial3: true, colorSchemeSeed: const Color(0xff6750a4)),\n      title: 'Checkbox Sample',\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Checkbox Sample')),\n        body: const Center(\n          child: CheckboxExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass CheckboxExample extends StatefulWidget {\n  const CheckboxExample({super.key});\n\n  @override\n  State<CheckboxExample> createState() => _CheckboxExampleState();\n}\n\nclass _CheckboxExampleState extends State<CheckboxExample> {\n  bool? isChecked = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: <Widget>[\n        Checkbox(\n          tristate: true,\n          value: isChecked,\n          onChanged: (bool? value) {\n            setState(() {\n              isChecked = value;\n            });\n          },\n        ),\n        Checkbox(\n          isError: true,\n          tristate: true,\n          value: isChecked,\n          onChanged: (bool? value) {\n            setState(() {\n              isChecked = value;\n            });\n          },\n        ),\n        Checkbox(\n          isError: true,\n          tristate: true,\n          value: isChecked,\n          onChanged: null,\n        ),\n      ],\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Checkbox].\n\nvoid main() => runApp(const CheckboxExampleApp());\n\nclass CheckboxExampleApp extends StatelessWidget {\n  const CheckboxExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Checkbox Sample')),\n        body: const Center(\n          child: CheckboxExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass CheckboxExample extends StatefulWidget {\n  const CheckboxExample({super.key});\n\n  @override\n  State<CheckboxExample> createState() => _CheckboxExampleState();\n}\n\nclass _CheckboxExampleState extends State<CheckboxExample> {\n  bool isChecked = false;\n\n  @override\n  Widget build(BuildContext context) {\n    Color getColor(Set<MaterialState> states) {\n      const Set<MaterialState> interactiveStates = <MaterialState>{\n        MaterialState.pressed,\n        MaterialState.hovered,\n        MaterialState.focused,\n      };\n      if (states.any(interactiveStates.contains)) {\n        return Colors.blue;\n      }\n      return Colors.red;\n    }\n\n    return Checkbox(\n      checkColor: Colors.white,\n      fillColor: MaterialStateProperty.resolveWith(getColor),\n      value: isChecked,\n      onChanged: (bool? value) {\n        setState(() {\n          isChecked = value!;\n        });\n      },\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/CheckboxListTile-class.html",
  "title": "CheckboxListTile class - material library - Dart API",
  "documentation_content": "CheckboxListTile class - material library - Dart API\nmenu\nFlutter\nmaterial\nCheckboxListTile class\nCheckboxListTile\nbrightness_4\nbrightness_5\ndescription\nCheckboxListTile class\nA ListTile with a Checkbox. In other words, a checkbox with a label.\nThe entire list tile is interactive: tapping anywhere in the tile toggles\nthe checkbox.\nThe value, onChanged, activeColor and checkColor properties of this widget are\nidentical to the similarly-named properties on the Checkbox widget.\nThe title, subtitle, isThreeLine, dense, and contentPadding properties are like\nthose of the same name on ListTile.\nThe selected property on this widget is similar to the ListTile.selected\nproperty. This tile's activeColor is used for the selected item's text color, or\nthe theme's CheckboxThemeData.overlayColor if activeColor is null.\nThis widget does not coordinate the selected state and the value state; to have the list tile\nappear selected when the checkbox is checked, pass the same value to both.\nThe checkbox is shown on the right by default in left-to-right languages\n(i.e. the trailing edge). This can be changed using controlAffinity. The\nsecondary widget is placed on the opposite side. This maps to the\nListTile.leading and ListTile.trailing properties of ListTile.\nThis widget requires a Material widget ancestor in the tree to paint\nitself on, which is typically provided by the app's Scaffold.\nThe tileColor, and selectedTileColor are not painted by the\nCheckboxListTile itself but by the Material widget ancestor.\nIn this case, one can wrap a Material widget around the CheckboxListTile,\ne.g.:\nlink\ncontent_copy\nColoredBox(\ncolor: Colors.green,\nchild: Material(\nchild: CheckboxListTile(\ntileColor: Colors.red,\ntitle: const Text('CheckboxListTile with red background'),\nvalue: true,\nonChanged:(bool? value) { },\n),\n),\n)\nPerformance considerations when wrapping CheckboxListTile with Material\nWrapping a large number of CheckboxListTiles individually with Materials\nis expensive. Consider only wrapping the CheckboxListTiles that require it\nor include a common Material ancestor where possible.\nTo show the CheckboxListTile as disabled, pass null as the onChanged\ncallback.\nThis widget shows a checkbox that, when checked, slows down all animations\n(including the animation of the checkbox itself getting checked!).\nThis sample requires that you also import 'package:flutter/scheduler.dart',\nso that you can reference timeDilation.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.CheckboxListTile.2 mysample\nThis sample demonstrates how CheckboxListTile positions the checkbox widget\nrelative to the text in different configurations.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.CheckboxListTile.3 mysample\nSemantics in CheckboxListTile\nSince the entirety of the CheckboxListTile is interactive, it should represent\nitself as a single interactive entity.\nTo do so, a CheckboxListTile widget wraps its children with a MergeSemantics\nwidget. MergeSemantics will attempt to merge its descendant Semantics\nnodes into one node in the semantics tree. Therefore, CheckboxListTile will\nthrow an error if any of its children requires its own Semantics node.\nFor example, you cannot nest a RichText widget as a descendant of\nCheckboxListTile. RichText has an embedded gesture recognizer that\nrequires its own Semantics node, which directly conflicts with\nCheckboxListTile's desire to merge all its descendants' semantic nodes\ninto one. Therefore, it may be necessary to create a custom radio tile\nwidget to accommodate similar use cases.\nHere is an example of a custom labeled checkbox widget, called\nLinkedLabelCheckbox, that includes an interactive RichText widget that\nhandles tap gestures.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.CheckboxListTile.4 mysample\nCheckboxListTile isn't exactly what I want\nIf the way CheckboxListTile pads and positions its elements isn't quite\nwhat you're looking for, you can create custom labeled checkbox widgets by\ncombining Checkbox with other widgets, such as Text, Padding and\nInkWell.\nHere is an example of a custom LabeledCheckbox widget, but you can easily\nmake your own configurable widget.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.CheckboxListTile.5 mysample\nSee also:\nListTileTheme, which can be used to affect the style of list tiles,\nincluding checkbox list tiles.\nRadioListTile, a similar widget for radio buttons.\nSwitchListTile, a similar widget for switches.\nListTile and Checkbox, the widgets from which this widget is made.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nCheckboxListTile\nConstructors\nCheckboxListTile({Key? key, required bool? value, required ValueChanged<bool?>? onChanged, MouseCursor? mouseCursor, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? checkColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false, ShapeBorder? shape, BorderSide? side, bool isError = false, bool? enabled, Color? tileColor, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, EdgeInsetsGeometry? contentPadding, bool tristate = false, OutlinedBorder? checkboxShape, Color? selectedTileColor, ValueChanged<bool>? onFocusChange, bool? enableFeedback, String? checkboxSemanticLabel})\nCreates a combination of a list tile and a checkbox.\nconst\nCheckboxListTile.adaptive({Key? key, required bool? value, required ValueChanged<bool?>? onChanged, MouseCursor? mouseCursor, Color? activeColor, MaterialStateProperty<Color?>? fillColor, Color? checkColor, Color? hoverColor, MaterialStateProperty<Color?>? overlayColor, double? splashRadius, MaterialTapTargetSize? materialTapTargetSize, VisualDensity? visualDensity, FocusNode? focusNode, bool autofocus = false, ShapeBorder? shape, BorderSide? side, bool isError = false, bool? enabled, Color? tileColor, Widget? title, Widget? subtitle, bool isThreeLine = false, bool? dense, Widget? secondary, bool selected = false, ListTileControlAffinity controlAffinity = ListTileControlAffinity.platform, EdgeInsetsGeometry? contentPadding, bool tristate = false, OutlinedBorder? checkboxShape, Color? selectedTileColor, ValueChanged<bool>? onFocusChange, bool? enableFeedback, String? checkboxSemanticLabel})\nCreates a combination of a list tile and a platform adaptive checkbox.\nconst\nProperties\nactiveColor\n\u2192 Color?\nThe color to use when this checkbox is checked.\nfinal\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\ncheckboxSemanticLabel\n\u2192 String?\nThe semantic label for the checkobox that will be announced by screen readers.\nfinal\ncheckboxShape\n\u2192 OutlinedBorder?\nThe shape of the checkbox's Material.\nfinal\ncheckColor\n\u2192 Color?\nThe color to use for the check icon when this checkbox is checked.\nfinal\ncontentPadding\n\u2192 EdgeInsetsGeometry?\nDefines insets surrounding the tile's contents.\nfinal\ncontrolAffinity\n\u2192 ListTileControlAffinity\nWhere to place the control relative to the text.\nfinal\ndense\n\u2192 bool?\nWhether this list tile is part of a vertically dense list.\nfinal\nenabled\n\u2192 bool?\nWhether the CheckboxListTile is interactive.\nfinal\nenableFeedback\n\u2192 bool?\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinal\nfillColor\n\u2192 MaterialStateProperty<Color?>?\nThe color that fills the checkbox.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhoverColor\n\u2192 Color?\nThe color for the checkbox's Material when a pointer is hovering over it.\nfinal\nisError\n\u2192 bool\nTrue if this checkbox wants to show an error state.\nfinal\nisThreeLine\n\u2192 bool\nWhether this list tile is intended to display three lines of text.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmaterialTapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the tap target.\nfinal\nmouseCursor\n\u2192 MouseCursor?\nThe cursor for a mouse pointer when it enters or is hovering over the\nwidget.\nfinal\nonChanged\n\u2192 ValueChanged<bool?>?\nCalled when the value of the checkbox should change.\nfinal\nonFocusChange\n\u2192 ValueChanged<bool>?\nHandler called when the focus changes.\nfinal\noverlayColor\n\u2192 MaterialStateProperty<Color?>?\nThe color for the checkbox's Material.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsecondary\n\u2192 Widget?\nA widget to display on the opposite side of the tile from the checkbox.\nfinal\nselected\n\u2192 bool\nWhether to render icons and text in the activeColor.\nfinal\nselectedTileColor\n\u2192 Color?\nIf non-null, defines the background color when CheckboxListTile.selected is true.\nfinal\nshape\n\u2192 ShapeBorder?\nDefines the tile's InkWell.customBorder and Ink.decoration shape.\nfinal\nside\n\u2192 BorderSide?\nThe color and width of the checkbox's border.\nfinal\nsplashRadius\n\u2192 double?\nThe splash radius of the circular Material ink response.\nfinal\nsubtitle\n\u2192 Widget?\nAdditional content displayed below the title.\nfinal\ntileColor\n\u2192 Color?\nDefines the background color of ListTile when selected is false.\nfinal\ntitle\n\u2192 Widget?\nThe primary content of the list tile.\nfinal\ntristate\n\u2192 bool\nIf true the checkbox's value can be true, false, or null.\nfinal\nvalue\n\u2192 bool?\nWhether this checkbox is checked.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the list tile's layout will be.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nCheckboxListTile class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for custom labeled checkbox.\n\nvoid main() => runApp(const LabeledCheckboxApp());\n\nclass LabeledCheckboxApp extends StatelessWidget {\n  const LabeledCheckboxApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const LabeledCheckboxExample(),\n    );\n  }\n}\n\nclass LabeledCheckbox extends StatelessWidget {\n  const LabeledCheckbox({\n    super.key,\n    required this.label,\n    required this.padding,\n    required this.value,\n    required this.onChanged,\n  });\n\n  final String label;\n  final EdgeInsets padding;\n  final bool value;\n  final ValueChanged<bool> onChanged;\n\n  @override\n  Widget build(BuildContext context) {\n    return InkWell(\n      onTap: () {\n        onChanged(!value);\n      },\n      child: Padding(\n        padding: padding,\n        child: Row(\n          children: <Widget>[\n            Expanded(child: Text(label)),\n            Checkbox(\n              value: value,\n              onChanged: (bool? newValue) {\n                onChanged(newValue!);\n              },\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass LabeledCheckboxExample extends StatefulWidget {\n  const LabeledCheckboxExample({super.key});\n\n  @override\n  State<LabeledCheckboxExample> createState() => _LabeledCheckboxExampleState();\n}\n\nclass _LabeledCheckboxExampleState extends State<LabeledCheckboxExample> {\n  bool _isSelected = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Custom Labeled Checkbox Sample')),\n      body: Center(\n        child: LabeledCheckbox(\n          label: 'This is the label text',\n          padding: const EdgeInsets.symmetric(horizontal: 20.0),\n          value: _isSelected,\n          onChanged: (bool newValue) {\n            setState(() {\n              _isSelected = newValue;\n            });\n          },\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\nimport 'package:flutter/scheduler.dart' show timeDilation;\n\n/// Flutter code sample for [CheckboxListTile].\n\nvoid main() => runApp(const CheckboxListTileApp());\n\nclass CheckboxListTileApp extends StatelessWidget {\n  const CheckboxListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const CheckboxListTileExample(),\n    );\n  }\n}\n\nclass CheckboxListTileExample extends StatefulWidget {\n  const CheckboxListTileExample({super.key});\n\n  @override\n  State<CheckboxListTileExample> createState() =>\n      _CheckboxListTileExampleState();\n}\n\nclass _CheckboxListTileExampleState extends State<CheckboxListTileExample> {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('CheckboxListTile Sample')),\n      body: Center(\n        child: CheckboxListTile(\n          title: const Text('Animate Slowly'),\n          value: timeDilation != 1.0,\n          onChanged: (bool? value) {\n            setState(() {\n              timeDilation = value! ? 10.0 : 1.0;\n            });\n          },\n          secondary: const Icon(Icons.hourglass_empty),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [CheckboxListTile].\n\nvoid main() => runApp(const CheckboxListTileApp());\n\nclass CheckboxListTileApp extends StatelessWidget {\n  const CheckboxListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const CheckboxListTileExample(),\n    );\n  }\n}\n\nclass CheckboxListTileExample extends StatefulWidget {\n  const CheckboxListTileExample({super.key});\n\n  @override\n  State<CheckboxListTileExample> createState() =>\n      _CheckboxListTileExampleState();\n}\n\nclass _CheckboxListTileExampleState extends State<CheckboxListTileExample> {\n  bool checkboxValue1 = true;\n  bool checkboxValue2 = true;\n  bool checkboxValue3 = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('CheckboxListTile Sample')),\n      body: Column(\n        children: <Widget>[\n          CheckboxListTile(\n            value: checkboxValue1,\n            onChanged: (bool? value) {\n              setState(() {\n                checkboxValue1 = value!;\n              });\n            },\n            title: const Text('Headline'),\n            subtitle: const Text('Supporting text'),\n          ),\n          const Divider(height: 0),\n          CheckboxListTile(\n            value: checkboxValue2,\n            onChanged: (bool? value) {\n              setState(() {\n                checkboxValue2 = value!;\n              });\n            },\n            title: const Text('Headline'),\n            subtitle: const Text(\n                'Longer supporting text to demonstrate how the text wraps and the checkbox is centered vertically with the text.'),\n          ),\n          const Divider(height: 0),\n          CheckboxListTile(\n            value: checkboxValue3,\n            onChanged: (bool? value) {\n              setState(() {\n                checkboxValue3 = value!;\n              });\n            },\n            title: const Text('Headline'),\n            subtitle: const Text(\n                \"Longer supporting text to demonstrate how the text wraps and how setting 'CheckboxListTile.isThreeLine = true' aligns the checkbox to the top vertically with the text.\"),\n            isThreeLine: true,\n          ),\n          const Divider(height: 0),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/gestures.dart';\nimport 'package:flutter/material.dart';\n\n/// Flutter code sample for custom labeled checkbox.\n\nvoid main() => runApp(const LabeledCheckboxApp());\n\nclass LabeledCheckboxApp extends StatelessWidget {\n  const LabeledCheckboxApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const LabeledCheckboxExample(),\n    );\n  }\n}\n\nclass LinkedLabelCheckbox extends StatelessWidget {\n  const LinkedLabelCheckbox({\n    super.key,\n    required this.label,\n    required this.padding,\n    required this.value,\n    required this.onChanged,\n  });\n\n  final String label;\n  final EdgeInsets padding;\n  final bool value;\n  final ValueChanged<bool> onChanged;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: padding,\n      child: Row(\n        children: <Widget>[\n          Expanded(\n            child: RichText(\n              text: TextSpan(\n                text: label,\n                style: const TextStyle(\n                  color: Colors.blueAccent,\n                  decoration: TextDecoration.underline,\n                ),\n                recognizer: TapGestureRecognizer()\n                  ..onTap = () {\n                    debugPrint('Label has been tapped.');\n                  },\n              ),\n            ),\n          ),\n          Checkbox(\n            value: value,\n            onChanged: (bool? newValue) {\n              onChanged(newValue!);\n            },\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass LabeledCheckboxExample extends StatefulWidget {\n  const LabeledCheckboxExample({super.key});\n\n  @override\n  State<LabeledCheckboxExample> createState() => _LabeledCheckboxExampleState();\n}\n\nclass _LabeledCheckboxExampleState extends State<LabeledCheckboxExample> {\n  bool _isSelected = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Custom Labeled Checkbox Sample')),\n      body: Center(\n        child: LinkedLabelCheckbox(\n          label: 'Linked, tappable label text',\n          padding: const EdgeInsets.symmetric(horizontal: 20.0),\n          value: _isSelected,\n          onChanged: (bool newValue) {\n            setState(() {\n              _isSelected = newValue;\n            });\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/CheckboxMenuButton-class.html",
  "title": "CheckboxMenuButton class - material library - Dart API",
  "documentation_content": "CheckboxMenuButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nCheckboxMenuButton class\nCheckboxMenuButton\nbrightness_4\nbrightness_5\ndescription\nCheckboxMenuButton class\nA menu item that combines a Checkbox widget with a MenuItemButton.\nTo style the checkbox separately from the button, add a CheckboxTheme\nancestor.\nThis example shows a menu with a checkbox that shows a message in the body\nof the app if checked.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.CheckboxMenuButton.1 mysample\nSee also:\nMenuBar, a widget that creates a menu bar of cascading menu items.\nMenuAnchor, a widget that defines a region which can host a cascading\nmenu.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nCheckboxMenuButton\nConstructors\nCheckboxMenuButton({Key? key, required bool? value, bool tristate = false, bool isError = false, required ValueChanged<bool?>? onChanged, ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, FocusNode? focusNode, MenuSerializableShortcut? shortcut, ButtonStyle? style, MaterialStatesController? statesController, Clip clipBehavior = Clip.none, Widget? trailingIcon, bool closeOnActivate = true, required Widget? child})\nCreates a const CheckboxMenuButton.\nconst\nProperties\nchild\n\u2192 Widget?\nThe widget displayed in the center of this button.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncloseOnActivate\n\u2192 bool\nDetermines if the menu will be closed when a MenuItemButton\nis pressed.\nfinal\nenabled\n\u2192 bool\nWhether the button is enabled or disabled.\nread-only\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nisError\n\u2192 bool\nTrue if this checkbox wants to show an error state.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonChanged\n\u2192 ValueChanged<bool?>?\nCalled when the value of the checkbox should change.\nfinal\nonFocusChange\n\u2192 ValueChanged<bool>?\nHandler called when the focus changes.\nfinal\nonHover\n\u2192 ValueChanged<bool>?\nCalled when a pointer enters or exits the button response area.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshortcut\n\u2192 MenuSerializableShortcut?\nThe optional shortcut that selects this MenuItemButton.\nfinal\nstatesController\n\u2192 MaterialStatesController?\nRepresents the interactive \"state\" of this widget in terms of\na set of MaterialStates, like MaterialState.pressed and\nMaterialState.focused.\nfinal\nstyle\n\u2192 ButtonStyle?\nCustomizes this button's appearance.\nfinal\ntrailingIcon\n\u2192 Widget?\nAn optional icon to display after the child label.\nfinal\ntristate\n\u2192 bool\nIf true, then the checkbox's value can be true, false, or null.\nfinal\nvalue\n\u2192 bool?\nWhether this checkbox is checked.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nCheckboxMenuButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\n/// Flutter code sample for [CheckboxMenuButton].\n\nvoid main() => runApp(const MenuApp());\n\nclass MyCheckboxMenu extends StatefulWidget {\n  const MyCheckboxMenu({super.key, required this.message});\n\n  final String message;\n\n  @override\n  State<MyCheckboxMenu> createState() => _MyCheckboxMenuState();\n}\n\nclass _MyCheckboxMenuState extends State<MyCheckboxMenu> {\n  final FocusNode _buttonFocusNode = FocusNode(debugLabel: 'Menu Button');\n  static const SingleActivator _showShortcut =\n      SingleActivator(LogicalKeyboardKey.keyS, control: true);\n  bool _showingMessage = false;\n\n  @override\n  void dispose() {\n    _buttonFocusNode.dispose();\n    super.dispose();\n  }\n\n  void _setMessageVisibility(bool visible) {\n    setState(() {\n      _showingMessage = visible;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return CallbackShortcuts(\n      bindings: <ShortcutActivator, VoidCallback>{\n        _showShortcut: () {\n          _setMessageVisibility(!_showingMessage);\n        },\n      },\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          MenuAnchor(\n            childFocusNode: _buttonFocusNode,\n            menuChildren: <Widget>[\n              CheckboxMenuButton(\n                value: _showingMessage,\n                onChanged: (bool? value) {\n                  _setMessageVisibility(value!);\n                },\n                child: const Text('Show Message'),\n              ),\n            ],\n            builder: (BuildContext context, MenuController controller,\n                Widget? child) {\n              return TextButton(\n                focusNode: _buttonFocusNode,\n                onPressed: () {\n                  if (controller.isOpen) {\n                    controller.close();\n                  } else {\n                    controller.open();\n                  }\n                },\n                child: const Text('OPEN MENU'),\n              );\n            },\n          ),\n          Expanded(\n            child: Container(\n              alignment: Alignment.center,\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: <Widget>[\n                  Padding(\n                    padding: const EdgeInsets.all(12.0),\n                    child: Text(\n                      _showingMessage ? widget.message : '',\n                      style: Theme.of(context).textTheme.headlineSmall,\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass MenuApp extends StatelessWidget {\n  const MenuApp({super.key});\n\n  static const String kMessage = '\"Talk less. Smile more.\" - A. Burr';\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const Scaffold(\n          body: SafeArea(child: MyCheckboxMenu(message: kMessage))),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/CheckboxMenuButton/shortcut.html",
  "title": "shortcut property - CheckboxMenuButton class - material library - Dart API",
  "documentation_content": "shortcut property - CheckboxMenuButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nCheckboxMenuButton\nshortcut property\nshortcut\nbrightness_4\nbrightness_5\ndescription\nshortcut property\nMenuSerializableShortcut?\nshortcut\nfinal\nThe optional shortcut that selects this MenuItemButton.\nMenus using MenuItemButton can have a SingleActivator or\nCharacterActivator assigned to them as their MenuItemButton.shortcut,\nwhich will display an appropriate shortcut hint. Even though the shortcut\nlabels are displayed in the menu, shortcuts are not automatically handled.\nThey must be available in whatever context they are appropriate, and handled\nvia another mechanism.\nIf shortcuts should be generally enabled, but are not easily defined in a\ncontext surrounding the menu bar, consider registering them with a\nShortcutRegistry (one is already included in the WidgetsApp, and thus\nalso MaterialApp and CupertinoApp), as shown in the example below. To be\nsure that selecting a menu item and triggering the shortcut do the same\nthing, it is recommended that they call the same callback.\nThis example shows a MenuBar that contains a single top\nlevel menu, containing three items: \"About\", a checkbox menu item for\nshowing a message, and \"Quit\". The items are identified with an enum value,\nand the shortcuts are registered globally with the ShortcutRegistry.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.MenuBar.1 mysample\nImplementation\nfinal MenuSerializableShortcut? shortcut;\nFlutter\nmaterial\nCheckboxMenuButton\nshortcut property\nCheckboxMenuButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\n/// Flutter code sample for [MenuBar].\n\nvoid main() => runApp(const MenuBarApp());\n\n/// A class for consolidating the definition of menu entries.\n///\n/// This sort of class is not required, but illustrates one way that defining\n/// menus could be done.\nclass MenuEntry {\n  const MenuEntry(\n      {required this.label, this.shortcut, this.onPressed, this.menuChildren})\n      : assert(menuChildren == null || onPressed == null,\n            'onPressed is ignored if menuChildren are provided');\n  final String label;\n\n  final MenuSerializableShortcut? shortcut;\n  final VoidCallback? onPressed;\n  final List<MenuEntry>? menuChildren;\n\n  static List<Widget> build(List<MenuEntry> selections) {\n    Widget buildSelection(MenuEntry selection) {\n      if (selection.menuChildren != null) {\n        return SubmenuButton(\n          menuChildren: MenuEntry.build(selection.menuChildren!),\n          child: Text(selection.label),\n        );\n      }\n      return MenuItemButton(\n        shortcut: selection.shortcut,\n        onPressed: selection.onPressed,\n        child: Text(selection.label),\n      );\n    }\n\n    return selections.map<Widget>(buildSelection).toList();\n  }\n\n  static Map<MenuSerializableShortcut, Intent> shortcuts(\n      List<MenuEntry> selections) {\n    final Map<MenuSerializableShortcut, Intent> result =\n        <MenuSerializableShortcut, Intent>{};\n    for (final MenuEntry selection in selections) {\n      if (selection.menuChildren != null) {\n        result.addAll(MenuEntry.shortcuts(selection.menuChildren!));\n      } else {\n        if (selection.shortcut != null && selection.onPressed != null) {\n          result[selection.shortcut!] =\n              VoidCallbackIntent(selection.onPressed!);\n        }\n      }\n    }\n    return result;\n  }\n}\n\nclass MyMenuBar extends StatefulWidget {\n  const MyMenuBar({\n    super.key,\n    required this.message,\n  });\n\n  final String message;\n\n  @override\n  State<MyMenuBar> createState() => _MyMenuBarState();\n}\n\nclass _MyMenuBarState extends State<MyMenuBar> {\n  ShortcutRegistryEntry? _shortcutsEntry;\n  String? _lastSelection;\n\n  Color get backgroundColor => _backgroundColor;\n  Color _backgroundColor = Colors.red;\n  set backgroundColor(Color value) {\n    if (_backgroundColor != value) {\n      setState(() {\n        _backgroundColor = value;\n      });\n    }\n  }\n\n  bool get showingMessage => _showMessage;\n  bool _showMessage = false;\n  set showingMessage(bool value) {\n    if (_showMessage != value) {\n      setState(() {\n        _showMessage = value;\n      });\n    }\n  }\n\n  @override\n  void dispose() {\n    _shortcutsEntry?.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: <Widget>[\n        Row(\n          mainAxisSize: MainAxisSize.min,\n          children: <Widget>[\n            Expanded(\n              child: MenuBar(\n                children: MenuEntry.build(_getMenus()),\n              ),\n            ),\n          ],\n        ),\n        Expanded(\n          child: Container(\n            alignment: Alignment.center,\n            color: backgroundColor,\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                Padding(\n                  padding: const EdgeInsets.all(12.0),\n                  child: Text(\n                    showingMessage ? widget.message : '',\n                    style: Theme.of(context).textTheme.headlineSmall,\n                  ),\n                ),\n                Text(_lastSelection != null\n                    ? 'Last Selected: $_lastSelection'\n                    : ''),\n              ],\n            ),\n          ),\n        ),\n      ],\n    );\n  }\n\n  List<MenuEntry> _getMenus() {\n    final List<MenuEntry> result = <MenuEntry>[\n      MenuEntry(\n        label: 'Menu Demo',\n        menuChildren: <MenuEntry>[\n          MenuEntry(\n            label: 'About',\n            onPressed: () {\n              showAboutDialog(\n                context: context,\n                applicationName: 'MenuBar Sample',\n                applicationVersion: '1.0.0',\n              );\n              setState(() {\n                _lastSelection = 'About';\n              });\n            },\n          ),\n          MenuEntry(\n            label: showingMessage ? 'Hide Message' : 'Show Message',\n            onPressed: () {\n              setState(() {\n                _lastSelection =\n                    showingMessage ? 'Hide Message' : 'Show Message';\n                showingMessage = !showingMessage;\n              });\n            },\n            shortcut:\n                const SingleActivator(LogicalKeyboardKey.keyS, control: true),\n          ),\n          // Hides the message, but is only enabled if the message isn't\n          // already hidden.\n          MenuEntry(\n            label: 'Reset Message',\n            onPressed: showingMessage\n                ? () {\n                    setState(() {\n                      _lastSelection = 'Reset Message';\n                      showingMessage = false;\n                    });\n                  }\n                : null,\n            shortcut: const SingleActivator(LogicalKeyboardKey.escape),\n          ),\n          MenuEntry(\n            label: 'Background Color',\n            menuChildren: <MenuEntry>[\n              MenuEntry(\n                label: 'Red Background',\n                onPressed: () {\n                  setState(() {\n                    _lastSelection = 'Red Background';\n                    backgroundColor = Colors.red;\n                  });\n                },\n                shortcut: const SingleActivator(LogicalKeyboardKey.keyR,\n                    control: true),\n              ),\n              MenuEntry(\n                label: 'Green Background',\n                onPressed: () {\n                  setState(() {\n                    _lastSelection = 'Green Background';\n                    backgroundColor = Colors.green;\n                  });\n                },\n                shortcut: const SingleActivator(LogicalKeyboardKey.keyG,\n                    control: true),\n              ),\n              MenuEntry(\n                label: 'Blue Background',\n                onPressed: () {\n                  setState(() {\n                    _lastSelection = 'Blue Background';\n                    backgroundColor = Colors.blue;\n                  });\n                },\n                shortcut: const SingleActivator(LogicalKeyboardKey.keyB,\n                    control: true),\n              ),\n            ],\n          ),\n        ],\n      ),\n    ];\n    // (Re-)register the shortcuts with the ShortcutRegistry so that they are\n    // available to the entire application, and update them if they've changed.\n    _shortcutsEntry?.dispose();\n    _shortcutsEntry =\n        ShortcutRegistry.of(context).addAll(MenuEntry.shortcuts(result));\n    return result;\n  }\n}\n\nclass MenuBarApp extends StatelessWidget {\n  const MenuBarApp({super.key});\n\n  static const String kMessage = '\"Talk less. Smile more.\" - A. Burr';\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: Scaffold(body: SafeArea(child: MyMenuBar(message: kMessage))),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Chip/onDeleted.html",
  "title": "onDeleted property - Chip class - material library - Dart API",
  "documentation_content": "onDeleted property - Chip class - material library - Dart API\nmenu\nFlutter\nmaterial\nChip\nonDeleted property\nonDeleted\nbrightness_4\nbrightness_5\ndescription\nonDeleted property\n@override\nVoidCallback?\nonDeleted\nfinal\nCalled when the user taps the deleteIcon to delete the chip.\nIf null, the delete button will not appear on the chip.\nThe chip will not automatically remove itself: this just tells the app\nthat the user tapped the delete button. In order to delete the chip, you\nhave to do something similar to the following sample:\nThis sample shows how to use onDeleted to remove an entry when the\ndelete button is tapped.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=chip.DeletableChipAttributes.onDeleted.1 mysample\nImplementation\n@override\nfinal VoidCallback? onDeleted;\nFlutter\nmaterial\nChip\nonDeleted property\nChip class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DeletableChipAttributes.onDeleted].\n\nvoid main() => runApp(const OnDeletedExampleApp());\n\nclass OnDeletedExampleApp extends StatelessWidget {\n  const OnDeletedExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n            title: const Text('DeletableChipAttributes.onDeleted Sample')),\n        body: const Center(\n          child: OnDeletedExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass Actor {\n  const Actor(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastList extends StatefulWidget {\n  const CastList({super.key});\n\n  @override\n  State createState() => CastListState();\n}\n\nclass CastListState extends State<CastList> {\n  final List<Actor> _cast = <Actor>[\n    const Actor('Aaron Burr', 'AB'),\n    const Actor('Alexander Hamilton', 'AH'),\n    const Actor('Eliza Hamilton', 'EH'),\n    const Actor('James Madison', 'JM'),\n  ];\n\n  Iterable<Widget> get actorWidgets {\n    return _cast.map((Actor actor) {\n      return Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: Chip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          onDeleted: () {\n            setState(() {\n              _cast.removeWhere((Actor entry) {\n                return entry.name == actor.name;\n              });\n            });\n          },\n        ),\n      );\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: actorWidgets.toList(),\n    );\n  }\n}\n\nclass OnDeletedExample extends StatefulWidget {\n  const OnDeletedExample({super.key});\n\n  @override\n  State<OnDeletedExample> createState() => _OnDeletedExampleState();\n}\n\nclass _OnDeletedExampleState extends State<OnDeletedExample> {\n  @override\n  Widget build(BuildContext context) {\n    return const CastList();\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ChoiceChip-class.html",
  "title": "ChoiceChip class - material library - Dart API",
  "documentation_content": "ChoiceChip class - material library - Dart API\nmenu\nFlutter\nmaterial\nChoiceChip class\nChoiceChip\nbrightness_4\nbrightness_5\ndescription\nChoiceChip class\nA Material Design choice chip.\nChoiceChips represent a single choice from a set. Choice chips contain\nrelated descriptive text or categories.\nRequires one of its ancestors to be a Material widget.\nThis example shows how to create ChoiceChips with onSelected. When the\nuser taps, the chip will be selected.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ChoiceChip.1 mysample\nMaterial Design 3\nChoiceChip can be used for single select Filter chips from\nMaterial Design 3. If ThemeData.useMaterial3 is true, then ChoiceChip\nwill be styled to match the Material Design 3 specification for Filter\nchips. Use FilterChip for multiple select Filter chips.\nSee also:\nChip, a chip that displays information and can be deleted.\nInputChip, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.\nFilterChip, uses tags or descriptive words as a way to filter content.\nActionChip, represents an action related to primary content.\nCircleAvatar, which shows images or initials of people.\nWrap, A widget that displays its children in multiple horizontal or\nvertical runs.\nmaterial.io/design/components/chips.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nChoiceChip\nImplemented types\nChipAttributes\nSelectableChipAttributes\nCheckmarkableChipAttributes\nDisabledChipAttributes\nConstructors\nChoiceChip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, ValueChanged<bool>? onSelected, double? pressElevation, required bool selected, Color? selectedColor, Color? disabledColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialStateProperty<Color?>? color, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder()})\nCreate a chip that acts like a radio button.\nconst\nChoiceChip.elevated({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, ValueChanged<bool>? onSelected, double? pressElevation, required bool selected, Color? selectedColor, Color? disabledColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialStateProperty<Color?>? color, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder()})\nCreate an elevated chip that acts like a radio button.\nconst\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\navatar\n\u2192 Widget?\nA widget to display prior to the chip's label.\nfinal\navatarBorder\n\u2192 ShapeBorder\nThe shape of the translucent highlight painted over the avatar when the\nselected property is true.\nfinal\nbackgroundColor\n\u2192 Color?\nColor to be used for the unselected, enabled chip's background.\nfinal\ncheckmarkColor\n\u2192 Color?\nColor of the chip's check mark when a check mark is visible.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncolor\n\u2192 MaterialStateProperty<Color?>?\nThe color that fills the chip, in all MaterialStates.\nfinal\ndisabledColor\n\u2192 Color?\nThe color used for the chip's background to indicate that it is not\nenabled.\nfinal\nelevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\niconTheme\n\u2192 IconThemeData?\nTheme used for all icons in the chip.\nfinal\nisEnabled\n\u2192 bool\nWhether or not this chip is enabled for input.\nread-onlyoverride\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nlabel\n\u2192 Widget\nThe primary content of the chip.\nfinal\nlabelPadding\n\u2192 EdgeInsetsGeometry?\nThe padding around the label widget.\nfinal\nlabelStyle\n\u2192 TextStyle?\nThe style to be applied to the chip's label.\nfinal\nmaterialTapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the tap target.\nfinal\nonSelected\n\u2192 ValueChanged<bool>?\nCalled when the chip should change between selected and de-selected\nstates.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe padding between the contents of the chip and the outside shape.\nfinal\npressElevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent during the\npress motion.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselected\n\u2192 bool\nWhether or not this chip is selected.\nfinal\nselectedColor\n\u2192 Color?\nColor to be used for the chip's background, indicating that it is\nselected.\nfinal\nselectedShadowColor\n\u2192 Color?\nColor of the chip's shadow when the elevation is greater than 0 and the\nchip is selected.\nfinal\nshadowColor\n\u2192 Color?\nColor of the chip's shadow when the elevation is greater than 0.\nfinal\nshape\n\u2192 OutlinedBorder?\nThe OutlinedBorder to draw around the chip.\nfinal\nshowCheckmark\n\u2192 bool?\nWhether or not to show a check mark when\nSelectableChipAttributes.selected is true.\nfinal\nside\n\u2192 BorderSide?\nThe color and weight of the chip's outline.\nfinal\nsurfaceTintColor\n\u2192 Color?\nColor of the chip's surface tint overlay when its elevation is\ngreater than 0.\nfinal\ntooltip\n\u2192 String?\nTooltip string to be used for the body area (where the label and avatar\nare) of the chip.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the chip's layout will be.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nChoiceChip class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ActionChoice].\n\nvoid main() => runApp(const ChipApp());\n\nclass ChipApp extends StatelessWidget {\n  const ChipApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: const ActionChoiceExample(),\n    );\n  }\n}\n\nclass ActionChoiceExample extends StatefulWidget {\n  const ActionChoiceExample({super.key});\n\n  @override\n  State<ActionChoiceExample> createState() => _ActionChoiceExampleState();\n}\n\nclass _ActionChoiceExampleState extends State<ActionChoiceExample> {\n  int? _value = 1;\n\n  @override\n  Widget build(BuildContext context) {\n    final TextTheme textTheme = Theme.of(context).textTheme;\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('ActionChoice Sample'),\n      ),\n      body: Center(\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text('Choose an item', style: textTheme.labelLarge),\n            const SizedBox(height: 10.0),\n            Wrap(\n              spacing: 5.0,\n              children: List<Widget>.generate(\n                3,\n                (int index) {\n                  return ChoiceChip(\n                    label: Text('Item $index'),\n                    selected: _value == index,\n                    onSelected: (bool selected) {\n                      setState(() {\n                        _value = selected ? index : null;\n                      });\n                    },\n                  );\n                },\n              ).toList(),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/CircularProgressIndicator-class.html",
  "title": "CircularProgressIndicator class - material library - Dart API",
  "documentation_content": "CircularProgressIndicator class - material library - Dart API\nmenu\nFlutter\nmaterial\nCircularProgressIndicator class\nCircularProgressIndicator\nbrightness_4\nbrightness_5\ndescription\nCircularProgressIndicator class\nA Material Design circular progress indicator, which spins to indicate that\nthe application is busy.\nA widget that shows progress along a circle. There are two kinds of circular\nprogress indicators:\nDeterminate. Determinate progress indicators have a specific value at\neach point in time, and the value should increase monotonically from 0.0\nto 1.0, at which time the indicator is complete. To create a determinate\nprogress indicator, use a non-null value between 0.0 and 1.0.\nIndeterminate. Indeterminate progress indicators do not have a specific\nvalue at each point in time and instead indicate that progress is being\nmade without indicating how much progress remains. To create an\nindeterminate progress indicator, use a null value.\nThe indicator arc is displayed with valueColor, an animated value. To\nspecify a constant color use: AlwaysStoppedAnimation<Color>(color).\nThis example shows a CircularProgressIndicator with a changing value.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.CircularProgressIndicator.1 mysample\nThis sample shows the creation of a CircularProgressIndicator with a changing value.\nWhen toggling the switch, CircularProgressIndicator uses a determinate value.\nAs described in: https://m3.material.io/components/progress-indicators/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.CircularProgressIndicator.2 mysample\nSee also:\nLinearProgressIndicator, which displays progress along a line.\nRefreshIndicator, which automatically displays a CircularProgressIndicator\nwhen the underlying vertical scrollable is overscrolled.\nmaterial.io/design/components/progress-indicators.html#circular-progress-indicators\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nProgressIndicator\nCircularProgressIndicator\nImplementers\nRefreshProgressIndicator\nConstructors\nCircularProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double strokeWidth = 4.0, double strokeAlign = strokeAlignCenter, String? semanticsLabel, String? semanticsValue, StrokeCap? strokeCap})\nCreates a circular progress indicator.\nconst\nCircularProgressIndicator.adaptive({Key? key, double? value, Color? backgroundColor, Animation<Color?>? valueColor, double strokeWidth = 4.0, String? semanticsLabel, String? semanticsValue, StrokeCap? strokeCap, double strokeAlign = strokeAlignCenter})\nCreates an adaptive progress indicator that is a\nCupertinoActivityIndicator in iOS and CircularProgressIndicator in\nmaterial theme/non-iOS.\nconst\nProperties\nbackgroundColor\n\u2192 Color?\nColor of the circular track being filled by the circular indicator.\nread-onlyoverride\ncolor\n\u2192 Color?\nThe progress indicator's color.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsemanticsLabel\n\u2192 String?\nThe SemanticsProperties.label for this progress indicator.\nfinalinherited\nsemanticsValue\n\u2192 String?\nThe SemanticsProperties.value for this progress indicator.\nfinalinherited\nstrokeAlign\n\u2192 double\nThe relative position of the stroke on a CircularProgressIndicator.\nfinal\nstrokeCap\n\u2192 StrokeCap?\nThe progress indicator's line ending.\nfinal\nstrokeWidth\n\u2192 double\nThe width of the line used to draw the circle.\nfinal\nvalue\n\u2192 double?\nIf non-null, the value of this progress indicator.\nfinalinherited\nvalueColor\n\u2192 Animation<Color?>?\nThe progress indicator's color as an animated value.\nfinalinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<CircularProgressIndicator>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nConstants\nstrokeAlignCenter\n\u2192 const double\nThe indicator stroke is drawn on the center of the indicator path,\nwith half of the strokeWidth on the inside, and the other half\non the outside of the path.\n0.0\nstrokeAlignInside\n\u2192 const double\nThe indicator stroke is drawn fully inside of the indicator path.\n-1.0\nstrokeAlignOutside\n\u2192 const double\nThe indicator stroke is drawn on the outside of the indicator path.\n1.0\nFlutter\nmaterial\nCircularProgressIndicator class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [CircularProgressIndicator].\n\nvoid main() => runApp(const ProgressIndicatorApp());\n\nclass ProgressIndicatorApp extends StatelessWidget {\n  const ProgressIndicatorApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          useMaterial3: true, colorSchemeSeed: const Color(0xff6750a4)),\n      home: const ProgressIndicatorExample(),\n    );\n  }\n}\n\nclass ProgressIndicatorExample extends StatefulWidget {\n  const ProgressIndicatorExample({super.key});\n\n  @override\n  State<ProgressIndicatorExample> createState() =>\n      _ProgressIndicatorExampleState();\n}\n\nclass _ProgressIndicatorExampleState extends State<ProgressIndicatorExample>\n    with TickerProviderStateMixin {\n  late AnimationController controller;\n  bool determinate = false;\n\n  @override\n  void initState() {\n    controller = AnimationController(\n      /// [AnimationController]s can be created with `vsync: this` because of\n      /// [TickerProviderStateMixin].\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )..addListener(() {\n        setState(() {});\n      });\n    controller.repeat(reverse: true);\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Padding(\n        padding: const EdgeInsets.all(20.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              'Circular progress indicator',\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            const SizedBox(height: 30),\n            CircularProgressIndicator(\n              value: controller.value,\n              semanticsLabel: 'Circular progress indicator',\n            ),\n            const SizedBox(height: 10),\n            Row(\n              children: <Widget>[\n                Expanded(\n                  child: Text(\n                    'determinate Mode',\n                    style: Theme.of(context).textTheme.titleSmall,\n                  ),\n                ),\n                Switch(\n                  value: determinate,\n                  onChanged: (bool value) {\n                    setState(() {\n                      determinate = value;\n                      if (determinate) {\n                        controller.stop();\n                      } else {\n                        controller\n                          ..forward(from: controller.value)\n                          ..repeat();\n                      }\n                    });\n                  },\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [CircularProgressIndicator].\n\nvoid main() => runApp(const ProgressIndicatorApp());\n\nclass ProgressIndicatorApp extends StatelessWidget {\n  const ProgressIndicatorApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: ProgressIndicatorExample(),\n    );\n  }\n}\n\nclass ProgressIndicatorExample extends StatefulWidget {\n  const ProgressIndicatorExample({super.key});\n\n  @override\n  State<ProgressIndicatorExample> createState() =>\n      _ProgressIndicatorExampleState();\n}\n\nclass _ProgressIndicatorExampleState extends State<ProgressIndicatorExample>\n    with TickerProviderStateMixin {\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    controller = AnimationController(\n      /// [AnimationController]s can be created with `vsync: this` because of\n      /// [TickerProviderStateMixin].\n      vsync: this,\n      duration: const Duration(seconds: 5),\n    )..addListener(() {\n        setState(() {});\n      });\n    controller.repeat(reverse: true);\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Padding(\n        padding: const EdgeInsets.all(20.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: <Widget>[\n            Text(\n              'Circular progress indicator with a fixed color',\n              style: Theme.of(context).textTheme.titleLarge,\n            ),\n            CircularProgressIndicator(\n              value: controller.value,\n              semanticsLabel: 'Circular progress indicator',\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ColorScheme/fromImageProvider.html",
  "title": "fromImageProvider method - ColorScheme class - material library - Dart API",
  "documentation_content": "fromImageProvider method - ColorScheme class - material library - Dart API\nmenu\nFlutter\nmaterial\nColorScheme\nfromImageProvider static method\nfromImageProvider\nbrightness_4\nbrightness_5\ndescription\nfromImageProvider static method\nFuture<ColorScheme>\nfromImageProvider({required ImageProvider<Object> provider,\nBrightness brightness = Brightness.light,\nColor? primary,\nColor? onPrimary,\nColor? primaryContainer,\nColor? onPrimaryContainer,\nColor? secondary,\nColor? onSecondary,\nColor? secondaryContainer,\nColor? onSecondaryContainer,\nColor? tertiary,\nColor? onTertiary,\nColor? tertiaryContainer,\nColor? onTertiaryContainer,\nColor? error,\nColor? onError,\nColor? errorContainer,\nColor? onErrorContainer,\nColor? outline,\nColor? outlineVariant,\nColor? background,\nColor? onBackground,\nColor? surface,\nColor? onSurface,\nColor? surfaceVariant,\nColor? onSurfaceVariant,\nColor? inverseSurface,\nColor? onInverseSurface,\nColor? inversePrimary,\nColor? shadow,\nColor? scrim,\nColor? surfaceTint}\n)\nGenerate a ColorScheme derived from the given imageProvider.\nMaterial Color Utilities extracts the dominant color from the\nsupplied ImageProvider. Using this color, a ColorScheme is generated\nwith harmnonious colors that meet contrast requirements for accessibility.\nIf any of the optional color parameters are non-null, they will be\nused in place of the generated colors for that field in the resulting\nColorScheme. This allows apps to override specific colors for their\nneeds.\nGiven the nature of the algorithm, the most dominant color of the\nimageProvider may not wind up as one of the ColorScheme colors.\nThe provided image will be scaled down to a maximum size of 112x112 pixels\nduring color extraction.\nThis sample shows how to use ColorScheme.fromImageProvider to create\ncontent-based dynamic color schemes.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ColorScheme.fromImageProvider.1 mysample\nSee also:\nM3 Guidelines: Dynamic color from content\npub.dev/packages/dynamic_color, a package to create\nColorSchemes based on a platform's implementation of dynamic color.\nm3.material.io/styles/color/the-color-system/color-roles, the\nMaterial 3 Color system specification.\npub.dev/packages/material_color_utilities, the package\nused to algorightmically determine the dominant color and to generate\nthe ColorScheme.\nImplementation\nstatic Future<ColorScheme> fromImageProvider({\nrequired ImageProvider provider,\nBrightness brightness = Brightness.light,\nColor? primary,\nColor? onPrimary,\nColor? primaryContainer,\nColor? onPrimaryContainer,\nColor? secondary,\nColor? onSecondary,\nColor? secondaryContainer,\nColor? onSecondaryContainer,\nColor? tertiary,\nColor? onTertiary,\nColor? tertiaryContainer,\nColor? onTertiaryContainer,\nColor? error,\nColor? onError,\nColor? errorContainer,\nColor? onErrorContainer,\nColor? outline,\nColor? outlineVariant,\nColor? background,\nColor? onBackground,\nColor? surface,\nColor? onSurface,\nColor? surfaceVariant,\nColor? onSurfaceVariant,\nColor? inverseSurface,\nColor? onInverseSurface,\nColor? inversePrimary,\nColor? shadow,\nColor? scrim,\nColor? surfaceTint,\n}) async {\n// Extract dominant colors from image.\nfinal QuantizerResult quantizerResult =\nawait _extractColorsFromImageProvider(provider);\nfinal Map<int, int> colorToCount = quantizerResult.colorToCount.map(\n(int key, int value) => MapEntry<int, int>(_getArgbFromAbgr(key), value),\n);\n// Score colors for color scheme suitability.\nfinal List<int> scoredResults = Score.score(colorToCount, desired: 1);\nfinal ui.Color baseColor = Color(scoredResults.first);\nfinal Scheme scheme;\nswitch (brightness) {\ncase Brightness.light:\nscheme = Scheme.light(baseColor.value);\ncase Brightness.dark:\nscheme = Scheme.dark(baseColor.value);\n}\nreturn ColorScheme(primary: primary ?? Color(scheme.primary),\nonPrimary: onPrimary ?? Color(scheme.onPrimary),\nprimaryContainer: primaryContainer ?? Color(scheme.primaryContainer),\nonPrimaryContainer: onPrimaryContainer ?? Color(scheme.onPrimaryContainer),\nsecondary: secondary ?? Color(scheme.secondary),\nonSecondary: onSecondary ?? Color(scheme.onSecondary),\nsecondaryContainer: secondaryContainer ?? Color(scheme.secondaryContainer),\nonSecondaryContainer: onSecondaryContainer ?? Color(scheme.onSecondaryContainer),\ntertiary: tertiary ?? Color(scheme.tertiary),\nonTertiary: onTertiary ?? Color(scheme.onTertiary),\ntertiaryContainer: tertiaryContainer ?? Color(scheme.tertiaryContainer),\nonTertiaryContainer: onTertiaryContainer ?? Color(scheme.onTertiaryContainer),\nerror: error ?? Color(scheme.error),\nonError: onError ?? Color(scheme.onError),\nerrorContainer: errorContainer ?? Color(scheme.errorContainer),\nonErrorContainer: onErrorContainer ?? Color(scheme.onErrorContainer),\noutline: outline ?? Color(scheme.outline),\noutlineVariant: outlineVariant ?? Color(scheme.outlineVariant),\nbackground: background ?? Color(scheme.background),\nonBackground: onBackground ?? Color(scheme.onBackground),\nsurface: surface ?? Color(scheme.surface),\nonSurface: onSurface ?? Color(scheme.onSurface),\nsurfaceVariant: surfaceVariant ?? Color(scheme.surfaceVariant),\nonSurfaceVariant: onSurfaceVariant ?? Color(scheme.onSurfaceVariant),\ninverseSurface: inverseSurface ?? Color(scheme.inverseSurface),\nonInverseSurface: onInverseSurface ?? Color(scheme.inverseOnSurface),\ninversePrimary: inversePrimary ?? Color(scheme.inversePrimary),\nshadow: shadow ?? Color(scheme.shadow),\nscrim: scrim ?? Color(scheme.scrim),\nsurfaceTint: surfaceTint ?? Color(scheme.primary),\nbrightness: brightness,\n);\n}\nFlutter\nmaterial\nColorScheme\nfromImageProvider static method\nColorScheme class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ColorScheme.fromImageProvider] with content-based dynamic color.\n\nconst Widget divider = SizedBox(height: 10);\nconst double narrowScreenWidthThreshold = 400;\n\nvoid main() => runApp(DynamicColorExample());\n\nclass DynamicColorExample extends StatefulWidget {\n  DynamicColorExample({super.key});\n\n  final List<ImageProvider> images = <NetworkImage>[\n    const NetworkImage(\n        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_1.png'),\n    const NetworkImage(\n        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_2.png'),\n    const NetworkImage(\n        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_3.png'),\n    const NetworkImage(\n        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_4.png'),\n    const NetworkImage(\n        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_5.png'),\n    const NetworkImage(\n        'https://flutter.github.io/assets-for-api-docs/assets/material/content_based_color_scheme_6.png'),\n  ];\n\n  @override\n  State<DynamicColorExample> createState() => _DynamicColorExampleState();\n}\n\nclass _DynamicColorExampleState extends State<DynamicColorExample> {\n  late ColorScheme currentColorScheme;\n  String currentHyperlinkImage = '';\n  late int selectedImage;\n  late bool isLight;\n  late bool isLoading;\n\n  @override\n  void initState() {\n    super.initState();\n    selectedImage = 0;\n    isLight = true;\n    isLoading = true;\n    currentColorScheme = const ColorScheme.light();\n    WidgetsBinding.instance.addPostFrameCallback((_) {\n      _updateImage(widget.images[selectedImage]);\n      isLoading = false;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final ColorScheme colorScheme = currentColorScheme;\n    final Color selectedColor = currentColorScheme.primary;\n\n    final ThemeData lightTheme = ThemeData(\n      colorSchemeSeed: selectedColor,\n      brightness: Brightness.light,\n      useMaterial3: false,\n    );\n    final ThemeData darkTheme = ThemeData(\n      colorSchemeSeed: selectedColor,\n      brightness: Brightness.dark,\n      useMaterial3: false,\n    );\n\n    Widget schemeLabel(String brightness, ColorScheme colorScheme) {\n      return Padding(\n        padding: const EdgeInsets.symmetric(vertical: 15),\n        child: Text(\n          brightness,\n          style: TextStyle(\n              fontWeight: FontWeight.bold,\n              color: colorScheme.onSecondaryContainer),\n        ),\n      );\n    }\n\n    Widget schemeView(ThemeData theme) {\n      return Padding(\n        padding: const EdgeInsets.symmetric(horizontal: 15),\n        child: ColorSchemeView(colorScheme: theme.colorScheme),\n      );\n    }\n\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true, colorScheme: colorScheme),\n      debugShowCheckedModeBanner: false,\n      home: Builder(\n        builder: (BuildContext context) => Scaffold(\n          appBar: AppBar(\n            title: const Text('Content Based Dynamic Color'),\n            backgroundColor: colorScheme.primary,\n            foregroundColor: colorScheme.onPrimary,\n            actions: <Widget>[\n              const Icon(Icons.light_mode),\n              Switch(\n                  activeColor: colorScheme.primary,\n                  activeTrackColor: colorScheme.surface,\n                  inactiveTrackColor: colorScheme.onSecondary,\n                  value: isLight,\n                  onChanged: (bool value) {\n                    setState(() {\n                      isLight = value;\n                      _updateImage(widget.images[selectedImage]);\n                    });\n                  })\n            ],\n          ),\n          body: Center(\n            child: isLoading\n                ? const CircularProgressIndicator()\n                : ColoredBox(\n                    color: colorScheme.secondaryContainer,\n                    child: Column(\n                      children: <Widget>[\n                        divider,\n                        _imagesRow(\n                          context,\n                          widget.images,\n                          colorScheme,\n                        ),\n                        divider,\n                        Expanded(\n                          child: ColoredBox(\n                            color: colorScheme.background,\n                            child: LayoutBuilder(builder: (BuildContext context,\n                                BoxConstraints constraints) {\n                              if (constraints.maxWidth <\n                                  narrowScreenWidthThreshold) {\n                                return SingleChildScrollView(\n                                  child: Column(\n                                    children: <Widget>[\n                                      divider,\n                                      schemeLabel(\n                                          'Light ColorScheme', colorScheme),\n                                      schemeView(lightTheme),\n                                      divider,\n                                      divider,\n                                      schemeLabel(\n                                          'Dark ColorScheme', colorScheme),\n                                      schemeView(darkTheme),\n                                    ],\n                                  ),\n                                );\n                              } else {\n                                return SingleChildScrollView(\n                                  child: Padding(\n                                    padding: const EdgeInsets.only(top: 5),\n                                    child: Column(\n                                      children: <Widget>[\n                                        Row(\n                                          children: <Widget>[\n                                            Expanded(\n                                              child: Column(\n                                                children: <Widget>[\n                                                  schemeLabel(\n                                                      'Light ColorScheme',\n                                                      colorScheme),\n                                                  schemeView(lightTheme),\n                                                ],\n                                              ),\n                                            ),\n                                            Expanded(\n                                              child: Column(\n                                                children: <Widget>[\n                                                  schemeLabel(\n                                                      'Dark ColorScheme',\n                                                      colorScheme),\n                                                  schemeView(darkTheme),\n                                                ],\n                                              ),\n                                            ),\n                                          ],\n                                        ),\n                                      ],\n                                    ),\n                                  ),\n                                );\n                              }\n                            }),\n                          ),\n                        ),\n                      ],\n                    ),\n                  ),\n          ),\n        ),\n      ),\n    );\n  }\n\n  Future<void> _updateImage(ImageProvider provider) async {\n    final ColorScheme newColorScheme = await ColorScheme.fromImageProvider(\n        provider: provider,\n        brightness: isLight ? Brightness.light : Brightness.dark);\n    setState(() {\n      selectedImage = widget.images.indexOf(provider);\n      currentColorScheme = newColorScheme;\n    });\n  }\n\n  // For small screens, have two rows of image selection. For wide screens,\n  // fit them onto one row.\n  Widget _imagesRow(BuildContext context, List<ImageProvider> images,\n      ColorScheme colorScheme) {\n    final double windowHeight = MediaQuery.of(context).size.height;\n    final double windowWidth = MediaQuery.of(context).size.width;\n    return Padding(\n      padding: const EdgeInsets.all(8.0),\n      child: LayoutBuilder(\n          builder: (BuildContext context, BoxConstraints constraints) {\n        if (constraints.maxWidth > 800) {\n          return _adaptiveLayoutImagesRow(images, colorScheme, windowHeight);\n        } else {\n          return Column(children: <Widget>[\n            _adaptiveLayoutImagesRow(\n                images.sublist(0, 3), colorScheme, windowWidth),\n            _adaptiveLayoutImagesRow(\n                images.sublist(3), colorScheme, windowWidth),\n          ]);\n        }\n      }),\n    );\n  }\n\n  Widget _adaptiveLayoutImagesRow(\n      List<ImageProvider> images, ColorScheme colorScheme, double windowWidth) {\n    return Row(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: images\n          .map(\n            (ImageProvider image) => Flexible(\n              flex: (images.length / 3).floor(),\n              child: GestureDetector(\n                onTap: () => _updateImage(image),\n                child: Card(\n                  color: widget.images.indexOf(image) == selectedImage\n                      ? colorScheme.primaryContainer\n                      : colorScheme.background,\n                  child: Padding(\n                    padding: const EdgeInsets.all(5.0),\n                    child: ConstrainedBox(\n                      constraints: BoxConstraints(maxWidth: windowWidth * .25),\n                      child: ClipRRect(\n                        borderRadius: BorderRadius.circular(8.0),\n                        child: Image(image: image),\n                      ),\n                    ),\n                  ),\n                ),\n              ),\n            ),\n          )\n          .toList(),\n    );\n  }\n}\n\nclass ColorSchemeView extends StatelessWidget {\n  const ColorSchemeView({super.key, required this.colorScheme});\n\n  final ColorScheme colorScheme;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: <Widget>[\n        ColorGroup(children: <ColorChip>[\n          ColorChip(\n              label: 'primary',\n              color: colorScheme.primary,\n              onColor: colorScheme.onPrimary),\n          ColorChip(\n              label: 'onPrimary',\n              color: colorScheme.onPrimary,\n              onColor: colorScheme.primary),\n          ColorChip(\n              label: 'primaryContainer',\n              color: colorScheme.primaryContainer,\n              onColor: colorScheme.onPrimaryContainer),\n          ColorChip(\n              label: 'onPrimaryContainer',\n              color: colorScheme.onPrimaryContainer,\n              onColor: colorScheme.primaryContainer),\n        ]),\n        divider,\n        ColorGroup(children: <ColorChip>[\n          ColorChip(\n              label: 'secondary',\n              color: colorScheme.secondary,\n              onColor: colorScheme.onSecondary),\n          ColorChip(\n              label: 'onSecondary',\n              color: colorScheme.onSecondary,\n              onColor: colorScheme.secondary),\n          ColorChip(\n              label: 'secondaryContainer',\n              color: colorScheme.secondaryContainer,\n              onColor: colorScheme.onSecondaryContainer),\n          ColorChip(\n              label: 'onSecondaryContainer',\n              color: colorScheme.onSecondaryContainer,\n              onColor: colorScheme.secondaryContainer),\n        ]),\n        divider,\n        ColorGroup(\n          children: <ColorChip>[\n            ColorChip(\n                label: 'tertiary',\n                color: colorScheme.tertiary,\n                onColor: colorScheme.onTertiary),\n            ColorChip(\n                label: 'onTertiary',\n                color: colorScheme.onTertiary,\n                onColor: colorScheme.tertiary),\n            ColorChip(\n                label: 'tertiaryContainer',\n                color: colorScheme.tertiaryContainer,\n                onColor: colorScheme.onTertiaryContainer),\n            ColorChip(\n                label: 'onTertiaryContainer',\n                color: colorScheme.onTertiaryContainer,\n                onColor: colorScheme.tertiaryContainer),\n          ],\n        ),\n        divider,\n        ColorGroup(\n          children: <ColorChip>[\n            ColorChip(\n                label: 'error',\n                color: colorScheme.error,\n                onColor: colorScheme.onError),\n            ColorChip(\n                label: 'onError',\n                color: colorScheme.onError,\n                onColor: colorScheme.error),\n            ColorChip(\n                label: 'errorContainer',\n                color: colorScheme.errorContainer,\n                onColor: colorScheme.onErrorContainer),\n            ColorChip(\n                label: 'onErrorContainer',\n                color: colorScheme.onErrorContainer,\n                onColor: colorScheme.errorContainer),\n          ],\n        ),\n        divider,\n        ColorGroup(\n          children: <ColorChip>[\n            ColorChip(\n                label: 'background',\n                color: colorScheme.background,\n                onColor: colorScheme.onBackground),\n            ColorChip(\n                label: 'onBackground',\n                color: colorScheme.onBackground,\n                onColor: colorScheme.background),\n          ],\n        ),\n        divider,\n        ColorGroup(\n          children: <ColorChip>[\n            ColorChip(\n                label: 'surface',\n                color: colorScheme.surface,\n                onColor: colorScheme.onSurface),\n            ColorChip(\n                label: 'onSurface',\n                color: colorScheme.onSurface,\n                onColor: colorScheme.surface),\n            ColorChip(\n                label: 'surfaceVariant',\n                color: colorScheme.surfaceVariant,\n                onColor: colorScheme.onSurfaceVariant),\n            ColorChip(\n                label: 'onSurfaceVariant',\n                color: colorScheme.onSurfaceVariant,\n                onColor: colorScheme.surfaceVariant),\n          ],\n        ),\n        divider,\n        ColorGroup(\n          children: <ColorChip>[\n            ColorChip(label: 'outline', color: colorScheme.outline),\n            ColorChip(label: 'shadow', color: colorScheme.shadow),\n            ColorChip(\n                label: 'inverseSurface',\n                color: colorScheme.inverseSurface,\n                onColor: colorScheme.onInverseSurface),\n            ColorChip(\n                label: 'onInverseSurface',\n                color: colorScheme.onInverseSurface,\n                onColor: colorScheme.inverseSurface),\n            ColorChip(\n                label: 'inversePrimary',\n                color: colorScheme.inversePrimary,\n                onColor: colorScheme.primary),\n          ],\n        ),\n      ],\n    );\n  }\n}\n\nclass ColorGroup extends StatelessWidget {\n  const ColorGroup({super.key, required this.children});\n\n  final List<Widget> children;\n\n  @override\n  Widget build(BuildContext context) {\n    return RepaintBoundary(\n      child:\n          Card(clipBehavior: Clip.antiAlias, child: Column(children: children)),\n    );\n  }\n}\n\nclass ColorChip extends StatelessWidget {\n  const ColorChip({\n    super.key,\n    required this.color,\n    required this.label,\n    this.onColor,\n  });\n\n  final Color color;\n  final Color? onColor;\n  final String label;\n\n  static Color contrastColor(Color color) {\n    final Brightness brightness = ThemeData.estimateBrightnessForColor(color);\n    switch (brightness) {\n      case Brightness.dark:\n        return Colors.white;\n      case Brightness.light:\n        return Colors.black;\n    }\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final Color labelColor = onColor ?? contrastColor(color);\n    return ColoredBox(\n      color: color,\n      child: Padding(\n        padding: const EdgeInsets.all(16),\n        child: Row(\n          children: <Expanded>[\n            Expanded(child: Text(label, style: TextStyle(color: labelColor))),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/DataTable-class.html",
  "title": "DataTable class - material library - Dart API",
  "documentation_content": "DataTable class - material library - Dart API\nmenu\nFlutter\nmaterial\nDataTable class\nDataTable\nbrightness_4\nbrightness_5\ndescription\nDataTable class\nA Material Design data table.\nDisplaying data in a table is expensive, because to lay out the\ntable all the data must be measured twice, once to negotiate the\ndimensions to use for each column, and once to actually lay out\nthe table given the results of the negotiation.\nFor this reason, if you have a lot of data (say, more than a dozen\nrows with a dozen columns, though the precise limits depend on the\ntarget device), it is suggested that you use a\nPaginatedDataTable which automatically splits the data into\nmultiple pages.\nPerformance considerations when wrapping DataTable with SingleChildScrollView\nWrapping a DataTable with SingleChildScrollView is expensive as SingleChildScrollView\nmounts and paints the entire DataTable even when only some rows are visible. If scrolling in\none direction is necessary, then consider using a CustomScrollView, otherwise use PaginatedDataTable\nto split the data into smaller pages.\nThis sample shows how to display a DataTable with three columns: name, age, and\nrole. The columns are defined by three DataColumn objects. The table\ncontains three rows of data for three example users, the data for which\nis defined by three DataRow objects.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DataTable.1 mysample\nThis sample shows how to display a DataTable with alternate colors per\nrow, and a custom color for when the row is selected.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DataTable.2 mysample\nDataTable can be sorted on the basis of any column in columns in\nascending or descending order. If sortColumnIndex is non-null, then the\ntable will be sorted by the values in the specified column. The boolean\nsortAscending flag controls the sort order.\nSee also:\nDataColumn, which describes a column in the data table.\nDataRow, which contains the data for a row in the data table.\nDataCell, which contains the data for a single cell in the data table.\nPaginatedDataTable, which shows part of the data in a data table and\nprovides controls for paging through the remainder of the data.\nmaterial.io/design/components/data-tables.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nDataTable\nConstructors\nDataTable({Key? key, required List<DataColumn> columns, int? sortColumnIndex, bool sortAscending = true, ValueSetter<bool?>? onSelectAll, Decoration? decoration, MaterialStateProperty<Color?>? dataRowColor, @Deprecated('Migrate to use dataRowMinHeight and dataRowMaxHeight instead. ' 'This feature was deprecated after v3.7.0-5.0.pre.') double? dataRowHeight, double? dataRowMinHeight, double? dataRowMaxHeight, TextStyle? dataTextStyle, MaterialStateProperty<Color?>? headingRowColor, double? headingRowHeight, TextStyle? headingTextStyle, double? horizontalMargin, double? columnSpacing, bool showCheckboxColumn = true, bool showBottomBorder = false, double? dividerThickness, required List<DataRow> rows, double? checkboxHorizontalMargin, TableBorder? border, Clip clipBehavior = Clip.none})\nCreates a widget describing a data table.\nProperties\nborder\n\u2192 TableBorder?\nThe style to use when painting the boundary and interior divisions of the table.\nfinal\ncheckboxHorizontalMargin\n\u2192 double?\nHorizontal margin around the checkbox, if it is displayed.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncolumns\n\u2192 List<DataColumn>\nThe configuration and labels for the columns in the table.\nfinal\ncolumnSpacing\n\u2192 double?\nThe horizontal margin between the contents of each data column.\nfinal\ndataRowColor\n\u2192 MaterialStateProperty<Color?>?\nThe background color for the data rows.\nfinal\ndataRowHeight\n\u2192 double?\nThe height of each row (excluding the row that contains column headings).\nread-only\ndataRowMaxHeight\n\u2192 double?\nThe maximum height of each row (excluding the row that contains column headings).\nfinal\ndataRowMinHeight\n\u2192 double?\nThe minimum height of each row (excluding the row that contains column headings).\nfinal\ndataTextStyle\n\u2192 TextStyle?\nThe text style for data rows.\nfinal\ndecoration\n\u2192 Decoration?\nThe background and border decoration for the table.\nfinal\ndividerThickness\n\u2192 double?\nThe width of the divider that appears between TableRows.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheadingRowColor\n\u2192 MaterialStateProperty<Color?>?\nThe background color for the heading row.\nfinal\nheadingRowHeight\n\u2192 double?\nThe height of the heading row.\nfinal\nheadingTextStyle\n\u2192 TextStyle?\nThe text style for the heading row.\nfinal\nhorizontalMargin\n\u2192 double?\nThe horizontal margin between the edges of the table and the content\nin the first and last cells of each row.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonSelectAll\n\u2192 ValueSetter<bool?>?\nInvoked when the user selects or unselects every row, using the\ncheckbox in the heading row.\nfinal\nrows\n\u2192 List<DataRow>\nThe data to show in each row (excluding the row that contains\nthe column headings).\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshowBottomBorder\n\u2192 bool\nWhether a border at the bottom of the table is displayed.\nfinal\nshowCheckboxColumn\n\u2192 bool\nWhether the widget should display checkboxes for selectable rows.\nfinal\nsortAscending\n\u2192 bool\nWhether the column mentioned in sortColumnIndex, if any, is sorted\nin ascending order.\nfinal\nsortColumnIndex\n\u2192 int?\nThe current primary sort key's column.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nDataTable class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DataTable].\n\nvoid main() => runApp(const DataTableExampleApp());\n\nclass DataTableExampleApp extends StatelessWidget {\n  const DataTableExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('DataTable Sample')),\n        body: const DataTableExample(),\n      ),\n    );\n  }\n}\n\nclass DataTableExample extends StatelessWidget {\n  const DataTableExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return DataTable(\n      columns: const <DataColumn>[\n        DataColumn(\n          label: Expanded(\n            child: Text(\n              'Name',\n              style: TextStyle(fontStyle: FontStyle.italic),\n            ),\n          ),\n        ),\n        DataColumn(\n          label: Expanded(\n            child: Text(\n              'Age',\n              style: TextStyle(fontStyle: FontStyle.italic),\n            ),\n          ),\n        ),\n        DataColumn(\n          label: Expanded(\n            child: Text(\n              'Role',\n              style: TextStyle(fontStyle: FontStyle.italic),\n            ),\n          ),\n        ),\n      ],\n      rows: const <DataRow>[\n        DataRow(\n          cells: <DataCell>[\n            DataCell(Text('Sarah')),\n            DataCell(Text('19')),\n            DataCell(Text('Student')),\n          ],\n        ),\n        DataRow(\n          cells: <DataCell>[\n            DataCell(Text('Janine')),\n            DataCell(Text('43')),\n            DataCell(Text('Professor')),\n          ],\n        ),\n        DataRow(\n          cells: <DataCell>[\n            DataCell(Text('William')),\n            DataCell(Text('27')),\n            DataCell(Text('Associate Professor')),\n          ],\n        ),\n      ],\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DataTable].\n\nvoid main() => runApp(const DataTableExampleApp());\n\nclass DataTableExampleApp extends StatelessWidget {\n  const DataTableExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('DataTable Sample')),\n        body: const DataTableExample(),\n      ),\n    );\n  }\n}\n\nclass DataTableExample extends StatefulWidget {\n  const DataTableExample({super.key});\n\n  @override\n  State<DataTableExample> createState() => _DataTableExampleState();\n}\n\nclass _DataTableExampleState extends State<DataTableExample> {\n  static const int numItems = 20;\n  List<bool> selected = List<bool>.generate(numItems, (int index) => false);\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: DataTable(\n        columns: const <DataColumn>[\n          DataColumn(\n            label: Text('Number'),\n          ),\n        ],\n        rows: List<DataRow>.generate(\n          numItems,\n          (int index) => DataRow(\n            color: MaterialStateProperty.resolveWith<Color?>(\n                (Set<MaterialState> states) {\n              // All rows will have the same selected color.\n              if (states.contains(MaterialState.selected)) {\n                return Theme.of(context).colorScheme.primary.withOpacity(0.08);\n              }\n              // Even rows will have a grey color.\n              if (index.isEven) {\n                return Colors.grey.withOpacity(0.3);\n              }\n              return null; // Use default value for other states and odd rows.\n            }),\n            cells: <DataCell>[DataCell(Text('Row $index'))],\n            selected: selected[index],\n            onSelectChanged: (bool? value) {\n              setState(() {\n                selected[index] = value!;\n              });\n            },\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/DeletableChipAttributes/onDeleted.html",
  "title": "onDeleted property - DeletableChipAttributes class - material library - Dart API",
  "documentation_content": "onDeleted property - DeletableChipAttributes class - material library - Dart API\nmenu\nFlutter\nmaterial\nDeletableChipAttributes\nonDeleted property\nonDeleted\nbrightness_4\nbrightness_5\ndescription\nonDeleted property\nVoidCallback?\nonDeleted\nCalled when the user taps the deleteIcon to delete the chip.\nIf null, the delete button will not appear on the chip.\nThe chip will not automatically remove itself: this just tells the app\nthat the user tapped the delete button. In order to delete the chip, you\nhave to do something similar to the following sample:\nThis sample shows how to use onDeleted to remove an entry when the\ndelete button is tapped.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DeletableChipAttributes.onDeleted.1 mysample\nImplementation\nVoidCallback? get onDeleted;\nFlutter\nmaterial\nDeletableChipAttributes\nonDeleted property\nDeletableChipAttributes class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DeletableChipAttributes.onDeleted].\n\nvoid main() => runApp(const OnDeletedExampleApp());\n\nclass OnDeletedExampleApp extends StatelessWidget {\n  const OnDeletedExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n            title: const Text('DeletableChipAttributes.onDeleted Sample')),\n        body: const Center(\n          child: OnDeletedExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass Actor {\n  const Actor(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastList extends StatefulWidget {\n  const CastList({super.key});\n\n  @override\n  State createState() => CastListState();\n}\n\nclass CastListState extends State<CastList> {\n  final List<Actor> _cast = <Actor>[\n    const Actor('Aaron Burr', 'AB'),\n    const Actor('Alexander Hamilton', 'AH'),\n    const Actor('Eliza Hamilton', 'EH'),\n    const Actor('James Madison', 'JM'),\n  ];\n\n  Iterable<Widget> get actorWidgets {\n    return _cast.map((Actor actor) {\n      return Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: Chip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          onDeleted: () {\n            setState(() {\n              _cast.removeWhere((Actor entry) {\n                return entry.name == actor.name;\n              });\n            });\n          },\n        ),\n      );\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: actorWidgets.toList(),\n    );\n  }\n}\n\nclass OnDeletedExample extends StatefulWidget {\n  const OnDeletedExample({super.key});\n\n  @override\n  State<OnDeletedExample> createState() => _OnDeletedExampleState();\n}\n\nclass _OnDeletedExampleState extends State<OnDeletedExample> {\n  @override\n  Widget build(BuildContext context) {\n    return const CastList();\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Dialog-class.html",
  "title": "Dialog class - material library - Dart API",
  "documentation_content": "Dialog class - material library - Dart API\nmenu\nFlutter\nmaterial\nDialog class\nDialog\nbrightness_4\nbrightness_5\ndescription\nDialog class\nA Material Design dialog.\nThis dialog widget does not have any opinion about the contents of the\ndialog. Rather than using this widget directly, consider using AlertDialog\nor SimpleDialog, which implement specific kinds of Material Design\ndialogs.\nThis sample shows the creation of Dialog and Dialog.fullscreen widgets.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Dialog.1 mysample\nSee also:\nAlertDialog, for dialogs that have a message and some buttons.\nSimpleDialog, for dialogs that offer a variety of options.\nshowDialog, which actually displays the dialog and returns its result.\nmaterial.io/design/components/dialogs.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nDialog\nConstructors\nDialog({Key? key, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, Duration insetAnimationDuration = const Duration(milliseconds: 100), Curve insetAnimationCurve = Curves.decelerate, EdgeInsets? insetPadding = _defaultInsetPadding, Clip clipBehavior = Clip.none, ShapeBorder? shape, AlignmentGeometry? alignment, Widget? child})\nCreates a dialog.\nconst\nDialog.fullscreen({Key? key, Color? backgroundColor, Duration insetAnimationDuration = Duration.zero, Curve insetAnimationCurve = Curves.decelerate, Widget? child})\nCreates a fullscreen dialog.\nconst\nProperties\nalignment\n\u2192 AlignmentGeometry?\nHow to align the Dialog.\nfinal\nbackgroundColor\n\u2192 Color?\nThe background color of the surface of this Dialog.\nfinal\nchild\n\u2192 Widget?\nThe widget below this widget in the tree.\nfinal\nclipBehavior\n\u2192 Clip\nControls how the contents of the dialog are clipped (or not) to the given\nshape.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate of this Dialog.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninsetAnimationCurve\n\u2192 Curve\nThe curve to use for the animation shown when the system keyboard intrudes\ninto the space that the dialog is placed in.\nfinal\ninsetAnimationDuration\n\u2192 Duration\nThe duration of the animation to show when the system keyboard intrudes\ninto the space that the dialog is placed in.\nfinal\ninsetPadding\n\u2192 EdgeInsets?\nThe amount of padding added to MediaQueryData.viewInsets on the outside\nof the dialog. This defines the minimum space between the screen's edges\nand the dialog.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshadowColor\n\u2192 Color?\nThe color used to paint a drop shadow under the dialog's Material,\nwhich reflects the dialog's elevation.\nfinal\nshape\n\u2192 ShapeBorder?\nThe shape of this dialog's border.\nfinal\nsurfaceTintColor\n\u2192 Color?\nThe color used as a surface tint overlay on the dialog's background color,\nwhich reflects the dialog's elevation.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nDialog class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Dialog].\n\nvoid main() => runApp(const DialogExampleApp());\n\nclass DialogExampleApp extends StatelessWidget {\n  const DialogExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Dialog Sample')),\n        body: const Center(\n          child: DialogExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass DialogExample extends StatelessWidget {\n  const DialogExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.center,\n      children: <Widget>[\n        TextButton(\n          onPressed: () => showDialog<String>(\n            context: context,\n            builder: (BuildContext context) => Dialog(\n              child: Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: Column(\n                  mainAxisSize: MainAxisSize.min,\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: <Widget>[\n                    const Text('This is a typical dialog.'),\n                    const SizedBox(height: 15),\n                    TextButton(\n                      onPressed: () {\n                        Navigator.pop(context);\n                      },\n                      child: const Text('Close'),\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ),\n          child: const Text('Show Dialog'),\n        ),\n        const SizedBox(height: 10),\n        TextButton(\n          onPressed: () => showDialog<String>(\n            context: context,\n            builder: (BuildContext context) => Dialog.fullscreen(\n              child: Column(\n                mainAxisSize: MainAxisSize.min,\n                mainAxisAlignment: MainAxisAlignment.center,\n                children: <Widget>[\n                  const Text('This is a fullscreen dialog.'),\n                  const SizedBox(height: 15),\n                  TextButton(\n                    onPressed: () {\n                      Navigator.pop(context);\n                    },\n                    child: const Text('Close'),\n                  ),\n                ],\n              ),\n            ),\n          ),\n          child: const Text('Show Fullscreen Dialog'),\n        ),\n      ],\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Divider-class.html",
  "title": "Divider class - material library - Dart API",
  "documentation_content": "Divider class - material library - Dart API\nmenu\nFlutter\nmaterial\nDivider class\nDivider\nbrightness_4\nbrightness_5\ndescription\nDivider class\nA thin horizontal line, with padding on either side.\nIn the Material Design language, this represents a divider. Dividers can be\nused in lists, Drawers, and elsewhere to separate content.\nTo create a divider between ListTile items, consider using\nListTile.divideTiles, which is optimized for this case.\nThe box's total height is controlled by height. The appropriate\npadding is automatically computed from the height.\nThis sample shows how to display a Divider between an orange and blue box\ninside a column. The Divider is 20 logical pixels in height and contains a\nvertically centered black line that is 5 logical pixels thick. The black\nline is indented by 20 logical pixels.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Divider.1 mysample\nThis sample shows the creation of Divider widget, as described in:\nhttps://m3.material.io/components/divider/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Divider.2 mysample\nSee also:\nPopupMenuDivider, which is the equivalent but for popup menus.\nListTile.divideTiles, another approach to dividing widgets in a list.\nVerticalDivider, which is the vertical analog of this widget.\nmaterial.io/design/components/dividers.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nDivider\nConstructors\nDivider({Key? key, double? height, double? thickness, double? indent, double? endIndent, Color? color})\nCreates a Material Design divider.\nconst\nProperties\ncolor\n\u2192 Color?\nThe color to use when painting the line.\nfinal\nendIndent\n\u2192 double?\nThe amount of empty space to the trailing edge of the divider.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheight\n\u2192 double?\nThe divider's height extent.\nfinal\nindent\n\u2192 double?\nThe amount of empty space to the leading edge of the divider.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nthickness\n\u2192 double?\nThe thickness of the line drawn within the divider.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\ncreateBorderSide(BuildContext? context, {Color? color, double? width})\n\u2192 BorderSide\nComputes the BorderSide that represents a divider.\nFlutter\nmaterial\nDivider class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Divider].\n\nvoid main() => runApp(const DividerExampleApp());\n\nclass DividerExampleApp extends StatelessWidget {\n  const DividerExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Divider Sample')),\n        body: const DividerExample(),\n      ),\n    );\n  }\n}\n\nclass DividerExample extends StatelessWidget {\n  const DividerExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Column(\n        children: <Widget>[\n          const Expanded(\n            child: ColoredBox(\n              color: Colors.amber,\n              child: Center(\n                child: Text('Above'),\n              ),\n            ),\n          ),\n          const Divider(\n            height: 20,\n            thickness: 5,\n            indent: 20,\n            endIndent: 0,\n            color: Colors.black,\n          ),\n          // Subheader example from Material spec.\n          // https://material.io/components/dividers#types\n          Container(\n            padding: const EdgeInsets.only(left: 20),\n            child: Align(\n              alignment: AlignmentDirectional.centerStart,\n              child: Text(\n                'Subheader',\n                style: Theme.of(context).textTheme.bodySmall,\n                textAlign: TextAlign.start,\n              ),\n            ),\n          ),\n          Expanded(\n            child: ColoredBox(\n              color: Theme.of(context).colorScheme.primary,\n              child: const Center(\n                child: Text('Below'),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Divider].\n\nvoid main() => runApp(const DividerExampleApp());\n\nclass DividerExampleApp extends StatelessWidget {\n  const DividerExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Divider Sample')),\n        body: const DividerExample(),\n      ),\n    );\n  }\n}\n\nclass DividerExample extends StatelessWidget {\n  const DividerExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Center(\n      child: Padding(\n        padding: EdgeInsets.all(16.0),\n        child: Column(\n          children: <Widget>[\n            Expanded(\n              child: Card(\n                child: SizedBox.expand(),\n              ),\n            ),\n            Divider(),\n            Expanded(\n              child: Card(\n                child: SizedBox.expand(),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Drawer-class.html",
  "title": "Drawer class - material library - Dart API",
  "documentation_content": "Drawer class - material library - Dart API\nmenu\nFlutter\nmaterial\nDrawer class\nDrawer\nbrightness_4\nbrightness_5\ndescription\nDrawer class\nA Material Design panel that slides in horizontally from the edge of a\nScaffold to show navigation links in an application.\nThere is a Material 3 version of this component, NavigationDrawer,\nthat's preferred for applications that are configured for Material 3\n(see ThemeData.useMaterial3).\nDrawers are typically used with the Scaffold.drawer property. The child of\nthe drawer is usually a ListView whose first child is a DrawerHeader\nthat displays status information about the current user. The remaining\ndrawer children are often constructed with ListTiles, often concluding\nwith an AboutListTile.\nThe AppBar automatically displays an appropriate IconButton to show the\nDrawer when a Drawer is available in the Scaffold. The Scaffold\nautomatically handles the edge-swipe gesture to show the drawer.\nUpdating to NavigationDrawer\nThere is a Material 3 version of this component, NavigationDrawer,\nthat's preferred for applications that are configured for Material 3\n(see ThemeData.useMaterial3). The NavigationDrawer widget's visual\nare a little bit different, see the Material 3 spec at\nm3.material.io/components/navigation-drawer/overview for\nmore details. While the Drawer widget can have only one child, the\nNavigationDrawer widget can have a list of widgets, which typically contains\nNavigationDrawerDestination widgets and/or customized widgets like headlines\nand dividers.\nThis example shows how to create a Scaffold that contains an AppBar and\na Drawer. A user taps the \"menu\" icon in the AppBar to open the\nDrawer. The Drawer displays four items: A header and three menu items.\nThe Drawer displays the four items using a ListView, which allows the\nuser to scroll through the items if need be.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Drawer.1 mysample\nThis example shows how to migrate the above Drawer to a NavigationDrawer.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Drawer.2 mysample\nAn open drawer may be closed with a swipe to close gesture, pressing the\nescape key, by tapping the scrim, or by calling pop route function such as\nNavigator.pop. For example a drawer item might close the drawer when tapped:\nListTile(\nleading: const Icon(Icons.change_history),\ntitle: const Text('Change history'),\nonTap: () {\n// change app state...\nNavigator.pop(context); // close the drawer\n},\n);\nSee also:\nScaffold.drawer, where one specifies a Drawer so that it can be\nshown.\nScaffold.of, to obtain the current ScaffoldState, which manages the\ndisplay and animation of the drawer.\nScaffoldState.openDrawer, which displays its Drawer, if any.\nmaterial.io/design/components/navigation-drawer.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nDrawer\nConstructors\nDrawer({Key? key, Color? backgroundColor, double? elevation, Color? shadowColor, Color? surfaceTintColor, ShapeBorder? shape, double? width, Widget? child, String? semanticLabel, Clip? clipBehavior})\nCreates a Material Design drawer.\nconst\nProperties\nbackgroundColor\n\u2192 Color?\nSets the color of the Material that holds all of the Drawer's\ncontents.\nfinal\nchild\n\u2192 Widget?\nThe widget below this widget in the tree.\nfinal\nclipBehavior\n\u2192 Clip?\nThe content will be clipped (or not) according to this option.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate at which to place this drawer relative to its parent.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsemanticLabel\n\u2192 String?\nThe semantic label of the drawer used by accessibility frameworks to\nannounce screen transitions when the drawer is opened and closed.\nfinal\nshadowColor\n\u2192 Color?\nThe color used to paint a drop shadow under the drawer's Material,\nwhich reflects the drawer's elevation.\nfinal\nshape\n\u2192 ShapeBorder?\nThe shape of the drawer.\nfinal\nsurfaceTintColor\n\u2192 Color?\nThe color used as a surface tint overlay on the drawer's background color,\nwhich reflects the drawer's elevation.\nfinal\nwidth\n\u2192 double?\nThe width of the drawer.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nDrawer class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [NavigationDrawer].\n\nvoid main() => runApp(const NavigationDrawerApp());\n\nclass ExampleDestination {\n  const ExampleDestination(this.label, this.icon, this.selectedIcon);\n\n  final String label;\n  final Widget icon;\n  final Widget selectedIcon;\n}\n\nconst List<ExampleDestination> destinations = <ExampleDestination>[\n  ExampleDestination(\n      'Messages', Icon(Icons.widgets_outlined), Icon(Icons.widgets)),\n  ExampleDestination(\n      'Profile', Icon(Icons.format_paint_outlined), Icon(Icons.format_paint)),\n  ExampleDestination(\n      'Settings', Icon(Icons.settings_outlined), Icon(Icons.settings)),\n];\n\nclass NavigationDrawerApp extends StatelessWidget {\n  const NavigationDrawerApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      theme: ThemeData(useMaterial3: true),\n      home: const NavigationDrawerExample(),\n    );\n  }\n}\n\nclass NavigationDrawerExample extends StatefulWidget {\n  const NavigationDrawerExample({super.key});\n\n  @override\n  State<NavigationDrawerExample> createState() =>\n      _NavigationDrawerExampleState();\n}\n\nclass _NavigationDrawerExampleState extends State<NavigationDrawerExample> {\n  final GlobalKey<ScaffoldState> scaffoldKey = GlobalKey<ScaffoldState>();\n\n  int screenIndex = 0;\n  late bool showNavigationDrawer;\n\n  void handleScreenChanged(int selectedScreen) {\n    setState(() {\n      screenIndex = selectedScreen;\n    });\n  }\n\n  void openDrawer() {\n    scaffoldKey.currentState!.openEndDrawer();\n  }\n\n  Widget buildBottomBarScaffold() {\n    return Scaffold(\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: <Widget>[\n            Text('Page Index = $screenIndex'),\n          ],\n        ),\n      ),\n      bottomNavigationBar: NavigationBar(\n        selectedIndex: screenIndex,\n        onDestinationSelected: (int index) {\n          setState(() {\n            screenIndex = index;\n          });\n        },\n        destinations: destinations.map(\n          (ExampleDestination destination) {\n            return NavigationDestination(\n              label: destination.label,\n              icon: destination.icon,\n              selectedIcon: destination.selectedIcon,\n              tooltip: destination.label,\n            );\n          },\n        ).toList(),\n      ),\n    );\n  }\n\n  Widget buildDrawerScaffold(BuildContext context) {\n    return Scaffold(\n      key: scaffoldKey,\n      body: SafeArea(\n        bottom: false,\n        top: false,\n        child: Row(\n          children: <Widget>[\n            Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 5),\n              child: NavigationRail(\n                minWidth: 50,\n                destinations: destinations.map(\n                  (ExampleDestination destination) {\n                    return NavigationRailDestination(\n                      label: Text(destination.label),\n                      icon: destination.icon,\n                      selectedIcon: destination.selectedIcon,\n                    );\n                  },\n                ).toList(),\n                selectedIndex: screenIndex,\n                useIndicator: true,\n                onDestinationSelected: (int index) {\n                  setState(() {\n                    screenIndex = index;\n                  });\n                },\n              ),\n            ),\n            const VerticalDivider(thickness: 1, width: 1),\n            Expanded(\n              child: Column(\n                mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n                children: <Widget>[\n                  Text('Page Index = $screenIndex'),\n                  ElevatedButton(\n                    onPressed: openDrawer,\n                    child: const Text('Open Drawer'),\n                  ),\n                ],\n              ),\n            ),\n          ],\n        ),\n      ),\n      endDrawer: NavigationDrawer(\n        onDestinationSelected: handleScreenChanged,\n        selectedIndex: screenIndex,\n        children: <Widget>[\n          Padding(\n            padding: const EdgeInsets.fromLTRB(28, 16, 16, 10),\n            child: Text(\n              'Header',\n              style: Theme.of(context).textTheme.titleSmall,\n            ),\n          ),\n          ...destinations.map(\n            (ExampleDestination destination) {\n              return NavigationDrawerDestination(\n                label: Text(destination.label),\n                icon: destination.icon,\n                selectedIcon: destination.selectedIcon,\n              );\n            },\n          ),\n          const Padding(\n            padding: EdgeInsets.fromLTRB(28, 16, 28, 10),\n            child: Divider(),\n          ),\n        ],\n      ),\n    );\n  }\n\n  @override\n  void didChangeDependencies() {\n    super.didChangeDependencies();\n    showNavigationDrawer = MediaQuery.of(context).size.width >= 450;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return showNavigationDrawer\n        ? buildDrawerScaffold(context)\n        : buildBottomBarScaffold();\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Drawer].\n\nvoid main() => runApp(const DrawerApp());\n\nclass DrawerApp extends StatelessWidget {\n  const DrawerApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const DrawerExample(),\n    );\n  }\n}\n\nclass DrawerExample extends StatefulWidget {\n  const DrawerExample({super.key});\n\n  @override\n  State<DrawerExample> createState() => _DrawerExampleState();\n}\n\nclass _DrawerExampleState extends State<DrawerExample> {\n  String selectedPage = '';\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Drawer Example'),\n      ),\n      drawer: Drawer(\n        child: ListView(\n          padding: EdgeInsets.zero,\n          children: <Widget>[\n            const DrawerHeader(\n              decoration: BoxDecoration(\n                color: Colors.blue,\n              ),\n              child: Text(\n                'Drawer Header',\n                style: TextStyle(\n                  color: Colors.white,\n                  fontSize: 24,\n                ),\n              ),\n            ),\n            ListTile(\n              leading: const Icon(Icons.message),\n              title: const Text('Messages'),\n              onTap: () {\n                setState(() {\n                  selectedPage = 'Messages';\n                });\n              },\n            ),\n            ListTile(\n              leading: const Icon(Icons.account_circle),\n              title: const Text('Profile'),\n              onTap: () {\n                setState(() {\n                  selectedPage = 'Profile';\n                });\n              },\n            ),\n            ListTile(\n              leading: const Icon(Icons.settings),\n              title: const Text('Settings'),\n              onTap: () {\n                setState(() {\n                  selectedPage = 'Settings';\n                });\n              },\n            ),\n          ],\n        ),\n      ),\n      body: Center(\n        child: Text('Page: $selectedPage'),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/DropdownButton-class.html",
  "title": "DropdownButton class - material library - Dart API",
  "documentation_content": "DropdownButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nDropdownButton<T> class\nDropdownButton\nbrightness_4\nbrightness_5\ndescription\nDropdownButton<T> class\nA Material Design button for selecting from a list of items.\nA dropdown button lets the user select from a number of items. The button\nshows the currently selected item as well as an arrow that opens a menu for\nselecting another item.\nUpdating to DropdownMenu\nThere is a Material 3 version of this component,\nDropdownMenu that is preferred for applications that are configured\nfor Material 3 (see ThemeData.useMaterial3).\nThe DropdownMenu widget's visuals\nare a little bit different, see the Material 3 spec at\nm3.material.io/components/menus/guidelines for\nmore details.\nThe DropdownMenu widget's API is also slightly different.\nTo update from DropdownButton to DropdownMenu, you will\nneed to make the following changes:\nInstead of using DropdownButton.items, which\ntakes a list of DropdownMenuItems, use\nDropdownMenu.dropdownMenuEntries, which\ntakes a list of DropdownMenuEntry's.\nInstead of using DropdownButton.onChanged,\nuse DropdownMenu.onSelected, which is also\na callback that is called when the user selects an entry.\nIn DropdownMenu it is not required to track\nthe current selection in your app's state.\nSo, instead of tracking the current selection in\nthe DropdownButton.value property, you can set the\nDropdownMenu.initialSelection property to the\nitem that should be selected before there is any user action.\nYou may also need to make changes to the styling of the\nDropdownMenu, see the properties in the DropdownMenu\nconstructor for more details.\nSee the sample below for an example of migrating\nfrom DropdownButton to DropdownMenu.\nUsing DropdownButton\nOne ancestor must be a Material widget and typically this is\nprovided by the app's Scaffold.\nThe type T is the type of the value that each dropdown item represents.\nAll the entries in a given menu must represent values with consistent types.\nTypically, an enum is used. Each DropdownMenuItem in items must be\nspecialized with that same type argument.\nThe onChanged callback should update a state variable that defines the\ndropdown's value. It should also call State.setState to rebuild the\ndropdown with the new value.\nThis sample shows a DropdownButton with a large arrow icon,\npurple text style, and bold purple underline, whose value is one of \"One\",\n\"Two\", \"Free\", or \"Four\".\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DropdownButton.1 mysample\nIf the onChanged callback is null or the list of items is null\nthen the dropdown button will be disabled, i.e. its arrow will be\ndisplayed in grey and it will not respond to input. A disabled button\nwill display the disabledHint widget if it is non-null. However, if\ndisabledHint is null and hint is non-null, the hint widget will\ninstead be displayed.\nThis sample shows how you would rewrite the above DropdownButton\nto use the DropdownMenu.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DropdownButton.2 mysample\nSee also:\nDropdownButtonFormField, which integrates with the Form widget.\nDropdownMenuItem, the class used to represent the items.\nDropdownButtonHideUnderline, which prevents its descendant dropdown buttons\nfrom displaying their underlines.\nElevatedButton, TextButton, ordinary buttons that trigger a single action.\nmaterial.io/design/components/menus.html#dropdown-menu\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nDropdownButton\nConstructors\nDropdownButton({Key? key, required List<DropdownMenuItem<T>>? items, DropdownButtonBuilder? selectedItemBuilder, T? value, Widget? hint, Widget? disabledHint, required ValueChanged<T?>? onChanged, VoidCallback? onTap, int elevation = 8, TextStyle? style, Widget? underline, Widget? icon, Color? iconDisabledColor, Color? iconEnabledColor, double iconSize = 24.0, bool isDense = false, bool isExpanded = false, double? itemHeight = kMinInteractiveDimension, Color? focusColor, FocusNode? focusNode, bool autofocus = false, Color? dropdownColor, double? menuMaxHeight, bool? enableFeedback, AlignmentGeometry alignment = AlignmentDirectional.centerStart, BorderRadius? borderRadius, EdgeInsetsGeometry? padding})\nCreates a dropdown button.\nProperties\nalignment\n\u2192 AlignmentGeometry\nDefines how the hint or the selected item is positioned within the button.\nfinal\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\nborderRadius\n\u2192 BorderRadius?\nDefines the corner radii of the menu's rounded rectangle shape.\nfinal\ndisabledHint\n\u2192 Widget?\nA preferred placeholder widget that is displayed when the dropdown is disabled.\nfinal\ndropdownColor\n\u2192 Color?\nThe background color of the dropdown.\nfinal\nelevation\n\u2192 int\nThe z-coordinate at which to place the menu when open.\nfinal\nenableFeedback\n\u2192 bool?\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinal\nfocusColor\n\u2192 Color?\nThe color for the button's Material when it has the input focus.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhint\n\u2192 Widget?\nA placeholder widget that is displayed by the dropdown button.\nfinal\nicon\n\u2192 Widget?\nThe widget to use for the drop-down button's icon.\nfinal\niconDisabledColor\n\u2192 Color?\nThe color of any Icon descendant of icon if this button is disabled,\ni.e. if onChanged is null.\nfinal\niconEnabledColor\n\u2192 Color?\nThe color of any Icon descendant of icon if this button is enabled,\ni.e. if onChanged is defined.\nfinal\niconSize\n\u2192 double\nThe size to use for the drop-down button's down arrow icon button.\nfinal\nisDense\n\u2192 bool\nReduce the button's height.\nfinal\nisExpanded\n\u2192 bool\nSet the dropdown's inner contents to horizontally fill its parent.\nfinal\nitemHeight\n\u2192 double?\nIf null, then the menu item heights will vary according to each menu item's\nintrinsic height.\nfinal\nitems\n\u2192 List<DropdownMenuItem<T>>?\nThe list of items the user can select.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmenuMaxHeight\n\u2192 double?\nThe maximum height of the menu.\nfinal\nonChanged\n\u2192 ValueChanged<T?>?\nCalled when the user selects an item.\nfinal\nonTap\n\u2192 VoidCallback?\nCalled when the dropdown button is tapped.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nPadding around the visible portion of the dropdown widget.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselectedItemBuilder\n\u2192 DropdownButtonBuilder?\nA builder to customize the dropdown buttons corresponding to the\nDropdownMenuItems in items.\nfinal\nstyle\n\u2192 TextStyle?\nThe text style to use for text in the dropdown button and the dropdown\nmenu that appears when you tap the button.\nfinal\nunderline\n\u2192 Widget?\nThe widget to use for drawing the drop-down button's underline.\nfinal\nvalue\n\u2192 T?\nThe value of the currently selected DropdownMenuItem.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<DropdownButton<T>>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nDropdownButton<T> class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DropdownMenu].\n\nconst List<String> list = <String>['One', 'Two', 'Three', 'Four'];\n\nvoid main() => runApp(const DropdownMenuApp());\n\nclass DropdownMenuApp extends StatelessWidget {\n  const DropdownMenuApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('DropdownMenu Sample')),\n        body: const Center(\n          child: DropdownMenuExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass DropdownMenuExample extends StatefulWidget {\n  const DropdownMenuExample({super.key});\n\n  @override\n  State<DropdownMenuExample> createState() => _DropdownMenuExampleState();\n}\n\nclass _DropdownMenuExampleState extends State<DropdownMenuExample> {\n  String dropdownValue = list.first;\n\n  @override\n  Widget build(BuildContext context) {\n    return DropdownMenu<String>(\n      initialSelection: list.first,\n      onSelected: (String? value) {\n        // This is called when the user selects an item.\n        setState(() {\n          dropdownValue = value!;\n        });\n      },\n      dropdownMenuEntries: list.map<DropdownMenuEntry<String>>((String value) {\n        return DropdownMenuEntry<String>(value: value, label: value);\n      }).toList(),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DropdownButton].\n\nconst List<String> list = <String>['One', 'Two', 'Three', 'Four'];\n\nvoid main() => runApp(const DropdownButtonApp());\n\nclass DropdownButtonApp extends StatelessWidget {\n  const DropdownButtonApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('DropdownButton Sample')),\n        body: const Center(\n          child: DropdownButtonExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass DropdownButtonExample extends StatefulWidget {\n  const DropdownButtonExample({super.key});\n\n  @override\n  State<DropdownButtonExample> createState() => _DropdownButtonExampleState();\n}\n\nclass _DropdownButtonExampleState extends State<DropdownButtonExample> {\n  String dropdownValue = list.first;\n\n  @override\n  Widget build(BuildContext context) {\n    return DropdownButton<String>(\n      value: dropdownValue,\n      icon: const Icon(Icons.arrow_downward),\n      elevation: 16,\n      style: const TextStyle(color: Colors.deepPurple),\n      underline: Container(\n        height: 2,\n        color: Colors.deepPurpleAccent,\n      ),\n      onChanged: (String? value) {\n        // This is called when the user selects an item.\n        setState(() {\n          dropdownValue = value!;\n        });\n      },\n      items: list.map<DropdownMenuItem<String>>((String value) {\n        return DropdownMenuItem<String>(\n          value: value,\n          child: Text(value),\n        );\n      }).toList(),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/DropdownButton/selectedItemBuilder.html",
  "title": "selectedItemBuilder property - DropdownButton class - material library - Dart API",
  "documentation_content": "selectedItemBuilder property - DropdownButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nDropdownButton<T>\nselectedItemBuilder property\nselectedItemBuilder\nbrightness_4\nbrightness_5\ndescription\nselectedItemBuilder property\nDropdownButtonBuilder?\nselectedItemBuilder\nfinal\nA builder to customize the dropdown buttons corresponding to the\nDropdownMenuItems in items.\nWhen a DropdownMenuItem is selected, the widget that will be displayed\nfrom the list corresponds to the DropdownMenuItem of the same index\nin items.\nThis sample shows a DropdownButton with a button with Text that\ncorresponds to but is unique from DropdownMenuItem.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DropdownButton.selectedItemBuilder.1 mysample\nIf this callback is null, the DropdownMenuItem from items\nthat matches value will be displayed.\nImplementation\nfinal DropdownButtonBuilder? selectedItemBuilder;\nFlutter\nmaterial\nDropdownButton<T>\nselectedItemBuilder property\nDropdownButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DropdownButton.selectedItemBuilder].\n\nMap<String, String> cities = <String, String>{\n  'New York': 'NYC',\n  'Los Angeles': 'LA',\n  'San Francisco': 'SF',\n  'Chicago': 'CH',\n  'Miami': 'MI',\n};\n\nvoid main() => runApp(const DropdownButtonApp());\n\nclass DropdownButtonApp extends StatelessWidget {\n  const DropdownButtonApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('DropdownButton Sample')),\n        body: const Center(child: DropdownButtonExample()),\n      ),\n    );\n  }\n}\n\nclass DropdownButtonExample extends StatefulWidget {\n  const DropdownButtonExample({super.key});\n\n  @override\n  State<DropdownButtonExample> createState() => _DropdownButtonExampleState();\n}\n\nclass _DropdownButtonExampleState extends State<DropdownButtonExample> {\n  String selectedItem = cities.keys.first;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Row(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          Text('Select a city:', style: Theme.of(context).textTheme.bodyLarge),\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 8.0),\n            child: DropdownButton<String>(\n              value: selectedItem,\n              onChanged: (String? value) {\n                // This is called when the user selects an item.\n                setState(() => selectedItem = value!);\n              },\n              selectedItemBuilder: (BuildContext context) {\n                return cities.values.map<Widget>((String item) {\n                  // This is the widget that will be shown when you select an item.\n                  // Here custom text style, alignment and layout size can be applied\n                  // to selected item string.\n                  return Container(\n                    alignment: Alignment.centerLeft,\n                    constraints: const BoxConstraints(minWidth: 100),\n                    child: Text(\n                      item,\n                      style: const TextStyle(\n                          color: Colors.blue, fontWeight: FontWeight.w600),\n                    ),\n                  );\n                }).toList();\n              },\n              items: cities.keys.map<DropdownMenuItem<String>>((String item) {\n                return DropdownMenuItem<String>(\n                  value: item,\n                  child: Text(item),\n                );\n              }).toList(),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/DropdownButton/style.html",
  "title": "style property - DropdownButton class - material library - Dart API",
  "documentation_content": "style property - DropdownButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nDropdownButton<T>\nstyle property\nstyle\nbrightness_4\nbrightness_5\ndescription\nstyle property\nTextStyle?\nstyle\nfinal\nThe text style to use for text in the dropdown button and the dropdown\nmenu that appears when you tap the button.\nTo use a separate text style for selected item when it's displayed within\nthe dropdown button, consider using selectedItemBuilder.\nThis sample shows a DropdownButton with a dropdown button text style\nthat is different than its menu items.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DropdownButton.style.1 mysample\nDefaults to the TextTheme.titleMedium value of the current\nThemeData.textTheme of the current Theme.\nImplementation\nfinal TextStyle? style;\nFlutter\nmaterial\nDropdownButton<T>\nstyle property\nDropdownButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DropdownButton.style].\n\nvoid main() => runApp(const DropdownButtonApp());\n\nclass DropdownButtonApp extends StatelessWidget {\n  const DropdownButtonApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('DropdownButton Sample')),\n        body: const DropdownButtonExample(),\n      ),\n    );\n  }\n}\n\nclass DropdownButtonExample extends StatefulWidget {\n  const DropdownButtonExample({super.key});\n\n  @override\n  State<DropdownButtonExample> createState() => _DropdownButtonExampleState();\n}\n\nclass _DropdownButtonExampleState extends State<DropdownButtonExample> {\n  List<String> options = <String>['One', 'Two', 'Three', 'Four'];\n  String dropdownValue = 'One';\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      alignment: Alignment.center,\n      color: Colors.blue,\n      child: DropdownButton<String>(\n        value: dropdownValue,\n        onChanged: (String? value) {\n          // This is called when the user selects an item.\n          setState(() {\n            dropdownValue = value!;\n          });\n        },\n        style: const TextStyle(color: Colors.blue),\n        selectedItemBuilder: (BuildContext context) {\n          // This is the widget that will be shown when you select an item.\n          // Here custom text style, alignment and layout size can be applied\n          // to selected item string.\n          return options.map((String value) {\n            return Align(\n              alignment: Alignment.centerLeft,\n              child: Text(\n                dropdownValue,\n                style: const TextStyle(color: Colors.white),\n              ),\n            );\n          }).toList();\n        },\n        items: options.map<DropdownMenuItem<String>>((String value) {\n          return DropdownMenuItem<String>(\n            value: value,\n            child: Text(value),\n          );\n        }).toList(),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/DropdownMenu-class.html",
  "title": "DropdownMenu class - material library - Dart API",
  "documentation_content": "DropdownMenu class - material library - Dart API\nmenu\nFlutter\nmaterial\nDropdownMenu<T> class\nDropdownMenu\nbrightness_4\nbrightness_5\ndescription\nDropdownMenu<T> class\nA dropdown menu that can be opened from a TextField. The selected\nmenu item is displayed in that field.\nThis widget is used to help people make a choice from a menu and put the\nselected item into the text input field. People can also filter the list based\non the text input or search one item in the menu list.\nThe menu is composed of a list of DropdownMenuEntrys. People can provide information,\nsuch as: label, leading icon or trailing icon for each entry. The TextField\nwill be updated based on the selection from the menu entries. The text field\nwill stay empty if the selected entry is disabled.\nThe dropdown menu can be traversed by pressing the up or down key. During the\nprocess, the corresponding item will be highlighted and the text field will be updated.\nDisabled items will be skipped during traversal.\nThe menu can be scrollable if not all items in the list are displayed at once.\nThis sample shows how to display outlined DropdownMenu and filled DropdownMenu.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DropdownMenu.1 mysample\nSee also:\nMenuAnchor, which is a widget used to mark the \"anchor\" for a set of submenus.\nThe DropdownMenu uses a TextField as the \"anchor\".\nTextField, which is a text input widget that uses an InputDecoration.\nDropdownMenuEntry, which is used to build the MenuItemButton in the DropdownMenu list.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nDropdownMenu\nConstructors\nDropdownMenu({Key? key, bool enabled = true, double? width, double? menuHeight, Widget? leadingIcon, Widget? trailingIcon, Widget? label, String? hintText, String? helperText, String? errorText, Widget? selectedTrailingIcon, bool enableFilter = false, bool enableSearch = true, TextStyle? textStyle, InputDecorationTheme? inputDecorationTheme, MenuStyle? menuStyle, TextEditingController? controller, T? initialSelection, ValueChanged<T?>? onSelected, bool? requestFocusOnTap, EdgeInsets? expandedInsets, required List<DropdownMenuEntry<T>> dropdownMenuEntries})\nCreates a const DropdownMenu.\nconst\nProperties\ncontroller\n\u2192 TextEditingController?\nControls the text being edited or selected in the menu.\nfinal\ndropdownMenuEntries\n\u2192 List<DropdownMenuEntry<T>>\nDescriptions of the menu items in the DropdownMenu.\nfinal\nenabled\n\u2192 bool\nDetermine if the DropdownMenu is enabled.\nfinal\nenableFilter\n\u2192 bool\nDetermine if the menu list can be filtered by the text input.\nfinal\nenableSearch\n\u2192 bool\nDetermine if the first item that matches the text input can be highlighted.\nfinal\nerrorText\n\u2192 String?\nText that appears below the input field and the border to show the error message.\nfinal\nexpandedInsets\n\u2192 EdgeInsets?\nDefines the menu text field's width to be equal to its parent's width\nplus the horizontal width of the specified insets.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhelperText\n\u2192 String?\nText that provides context about the DropdownMenu's value, such\nas how the value will be used.\nfinal\nhintText\n\u2192 String?\nText that suggests what sort of input the field accepts.\nfinal\ninitialSelection\n\u2192 T?\nThe value used to for an initial selection.\nfinal\ninputDecorationTheme\n\u2192 InputDecorationTheme?\nDefines the default appearance of InputDecoration to show around the text field.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nlabel\n\u2192 Widget?\nOptional widget that describes the input field.\nfinal\nleadingIcon\n\u2192 Widget?\nAn optional Icon at the front of the text input field.\nfinal\nmenuHeight\n\u2192 double?\nDetermine the height of the menu.\nfinal\nmenuStyle\n\u2192 MenuStyle?\nThe MenuStyle that defines the visual attributes of the menu.\nfinal\nonSelected\n\u2192 ValueChanged<T?>?\nThe callback is called when a selection is made.\nfinal\nrequestFocusOnTap\n\u2192 bool?\nDetermine if the dropdown button requests focus and the on-screen virtual\nkeyboard is shown in response to a touch event.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselectedTrailingIcon\n\u2192 Widget?\nAn optional icon at the end of the text field to indicate that the text\nfield is pressed.\nfinal\ntextStyle\n\u2192 TextStyle?\nThe text style for the TextField of the DropdownMenu;\nfinal\ntrailingIcon\n\u2192 Widget?\nAn optional icon at the end of the text field.\nfinal\nwidth\n\u2192 double?\nDetermine the width of the DropdownMenu.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<DropdownMenu<T>>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nDropdownMenu<T> class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n// Flutter code sample for [DropdownMenu]s. The first dropdown menu\n// has the default outlined border and demos using the\n// [DropdownMenuEntry] style parameter to customize its appearance.\n// The second dropdown menu customizes the appearance of the dropdown\n// menu's text field with its [InputDecorationTheme] parameter.\n\nvoid main() {\n  runApp(const DropdownMenuExample());\n}\n\n// DropdownMenuEntry labels and values for the first dropdown menu.\nenum ColorLabel {\n  blue('Blue', Colors.blue),\n  pink('Pink', Colors.pink),\n  green('Green', Colors.green),\n  yellow('Orange', Colors.orange),\n  grey('Grey', Colors.grey);\n\n  const ColorLabel(this.label, this.color);\n  final String label;\n  final Color color;\n}\n\n// DropdownMenuEntry labels and values for the second dropdown menu.\nenum IconLabel {\n  smile('Smile', Icons.sentiment_satisfied_outlined),\n  cloud(\n    'Cloud',\n    Icons.cloud_outlined,\n  ),\n  brush('Brush', Icons.brush_outlined),\n  heart('Heart', Icons.favorite);\n\n  const IconLabel(this.label, this.icon);\n  final String label;\n  final IconData icon;\n}\n\nclass DropdownMenuExample extends StatefulWidget {\n  const DropdownMenuExample({super.key});\n\n  @override\n  State<DropdownMenuExample> createState() => _DropdownMenuExampleState();\n}\n\nclass _DropdownMenuExampleState extends State<DropdownMenuExample> {\n  final TextEditingController colorController = TextEditingController();\n  final TextEditingController iconController = TextEditingController();\n  ColorLabel? selectedColor;\n  IconLabel? selectedIcon;\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        useMaterial3: true,\n        colorSchemeSeed: Colors.green,\n      ),\n      home: Scaffold(\n        body: SafeArea(\n          child: Column(\n            children: <Widget>[\n              Padding(\n                padding: const EdgeInsets.symmetric(vertical: 20),\n                child: Row(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: <Widget>[\n                    DropdownMenu<ColorLabel>(\n                      initialSelection: ColorLabel.green,\n                      controller: colorController,\n                      // requestFocusOnTap is enabled/disabled by platforms when it is null.\n                      // On mobile platforms, this is false by default. Setting this to true will\n                      // trigger focus request on the text field and virtual keyboard will appear\n                      // afterward. On desktop platforms however, this defaults to true.\n                      requestFocusOnTap: true,\n                      label: const Text('Color'),\n                      onSelected: (ColorLabel? color) {\n                        setState(() {\n                          selectedColor = color;\n                        });\n                      },\n                      dropdownMenuEntries: ColorLabel.values\n                          .map<DropdownMenuEntry<ColorLabel>>(\n                              (ColorLabel color) {\n                        return DropdownMenuEntry<ColorLabel>(\n                          value: color,\n                          label: color.label,\n                          enabled: color.label != 'Grey',\n                          style: MenuItemButton.styleFrom(\n                            foregroundColor: color.color,\n                          ),\n                        );\n                      }).toList(),\n                    ),\n                    const SizedBox(width: 24),\n                    DropdownMenu<IconLabel>(\n                      controller: iconController,\n                      enableFilter: true,\n                      requestFocusOnTap: true,\n                      leadingIcon: const Icon(Icons.search),\n                      label: const Text('Icon'),\n                      inputDecorationTheme: const InputDecorationTheme(\n                        filled: true,\n                        contentPadding: EdgeInsets.symmetric(vertical: 5.0),\n                      ),\n                      onSelected: (IconLabel? icon) {\n                        setState(() {\n                          selectedIcon = icon;\n                        });\n                      },\n                      dropdownMenuEntries:\n                          IconLabel.values.map<DropdownMenuEntry<IconLabel>>(\n                        (IconLabel icon) {\n                          return DropdownMenuEntry<IconLabel>(\n                            value: icon,\n                            label: icon.label,\n                            leadingIcon: Icon(icon.icon),\n                          );\n                        },\n                      ).toList(),\n                    ),\n                  ],\n                ),\n              ),\n              if (selectedColor != null && selectedIcon != null)\n                Row(\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: <Widget>[\n                    Text(\n                        'You selected a ${selectedColor?.label} ${selectedIcon?.label}'),\n                    Padding(\n                      padding: const EdgeInsets.symmetric(horizontal: 5),\n                      child: Icon(\n                        selectedIcon?.icon,\n                        color: selectedColor?.color,\n                      ),\n                    )\n                  ],\n                )\n              else\n                const Text('Please select a color and an icon.')\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/DropdownMenuEntry/labelWidget.html",
  "title": "labelWidget property - DropdownMenuEntry class - material library - Dart API",
  "documentation_content": "labelWidget property - DropdownMenuEntry class - material library - Dart API\nmenu\nFlutter\nmaterial\nDropdownMenuEntry<T>\nlabelWidget property\nlabelWidget\nbrightness_4\nbrightness_5\ndescription\nlabelWidget property\nWidget?\nlabelWidget\nfinal\nOverrides the default label widget which is Text(label).\nThis sample shows how to override the default label Text\nwidget with one that forces the menu entry to appear on one line\nby specifying Text.maxLines and Text.overflow.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.DropdownMenuEntry.labelWidget.1 mysample\nImplementation\nfinal Widget? labelWidget;\nFlutter\nmaterial\nDropdownMenuEntry<T>\nlabelWidget property\nDropdownMenuEntry class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for the [DropdownMenuEntry] `labelWidget` property.\n\nenum ColorItem {\n  blue('Blue', Colors.blue),\n  pink('Pink', Colors.pink),\n  green('Green', Colors.green),\n  yellow('Yellow', Colors.yellow),\n  grey('Grey', Colors.grey);\n\n  const ColorItem(this.label, this.color);\n  final String label;\n  final Color color;\n}\n\nclass DropdownMenuEntryLabelWidgetExample extends StatefulWidget {\n  const DropdownMenuEntryLabelWidgetExample({super.key});\n\n  @override\n  State<DropdownMenuEntryLabelWidgetExample> createState() =>\n      _DropdownMenuEntryLabelWidgetExampleState();\n}\n\nclass _DropdownMenuEntryLabelWidgetExampleState\n    extends State<DropdownMenuEntryLabelWidgetExample> {\n  late final TextEditingController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller = TextEditingController();\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    // Created by Google Bard from 'create a lyrical phrase of about 25 words that begins with \"is a color\"'.\n    const String longText =\n        'is a color that sings of hope, A hue that shines like gold. It is the color of dreams, A shade that never grows old.';\n\n    return Scaffold(\n      body: Center(\n        child: DropdownMenu<ColorItem>(\n          width: 300,\n          controller: controller,\n          initialSelection: ColorItem.green,\n          label: const Text('Color'),\n          onSelected: (ColorItem? color) {\n            print('Selected $color');\n          },\n          dropdownMenuEntries: ColorItem.values\n              .map<DropdownMenuEntry<ColorItem>>((ColorItem item) {\n            final String labelText = '${item.label} $longText\\n';\n            return DropdownMenuEntry<ColorItem>(\n              value: item,\n              label: labelText,\n              // Try commenting the labelWidget out or changing\n              // the labelWidget's Text parameters.\n              labelWidget: Text(\n                labelText,\n                maxLines: 1,\n                overflow: TextOverflow.ellipsis,\n              ),\n            );\n          }).toList(),\n        ),\n      ),\n    );\n  }\n}\n\nclass DropdownMenuEntryLabelWidgetExampleApp extends StatelessWidget {\n  const DropdownMenuEntryLabelWidgetExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: DropdownMenuEntryLabelWidgetExample(),\n    );\n  }\n}\n\nvoid main() {\n  runApp(const DropdownMenuEntryLabelWidgetExampleApp());\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ElevatedButton-class.html",
  "title": "ElevatedButton class - material library - Dart API",
  "documentation_content": "ElevatedButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nElevatedButton class\nElevatedButton\nbrightness_4\nbrightness_5\ndescription\nElevatedButton class\nA Material Design \"elevated button\".\nUse elevated buttons to add dimension to otherwise mostly flat\nlayouts, e.g. in long busy lists of content, or in wide\nspaces. Avoid using elevated buttons on already-elevated content\nsuch as dialogs or cards.\nAn elevated button is a label child displayed on a Material\nwidget whose Material.elevation increases when the button is\npressed. The label's Text and Icon widgets are displayed in\nstyle's ButtonStyle.foregroundColor and the button's filled\nbackground is the ButtonStyle.backgroundColor.\nThe elevated button's default style is defined by\ndefaultStyleOf. The style of this elevated button can be\noverridden with its style parameter. The style of all elevated\nbuttons in a subtree can be overridden with the\nElevatedButtonTheme, and the style of all of the elevated\nbuttons in an app can be overridden with the Theme's\nThemeData.elevatedButtonTheme property.\nThe static styleFrom method is a convenient way to create a\nelevated button ButtonStyle from simple values.\nIf onPressed and onLongPress callbacks are null, then the\nbutton will be disabled.\nThis sample produces an enabled and a disabled ElevatedButton.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ElevatedButton.1 mysample\nSee also:\nFilledButton, a filled button that doesn't elevate when pressed.\nFilledButton.tonal, a filled button variant that uses a secondary fill color.\nOutlinedButton, a button with an outlined border and no fill color.\nTextButton, a button with no outline or fill color.\nmaterial.io/design/components/buttons.html\nm3.material.io/components/buttons\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nButtonStyleButton\nElevatedButton\nConstructors\nElevatedButton({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, ButtonStyle? style, FocusNode? focusNode, bool autofocus = false, Clip clipBehavior = Clip.none, MaterialStatesController? statesController, required Widget? child})\nCreate an ElevatedButton.\nconst\nElevatedButton.icon({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, ButtonStyle? style, FocusNode? focusNode, bool? autofocus, Clip? clipBehavior, MaterialStatesController? statesController, required Widget icon, required Widget label})\nCreate an elevated button from a pair of widgets that serve as the button's\nicon and label.\nfactory\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinalinherited\nchild\n\u2192 Widget?\nTypically the button's label.\nfinalinherited\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinalinherited\nenabled\n\u2192 bool\nWhether the button is enabled or disabled.\nread-onlyinherited\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nisSemanticButton\n\u2192 bool?\nDetermine whether this subtree represents a button.\nfinalinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonFocusChange\n\u2192 ValueChanged<bool>?\nHandler called when the focus changes.\nfinalinherited\nonHover\n\u2192 ValueChanged<bool>?\nCalled when a pointer enters or exits the button response area.\nfinalinherited\nonLongPress\n\u2192 VoidCallback?\nCalled when the button is long-pressed.\nfinalinherited\nonPressed\n\u2192 VoidCallback?\nCalled when the button is tapped or otherwise activated.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nstatesController\n\u2192 MaterialStatesController?\nRepresents the interactive \"state\" of this widget in terms of\na set of MaterialStates, like MaterialState.pressed and\nMaterialState.focused.\nfinalinherited\nstyle\n\u2192 ButtonStyle?\nCustomizes this button's appearance.\nfinalinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<ButtonStyleButton>\nCreates the mutable state for this widget at a given location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\ndefaultStyleOf(BuildContext context)\n\u2192 ButtonStyle\nDefines the button's default appearance.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nthemeStyleOf(BuildContext context)\n\u2192 ButtonStyle?\nReturns the ElevatedButtonThemeData.style of the closest\nElevatedButtonTheme ancestor.\noverride\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\nstyleFrom({Color? foregroundColor, Color? backgroundColor, Color? disabledForegroundColor, Color? disabledBackgroundColor, Color? shadowColor, Color? surfaceTintColor, double? elevation, TextStyle? textStyle, EdgeInsetsGeometry? padding, Size? minimumSize, Size? fixedSize, Size? maximumSize, BorderSide? side, OutlinedBorder? shape, MouseCursor? enabledMouseCursor, MouseCursor? disabledMouseCursor, VisualDensity? visualDensity, MaterialTapTargetSize? tapTargetSize, Duration? animationDuration, bool? enableFeedback, AlignmentGeometry? alignment, InteractiveInkFeatureFactory? splashFactory, Color? primary, Color? onPrimary, Color? onSurface})\n\u2192 ButtonStyle\nA static convenience method that constructs an elevated button\nButtonStyle given simple values.\nFlutter\nmaterial\nElevatedButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ElevatedButton].\n\nvoid main() => runApp(const ElevatedButtonExampleApp());\n\nclass ElevatedButtonExampleApp extends StatelessWidget {\n  const ElevatedButtonExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ElevatedButton Sample')),\n        body: const ElevatedButtonExample(),\n      ),\n    );\n  }\n}\n\nclass ElevatedButtonExample extends StatefulWidget {\n  const ElevatedButtonExample({super.key});\n\n  @override\n  State<ElevatedButtonExample> createState() => _ElevatedButtonExampleState();\n}\n\nclass _ElevatedButtonExampleState extends State<ElevatedButtonExample> {\n  @override\n  Widget build(BuildContext context) {\n    final ButtonStyle style =\n        ElevatedButton.styleFrom(textStyle: const TextStyle(fontSize: 20));\n\n    return Center(\n      child: Column(\n        mainAxisSize: MainAxisSize.min,\n        children: <Widget>[\n          ElevatedButton(\n            style: style,\n            onPressed: null,\n            child: const Text('Disabled'),\n          ),\n          const SizedBox(height: 30),\n          ElevatedButton(\n            style: style,\n            onPressed: () {},\n            child: const Text('Enabled'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ExpansionPanelList-class.html",
  "title": "ExpansionPanelList class - material library - Dart API",
  "documentation_content": "ExpansionPanelList class - material library - Dart API\nmenu\nFlutter\nmaterial\nExpansionPanelList class\nExpansionPanelList\nbrightness_4\nbrightness_5\ndescription\nExpansionPanelList class\nA material expansion panel list that lays out its children and animates\nexpansions.\nThe expansionCallback is called when the expansion state changes. For\nnormal ExpansionPanelList widgets, it is the responsibility of the parent\nwidget to rebuild the ExpansionPanelList with updated values for\nExpansionPanel.isExpanded. For ExpansionPanelList.radio widgets, the\nopen state is tracked internally and the callback is invoked both for the\npreviously open panel, which is closing, and the previously closed panel,\nwhich is opening.\nHere is a simple example of how to use ExpansionPanelList.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ExpansionPanelList.1 mysample\nSee also:\nExpansionPanel, which is used in the children property.\nExpansionPanelList.radio, a variant of this widget where only one panel is open at a time.\nmaterial.io/design/components/lists.html#types\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nExpansionPanelList\nConstructors\nExpansionPanelList({Key? key, List<ExpansionPanel> children = const <ExpansionPanel>[], ExpansionPanelCallback? expansionCallback, Duration animationDuration = kThemeAnimationDuration, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor, double materialGapSize = 16.0})\nCreates an expansion panel list widget. The expansionCallback is\ntriggered when an expansion panel expand/collapse button is pushed.\nconst\nExpansionPanelList.radio({Key? key, List<ExpansionPanel> children = const <ExpansionPanelRadio>[], ExpansionPanelCallback? expansionCallback, Duration animationDuration = kThemeAnimationDuration, Object? initialOpenPanelValue, EdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding, Color? dividerColor, double elevation = 2, Color? expandIconColor, double materialGapSize = 16.0})\nCreates a radio expansion panel list widget.\nconst\nProperties\nanimationDuration\n\u2192 Duration\nThe duration of the expansion animation.\nfinal\nchildren\n\u2192 List<ExpansionPanel>\nThe children of the expansion panel list. They are laid out in a similar\nfashion to ListBody.\nfinal\ndividerColor\n\u2192 Color?\nDefines color for the divider when ExpansionPanel.isExpanded is false.\nfinal\nelevation\n\u2192 double\nDefines elevation for the ExpansionPanel while it's expanded.\nfinal\nexpandedHeaderPadding\n\u2192 EdgeInsets\nThe padding that surrounds the panel header when expanded.\nfinal\nexpandIconColor\n\u2192 Color?\nThe color of the icon.\nfinal\nexpansionCallback\n\u2192 ExpansionPanelCallback?\nThe callback that gets called whenever one of the expand/collapse buttons\nis pressed. The arguments passed to the callback are the index of the\npressed panel and whether the panel is currently expanded or not.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\ninitialOpenPanelValue\n\u2192 Object?\nThe value of the panel that initially begins open. (This value is\nonly used when initializing with the ExpansionPanelList.radio\nconstructor.)\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmaterialGapSize\n\u2192 double\nDefines the MaterialGap.size of the MaterialGap which is placed\nbetween the ExpansionPanelList.children when they're expanded.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<StatefulWidget>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nExpansionPanelList class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ExpansionPanelList].\n\nvoid main() => runApp(const ExpansionPanelListExampleApp());\n\nclass ExpansionPanelListExampleApp extends StatelessWidget {\n  const ExpansionPanelListExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ExpansionPanelList Sample')),\n        body: const ExpansionPanelListExample(),\n      ),\n    );\n  }\n}\n\n// stores ExpansionPanel state information\nclass Item {\n  Item({\n    required this.expandedValue,\n    required this.headerValue,\n    this.isExpanded = false,\n  });\n\n  String expandedValue;\n  String headerValue;\n  bool isExpanded;\n}\n\nList<Item> generateItems(int numberOfItems) {\n  return List<Item>.generate(numberOfItems, (int index) {\n    return Item(\n      headerValue: 'Panel $index',\n      expandedValue: 'This is item number $index',\n    );\n  });\n}\n\nclass ExpansionPanelListExample extends StatefulWidget {\n  const ExpansionPanelListExample({super.key});\n\n  @override\n  State<ExpansionPanelListExample> createState() =>\n      _ExpansionPanelListExampleState();\n}\n\nclass _ExpansionPanelListExampleState extends State<ExpansionPanelListExample> {\n  final List<Item> _data = generateItems(8);\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: Container(\n        child: _buildPanel(),\n      ),\n    );\n  }\n\n  Widget _buildPanel() {\n    return ExpansionPanelList(\n      expansionCallback: (int index, bool isExpanded) {\n        setState(() {\n          _data[index].isExpanded = isExpanded;\n        });\n      },\n      children: _data.map<ExpansionPanel>((Item item) {\n        return ExpansionPanel(\n          headerBuilder: (BuildContext context, bool isExpanded) {\n            return ListTile(\n              title: Text(item.headerValue),\n            );\n          },\n          body: ListTile(\n              title: Text(item.expandedValue),\n              subtitle:\n                  const Text('To delete this panel, tap the trash can icon'),\n              trailing: const Icon(Icons.delete),\n              onTap: () {\n                setState(() {\n                  _data.removeWhere((Item currentItem) => item == currentItem);\n                });\n              }),\n          isExpanded: item.isExpanded,\n        );\n      }).toList(),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ExpansionPanelList/ExpansionPanelList.radio.html",
  "title": "ExpansionPanelList.radio constructor - ExpansionPanelList - material library - Dart API",
  "documentation_content": "ExpansionPanelList.radio constructor - ExpansionPanelList - material library - Dart API\nmenu\nFlutter\nmaterial\nExpansionPanelList\nExpansionPanelList.radio const constructor\nExpansionPanelList.radio\nbrightness_4\nbrightness_5\ndescription\nExpansionPanelList.radio constructor\nconst\nExpansionPanelList.radio({Key? key,\nList<ExpansionPanel> children = const <ExpansionPanelRadio>[],\nExpansionPanelCallback? expansionCallback,\nDuration animationDuration = kThemeAnimationDuration,\nObject? initialOpenPanelValue,\nEdgeInsets expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding,\nColor? dividerColor,\ndouble elevation = 2,\nColor? expandIconColor,\ndouble materialGapSize = 16.0}\n)\nCreates a radio expansion panel list widget.\nThis widget allows for at most one panel in the list to be open. The\nexpansion panel callback is triggered when an expansion panel\nexpand/collapse button is pushed. The children objects must be instances\nof ExpansionPanelRadio.\nHere is a simple example of how to implement ExpansionPanelList.radio.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ExpansionPanelList.radio.1 mysample\nImplementation\nconst ExpansionPanelList.radio({\nsuper.key,\nthis.children = const <ExpansionPanelRadio>[],\nthis.expansionCallback,\nthis.animationDuration = kThemeAnimationDuration,\nthis.initialOpenPanelValue,\nthis.expandedHeaderPadding = _kPanelHeaderExpandedDefaultPadding,\nthis.dividerColor,\nthis.elevation = 2,\nthis.expandIconColor,\nthis.materialGapSize = 16.0,\n}) : _allowOnlyOnePanelOpen = true;\nFlutter\nmaterial\nExpansionPanelList\nExpansionPanelList.radio const constructor\nExpansionPanelList class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ExpansionPanelList.ExpansionPanelList.radio].\n\nvoid main() => runApp(const ExpansionPanelListRadioExampleApp());\n\nclass ExpansionPanelListRadioExampleApp extends StatelessWidget {\n  const ExpansionPanelListRadioExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ExpansionPanelList.radio Sample')),\n        body: const ExpansionPanelListRadioExample(),\n      ),\n    );\n  }\n}\n\n// stores ExpansionPanel state information\nclass Item {\n  Item({\n    required this.id,\n    required this.expandedValue,\n    required this.headerValue,\n  });\n\n  int id;\n  String expandedValue;\n  String headerValue;\n}\n\nList<Item> generateItems(int numberOfItems) {\n  return List<Item>.generate(numberOfItems, (int index) {\n    return Item(\n      id: index,\n      headerValue: 'Panel $index',\n      expandedValue: 'This is item number $index',\n    );\n  });\n}\n\nclass ExpansionPanelListRadioExample extends StatefulWidget {\n  const ExpansionPanelListRadioExample({super.key});\n\n  @override\n  State<ExpansionPanelListRadioExample> createState() =>\n      _ExpansionPanelListRadioExampleState();\n}\n\nclass _ExpansionPanelListRadioExampleState\n    extends State<ExpansionPanelListRadioExample> {\n  final List<Item> _data = generateItems(8);\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: Container(\n        child: _buildPanel(),\n      ),\n    );\n  }\n\n  Widget _buildPanel() {\n    return ExpansionPanelList.radio(\n      initialOpenPanelValue: 2,\n      children: _data.map<ExpansionPanelRadio>((Item item) {\n        return ExpansionPanelRadio(\n            value: item.id,\n            headerBuilder: (BuildContext context, bool isExpanded) {\n              return ListTile(\n                title: Text(item.headerValue),\n              );\n            },\n            body: ListTile(\n                title: Text(item.expandedValue),\n                subtitle:\n                    const Text('To delete this panel, tap the trash can icon'),\n                trailing: const Icon(Icons.delete),\n                onTap: () {\n                  setState(() {\n                    _data\n                        .removeWhere((Item currentItem) => item == currentItem);\n                  });\n                }));\n      }).toList(),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ExpansionTile-class.html",
  "title": "ExpansionTile class - material library - Dart API",
  "documentation_content": "ExpansionTile class - material library - Dart API\nmenu\nFlutter\nmaterial\nExpansionTile class\nExpansionTile\nbrightness_4\nbrightness_5\ndescription\nExpansionTile class\nA single-line ListTile with an expansion arrow icon that expands or collapses\nthe tile to reveal or hide the children.\nThis widget is typically used with ListView to create an \"expand /\ncollapse\" list entry. When used with scrolling widgets like ListView, a\nunique PageStorageKey must be specified as the key, to enable the\nExpansionTile to save and restore its expanded state when it is scrolled\nin and out of view.\nThis class overrides the ListTileThemeData.iconColor and ListTileThemeData.textColor\ntheme properties for its ListTile. These colors animate between values when\nthe tile is expanded and collapsed: between iconColor, collapsedIconColor and\nbetween textColor and collapsedTextColor.\nThe expansion arrow icon is shown on the right by default in left-to-right languages\n(i.e. the trailing edge). This can be changed using controlAffinity. This maps\nto the leading and trailing properties of ExpansionTile.\nThis example demonstrates how the ExpansionTile icon's location and appearance\ncan be customized.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ExpansionTile.1 mysample\nThis example demonstrates how an ExpansionTileController can be used to\nprogramatically expand or collapse an ExpansionTile.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ExpansionTile.2 mysample\nSee also:\nListTile, useful for creating expansion tile children when the\nexpansion tile represents a sublist.\nThe \"Expand and collapse\" section of\nmaterial.io/components/lists#types\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nExpansionTile\nConstructors\nExpansionTile({Key? key, Widget? leading, required Widget title, Widget? subtitle, ValueChanged<bool>? onExpansionChanged, List<Widget> children = const <Widget>[], Widget? trailing, bool initiallyExpanded = false, bool maintainState = false, EdgeInsetsGeometry? tilePadding, CrossAxisAlignment? expandedCrossAxisAlignment, Alignment? expandedAlignment, EdgeInsetsGeometry? childrenPadding, Color? backgroundColor, Color? collapsedBackgroundColor, Color? textColor, Color? collapsedTextColor, Color? iconColor, Color? collapsedIconColor, ShapeBorder? shape, ShapeBorder? collapsedShape, Clip? clipBehavior, ListTileControlAffinity? controlAffinity, ExpansionTileController? controller})\nCreates a single-line ListTile with an expansion arrow icon that expands or collapses\nthe tile to reveal or hide the children. The initiallyExpanded property must\nbe non-null.\nconst\nProperties\nbackgroundColor\n\u2192 Color?\nThe color to display behind the sublist when expanded.\nfinal\nchildren\n\u2192 List<Widget>\nThe widgets that are displayed when the tile expands.\nfinal\nchildrenPadding\n\u2192 EdgeInsetsGeometry?\nSpecifies padding for children.\nfinal\nclipBehavior\n\u2192 Clip?\nThe content will be clipped (or not) according to this option.\nfinal\ncollapsedBackgroundColor\n\u2192 Color?\nWhen not null, defines the background color of tile when the sublist is collapsed.\nfinal\ncollapsedIconColor\n\u2192 Color?\nThe icon color of tile's expansion arrow icon when the sublist is collapsed.\nfinal\ncollapsedShape\n\u2192 ShapeBorder?\nThe tile's border shape when the sublist is collapsed.\nfinal\ncollapsedTextColor\n\u2192 Color?\nThe color of the tile's titles when the sublist is collapsed.\nfinal\ncontrolAffinity\n\u2192 ListTileControlAffinity?\nTypically used to force the expansion arrow icon to the tile's leading or trailing edge.\nfinal\ncontroller\n\u2192 ExpansionTileController?\nIf provided, the controller can be used to expand and collapse tiles.\nfinal\nexpandedAlignment\n\u2192 Alignment?\nSpecifies the alignment of children, which are arranged in a column when\nthe tile is expanded.\nfinal\nexpandedCrossAxisAlignment\n\u2192 CrossAxisAlignment?\nSpecifies the alignment of each child within children when the tile is expanded.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\niconColor\n\u2192 Color?\nThe icon color of tile's expansion arrow icon when the sublist is expanded.\nfinal\ninitiallyExpanded\n\u2192 bool\nSpecifies if the list tile is initially expanded (true) or collapsed (false, the default).\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nleading\n\u2192 Widget?\nA widget to display before the title.\nfinal\nmaintainState\n\u2192 bool\nSpecifies whether the state of the children is maintained when the tile expands and collapses.\nfinal\nonExpansionChanged\n\u2192 ValueChanged<bool>?\nCalled when the tile expands or collapses.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshape\n\u2192 ShapeBorder?\nThe tile's border shape when the sublist is expanded.\nfinal\nsubtitle\n\u2192 Widget?\nAdditional content displayed below the title.\nfinal\ntextColor\n\u2192 Color?\nThe color of the tile's titles when the sublist is expanded.\nfinal\ntilePadding\n\u2192 EdgeInsetsGeometry?\nSpecifies padding for the ListTile.\nfinal\ntitle\n\u2192 Widget\nThe primary content of the list item.\nfinal\ntrailing\n\u2192 Widget?\nA widget to display after the title.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<ExpansionTile>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nExpansionTile class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ExpansionTile].\n\nvoid main() => runApp(const ExpansionTileApp());\n\nclass ExpansionTileApp extends StatelessWidget {\n  const ExpansionTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ExpansionTile Sample')),\n        body: const ExpansionTileExample(),\n      ),\n    );\n  }\n}\n\nclass ExpansionTileExample extends StatefulWidget {\n  const ExpansionTileExample({super.key});\n\n  @override\n  State<ExpansionTileExample> createState() => _ExpansionTileExampleState();\n}\n\nclass _ExpansionTileExampleState extends State<ExpansionTileExample> {\n  bool _customTileExpanded = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: <Widget>[\n        const ExpansionTile(\n          title: Text('ExpansionTile 1'),\n          subtitle: Text('Trailing expansion arrow icon'),\n          children: <Widget>[\n            ListTile(title: Text('This is tile number 1')),\n          ],\n        ),\n        ExpansionTile(\n          title: const Text('ExpansionTile 2'),\n          subtitle: const Text('Custom expansion arrow icon'),\n          trailing: Icon(\n            _customTileExpanded\n                ? Icons.arrow_drop_down_circle\n                : Icons.arrow_drop_down,\n          ),\n          children: const <Widget>[\n            ListTile(title: Text('This is tile number 2')),\n          ],\n          onExpansionChanged: (bool expanded) {\n            setState(() {\n              _customTileExpanded = expanded;\n            });\n          },\n        ),\n        const ExpansionTile(\n          title: Text('ExpansionTile 3'),\n          subtitle: Text('Leading expansion arrow icon'),\n          controlAffinity: ListTileControlAffinity.leading,\n          children: <Widget>[\n            ListTile(title: Text('This is tile number 3')),\n          ],\n        ),\n      ],\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ExpansionTile] and [ExpansionTileController].\n\nvoid main() {\n  runApp(const ExpansionTileControllerApp());\n}\n\nclass ExpansionTileControllerApp extends StatefulWidget {\n  const ExpansionTileControllerApp({super.key});\n\n  @override\n  State<ExpansionTileControllerApp> createState() =>\n      _ExpansionTileControllerAppState();\n}\n\nclass _ExpansionTileControllerAppState\n    extends State<ExpansionTileControllerApp> {\n  final ExpansionTileController controller = ExpansionTileController();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ExpansionTileController Sample')),\n        body: Column(\n          children: <Widget>[\n            // A controller has been provided to the ExpansionTile because it's\n            // going to be accessed from a component that is not within the\n            // tile's BuildContext.\n            ExpansionTile(\n              controller: controller,\n              title: const Text('ExpansionTile with explicit controller.'),\n              children: <Widget>[\n                Container(\n                  alignment: Alignment.center,\n                  padding: const EdgeInsets.all(24),\n                  child: const Text('ExpansionTile Contents'),\n                ),\n              ],\n            ),\n            const SizedBox(height: 8),\n            ElevatedButton(\n              child: const Text('Expand/Collapse the Tile Above'),\n              onPressed: () {\n                if (controller.isExpanded) {\n                  controller.collapse();\n                } else {\n                  controller.expand();\n                }\n              },\n            ),\n            const SizedBox(height: 48),\n            // A controller has not been provided to the ExpansionTile because\n            // the automatically created one can be retrieved via the tile's BuildContext.\n            ExpansionTile(\n              title: const Text('ExpansionTile with implicit controller.'),\n              children: <Widget>[\n                Builder(\n                  builder: (BuildContext context) {\n                    return Container(\n                      padding: const EdgeInsets.all(24),\n                      alignment: Alignment.center,\n                      child: ElevatedButton(\n                        child: const Text('Collapse This Tile'),\n                        onPressed: () {\n                          return ExpansionTileController.of(context).collapse();\n                        },\n                      ),\n                    );\n                  },\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ExpansionTileController/of.html",
  "title": "of method - ExpansionTileController class - material library - Dart API",
  "documentation_content": "of method - ExpansionTileController class - material library - Dart API\nmenu\nFlutter\nmaterial\nExpansionTileController\nof static method\nof\nbrightness_4\nbrightness_5\ndescription\nof static method\nExpansionTileController\nof(BuildContext context\n)\nFinds the ExpansionTileController for the closest ExpansionTile instance\nthat encloses the given context.\nIf no ExpansionTile encloses the given context, calling this\nmethod will cause an assert in debug mode, and throw an\nexception in release mode.\nTo return null if there is no ExpansionTile use maybeOf instead.\nTypical usage of the ExpansionTileController.of function is to call it from within the\nbuild method of a descendant of an ExpansionTile.\nWhen the ExpansionTile is actually created in the same build\nfunction as the callback that refers to the controller, then the\ncontext argument to the build function can't be used to find\nthe ExpansionTileController (since it's \"above\" the widget\nbeing returned in the widget tree). In cases like that you can\nadd a Builder widget, which provides a new scope with a\nBuildContext that is \"under\" the ExpansionTile:\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ExpansionTileController.of.1 mysample\nA more efficient solution is to split your build function into\nseveral widgets. This introduces a new context from which you\ncan obtain the ExpansionTileController. With this approach you\nwould have an outer widget that creates the ExpansionTile\npopulated by instances of your new inner widgets, and then in\nthese inner widgets you would use ExpansionTileController.of.\nImplementation\nstatic ExpansionTileController of(BuildContext context) {\nfinal _ExpansionTileState? result = context.findAncestorStateOfType<_ExpansionTileState>();\nif (result != null) {\nreturn result._tileController;\n}\nthrow FlutterError.fromParts(<DiagnosticsNode>[\nErrorSummary(\n'ExpansionTileController.of() called with a context that does not contain a ExpansionTile.',\n),\nErrorDescription(\n'No ExpansionTile ancestor could be found starting from the context that was passed to ExpansionTileController.of(). '\n'This usually happens when the context provided is from the same StatefulWidget as that '\n'whose build function actually creates the ExpansionTile widget being sought.',\n),\nErrorHint(\n'There are several ways to avoid this problem. The simplest is to use a Builder to get a '\n'context that is \"under\" the ExpansionTile. For an example of this, please see the '\n'documentation for ExpansionTileController.of():\\n'\n'\nhttps://api.flutter.dev/flutter/material/ExpansionTile/of.html',\n),\nErrorHint(\n'A more efficient solution is to split your build function into several widgets. This '\n'introduces a new context from which you can obtain the ExpansionTile. In this solution, '\n'you would have an outer widget that creates the ExpansionTile populated by instances of '\n'your new inner widgets, and then in these inner widgets you would use ExpansionTileController.of().\\n'\n'An other solution is assign a GlobalKey to the ExpansionTile, '\n'then use the key.currentState property to obtain the ExpansionTile rather than '\n'using the ExpansionTileController.of() function.',\n),\ncontext.describeElement('The context used was'),\n]);\n}\nFlutter\nmaterial\nExpansionTileController\nof static method\nExpansionTileController class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ExpansionTile] and [ExpansionTileController].\n\nvoid main() {\n  runApp(const ExpansionTileControllerApp());\n}\n\nclass ExpansionTileControllerApp extends StatefulWidget {\n  const ExpansionTileControllerApp({super.key});\n\n  @override\n  State<ExpansionTileControllerApp> createState() =>\n      _ExpansionTileControllerAppState();\n}\n\nclass _ExpansionTileControllerAppState\n    extends State<ExpansionTileControllerApp> {\n  final ExpansionTileController controller = ExpansionTileController();\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('ExpansionTileController Sample')),\n        body: Column(\n          children: <Widget>[\n            // A controller has been provided to the ExpansionTile because it's\n            // going to be accessed from a component that is not within the\n            // tile's BuildContext.\n            ExpansionTile(\n              controller: controller,\n              title: const Text('ExpansionTile with explicit controller.'),\n              children: <Widget>[\n                Container(\n                  alignment: Alignment.center,\n                  padding: const EdgeInsets.all(24),\n                  child: const Text('ExpansionTile Contents'),\n                ),\n              ],\n            ),\n            const SizedBox(height: 8),\n            ElevatedButton(\n              child: const Text('Expand/Collapse the Tile Above'),\n              onPressed: () {\n                if (controller.isExpanded) {\n                  controller.collapse();\n                } else {\n                  controller.expand();\n                }\n              },\n            ),\n            const SizedBox(height: 48),\n            // A controller has not been provided to the ExpansionTile because\n            // the automatically created one can be retrieved via the tile's BuildContext.\n            ExpansionTile(\n              title: const Text('ExpansionTile with implicit controller.'),\n              children: <Widget>[\n                Builder(\n                  builder: (BuildContext context) {\n                    return Container(\n                      padding: const EdgeInsets.all(24),\n                      alignment: Alignment.center,\n                      child: ElevatedButton(\n                        child: const Text('Collapse This Tile'),\n                        onPressed: () {\n                          return ExpansionTileController.of(context).collapse();\n                        },\n                      ),\n                    );\n                  },\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/FilledButton-class.html",
  "title": "FilledButton class - material library - Dart API",
  "documentation_content": "FilledButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nFilledButton class\nFilledButton\nbrightness_4\nbrightness_5\ndescription\nFilledButton class\nA Material Design filled button.\nFilled buttons have the most visual impact after the FloatingActionButton,\nand should be used for important, final actions that complete a flow,\nlike Save, Join now, or Confirm.\nA filled button is a label child displayed on a Material\nwidget. The label's Text and Icon widgets are displayed in\nstyle's ButtonStyle.foregroundColor and the button's filled\nbackground is the ButtonStyle.backgroundColor.\nThe filled button's default style is defined by\ndefaultStyleOf. The style of this filled button can be\noverridden with its style parameter. The style of all filled\nbuttons in a subtree can be overridden with the\nFilledButtonTheme, and the style of all of the filled\nbuttons in an app can be overridden with the Theme's\nThemeData.filledButtonTheme property.\nThe static styleFrom method is a convenient way to create a\nfilled button ButtonStyle from simple values.\nIf onPressed and onLongPress callbacks are null, then the\nbutton will be disabled.\nTo create a 'filled tonal' button, use FilledButton.tonal.\nThis sample produces enabled and disabled filled and filled tonal\nbuttons.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.FilledButton.1 mysample\nSee also:\nElevatedButton, a filled button whose material elevates when pressed.\nOutlinedButton, a button with an outlined border and no fill color.\nTextButton, a button with no outline or fill color.\nmaterial.io/design/components/buttons.html\nm3.material.io/components/buttons\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nButtonStyleButton\nFilledButton\nConstructors\nFilledButton({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, ButtonStyle? style, FocusNode? focusNode, bool autofocus = false, Clip clipBehavior = Clip.none, MaterialStatesController? statesController, required Widget? child})\nCreate a FilledButton.\nconst\nFilledButton.icon({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, ButtonStyle? style, FocusNode? focusNode, bool? autofocus, Clip? clipBehavior, MaterialStatesController? statesController, required Widget icon, required Widget label})\nCreate a filled button from icon and label.\nfactory\nFilledButton.tonal({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, ButtonStyle? style, FocusNode? focusNode, bool autofocus = false, Clip clipBehavior = Clip.none, MaterialStatesController? statesController, required Widget? child})\nCreate a tonal variant of FilledButton.\nconst\nFilledButton.tonalIcon({Key? key, required VoidCallback? onPressed, VoidCallback? onLongPress, ValueChanged<bool>? onHover, ValueChanged<bool>? onFocusChange, ButtonStyle? style, FocusNode? focusNode, bool? autofocus, Clip? clipBehavior, MaterialStatesController? statesController, required Widget icon, required Widget label})\nCreate a filled tonal button from icon and label.\nfactory\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinalinherited\nchild\n\u2192 Widget?\nTypically the button's label.\nfinalinherited\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinalinherited\nenabled\n\u2192 bool\nWhether the button is enabled or disabled.\nread-onlyinherited\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nisSemanticButton\n\u2192 bool?\nDetermine whether this subtree represents a button.\nfinalinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nonFocusChange\n\u2192 ValueChanged<bool>?\nHandler called when the focus changes.\nfinalinherited\nonHover\n\u2192 ValueChanged<bool>?\nCalled when a pointer enters or exits the button response area.\nfinalinherited\nonLongPress\n\u2192 VoidCallback?\nCalled when the button is long-pressed.\nfinalinherited\nonPressed\n\u2192 VoidCallback?\nCalled when the button is tapped or otherwise activated.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nstatesController\n\u2192 MaterialStatesController?\nRepresents the interactive \"state\" of this widget in terms of\na set of MaterialStates, like MaterialState.pressed and\nMaterialState.focused.\nfinalinherited\nstyle\n\u2192 ButtonStyle?\nCustomizes this button's appearance.\nfinalinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<ButtonStyleButton>\nCreates the mutable state for this widget at a given location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\ndefaultStyleOf(BuildContext context)\n\u2192 ButtonStyle\nDefines the button's default appearance.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nthemeStyleOf(BuildContext context)\n\u2192 ButtonStyle?\nReturns the FilledButtonThemeData.style of the closest\nFilledButtonTheme ancestor.\noverride\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\nstyleFrom({Color? foregroundColor, Color? backgroundColor, Color? disabledForegroundColor, Color? disabledBackgroundColor, Color? shadowColor, Color? surfaceTintColor, double? elevation, TextStyle? textStyle, EdgeInsetsGeometry? padding, Size? minimumSize, Size? fixedSize, Size? maximumSize, BorderSide? side, OutlinedBorder? shape, MouseCursor? enabledMouseCursor, MouseCursor? disabledMouseCursor, VisualDensity? visualDensity, MaterialTapTargetSize? tapTargetSize, Duration? animationDuration, bool? enableFeedback, AlignmentGeometry? alignment, InteractiveInkFeatureFactory? splashFactory})\n\u2192 ButtonStyle\nA static convenience method that constructs a filled button\nButtonStyle given simple values.\nFlutter\nmaterial\nFilledButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [FilledButton].\n\nvoid main() {\n  runApp(const FilledButtonApp());\n}\n\nclass FilledButtonApp extends StatelessWidget {\n  const FilledButtonApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('FilledButton Sample')),\n        body: Center(\n          child: Row(\n            mainAxisSize: MainAxisSize.min,\n            children: <Widget>[\n              Column(children: <Widget>[\n                const SizedBox(height: 30),\n                const Text('Filled'),\n                const SizedBox(height: 15),\n                FilledButton(\n                  onPressed: () {},\n                  child: const Text('Enabled'),\n                ),\n                const SizedBox(height: 30),\n                const FilledButton(\n                  onPressed: null,\n                  child: Text('Disabled'),\n                ),\n              ]),\n              const SizedBox(width: 30),\n              Column(children: <Widget>[\n                const SizedBox(height: 30),\n                const Text('Filled tonal'),\n                const SizedBox(height: 15),\n                FilledButton.tonal(\n                  onPressed: () {},\n                  child: const Text('Enabled'),\n                ),\n                const SizedBox(height: 30),\n                const FilledButton.tonal(\n                  onPressed: null,\n                  child: Text('Disabled'),\n                ),\n              ])\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/FilterChip-class.html",
  "title": "FilterChip class - material library - Dart API",
  "documentation_content": "FilterChip class - material library - Dart API\nmenu\nFlutter\nmaterial\nFilterChip class\nFilterChip\nbrightness_4\nbrightness_5\ndescription\nFilterChip class\nA Material Design filter chip.\nFilter chips use tags or descriptive words as a way to filter content.\nFilter chips are a good alternative to Checkbox or Switch widgets.\nUnlike these alternatives, filter chips allow for clearly delineated and\nexposed options in a compact area.\nRequires one of its ancestors to be a Material widget.\nThis example shows how to use FilterChips to filter through exercises.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.FilterChip.1 mysample\nMaterial Design 3\nFilterChip can be used for multiple select Filter chip from\nMaterial Design 3. If ThemeData.useMaterial3 is true, then FilterChip\nwill be styled to match the Material Design 3 specification for Filter\nchips. Use ChoiceChip for single select Filter chips.\nSee also:\nChip, a chip that displays information and can be deleted.\nInputChip, a chip that represents a complex piece of information, such\nas an entity (person, place, or thing) or conversational text, in a\ncompact form.\nChoiceChip, allows a single selection from a set of options. Choice\nchips contain related descriptive text or categories.\nActionChip, represents an action related to primary content.\nCircleAvatar, which shows images or initials of people.\nWrap, A widget that displays its children in multiple horizontal or\nvertical runs.\nmaterial.io/design/components/chips.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nFilterChip\nImplemented types\nChipAttributes\nSelectableChipAttributes\nCheckmarkableChipAttributes\nDisabledChipAttributes\nConstructors\nFilterChip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, bool selected = false, required ValueChanged<bool>? onSelected, double? pressElevation, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialStateProperty<Color?>? color, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder()})\nCreate a chip that acts like a checkbox.\nconst\nFilterChip.elevated({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, bool selected = false, required ValueChanged<bool>? onSelected, double? pressElevation, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialStateProperty<Color?>? color, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder()})\nCreate an elevated chip that acts like a checkbox.\nconst\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\navatar\n\u2192 Widget?\nA widget to display prior to the chip's label.\nfinal\navatarBorder\n\u2192 ShapeBorder\nThe shape of the translucent highlight painted over the avatar when the\nselected property is true.\nfinal\nbackgroundColor\n\u2192 Color?\nColor to be used for the unselected, enabled chip's background.\nfinal\ncheckmarkColor\n\u2192 Color?\nColor of the chip's check mark when a check mark is visible.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncolor\n\u2192 MaterialStateProperty<Color?>?\nThe color that fills the chip, in all MaterialStates.\nfinal\ndisabledColor\n\u2192 Color?\nThe color used for the chip's background to indicate that it is not\nenabled.\nfinal\nelevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\niconTheme\n\u2192 IconThemeData?\nTheme used for all icons in the chip.\nfinal\nisEnabled\n\u2192 bool\nWhether or not this chip is enabled for input.\nread-onlyoverride\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nlabel\n\u2192 Widget\nThe primary content of the chip.\nfinal\nlabelPadding\n\u2192 EdgeInsetsGeometry?\nThe padding around the label widget.\nfinal\nlabelStyle\n\u2192 TextStyle?\nThe style to be applied to the chip's label.\nfinal\nmaterialTapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the tap target.\nfinal\nonSelected\n\u2192 ValueChanged<bool>?\nCalled when the chip should change between selected and de-selected\nstates.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe padding between the contents of the chip and the outside shape.\nfinal\npressElevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent during the\npress motion.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselected\n\u2192 bool\nWhether or not this chip is selected.\nfinal\nselectedColor\n\u2192 Color?\nColor to be used for the chip's background, indicating that it is\nselected.\nfinal\nselectedShadowColor\n\u2192 Color?\nColor of the chip's shadow when the elevation is greater than 0 and the\nchip is selected.\nfinal\nshadowColor\n\u2192 Color?\nColor of the chip's shadow when the elevation is greater than 0.\nfinal\nshape\n\u2192 OutlinedBorder?\nThe OutlinedBorder to draw around the chip.\nfinal\nshowCheckmark\n\u2192 bool?\nWhether or not to show a check mark when\nSelectableChipAttributes.selected is true.\nfinal\nside\n\u2192 BorderSide?\nThe color and weight of the chip's outline.\nfinal\nsurfaceTintColor\n\u2192 Color?\nColor of the chip's surface tint overlay when its elevation is\ngreater than 0.\nfinal\ntooltip\n\u2192 String?\nTooltip string to be used for the body area (where the label and avatar\nare) of the chip.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the chip's layout will be.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nFilterChip class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [FilterChip].\n\nenum ExerciseFilter { walking, running, cycling, hiking }\n\nvoid main() => runApp(const ChipApp());\n\nclass ChipApp extends StatelessWidget {\n  const ChipApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(\n          title: const Text('FilterChip Sample'),\n        ),\n        body: const FilterChipExample(),\n      ),\n    );\n  }\n}\n\nclass FilterChipExample extends StatefulWidget {\n  const FilterChipExample({super.key});\n\n  @override\n  State<FilterChipExample> createState() => _FilterChipExampleState();\n}\n\nclass _FilterChipExampleState extends State<FilterChipExample> {\n  Set<ExerciseFilter> filters = <ExerciseFilter>{};\n\n  @override\n  Widget build(BuildContext context) {\n    final TextTheme textTheme = Theme.of(context).textTheme;\n\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          Text('Choose an exercise', style: textTheme.labelLarge),\n          const SizedBox(height: 5.0),\n          Wrap(\n            spacing: 5.0,\n            children: ExerciseFilter.values.map((ExerciseFilter exercise) {\n              return FilterChip(\n                label: Text(exercise.name),\n                selected: filters.contains(exercise),\n                onSelected: (bool selected) {\n                  setState(() {\n                    if (selected) {\n                      filters.add(exercise);\n                    } else {\n                      filters.remove(exercise);\n                    }\n                  });\n                },\n              );\n            }).toList(),\n          ),\n          const SizedBox(height: 10.0),\n          Text(\n            'Looking for: ${filters.map((ExerciseFilter e) => e.name).join(', ')}',\n            style: textTheme.labelLarge,\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/FlexibleSpaceBar-class.html",
  "title": "FlexibleSpaceBar class - material library - Dart API",
  "documentation_content": "FlexibleSpaceBar class - material library - Dart API\nmenu\nFlutter\nmaterial\nFlexibleSpaceBar class\nFlexibleSpaceBar\nbrightness_4\nbrightness_5\ndescription\nFlexibleSpaceBar class\nThe part of a Material Design AppBar that expands, collapses, and\nstretches.\nMost commonly used in the SliverAppBar.flexibleSpace field, a flexible\nspace bar expands and contracts as the app scrolls so that the AppBar\nreaches from the top of the app to the top of the scrolling contents of the\napp. When using SliverAppBar.flexibleSpace, the SliverAppBar.expandedHeight\nmust be large enough to accommodate the SliverAppBar.flexibleSpace widget.\nFurthermore is included functionality for stretch behavior. When\nSliverAppBar.stretch is true, and your ScrollPhysics allow for\noverscroll, this space will stretch with the overscroll.\nThe widget that sizes the AppBar must wrap it in the widget returned by\nFlexibleSpaceBar.createSettings, to convey sizing information down to the\nFlexibleSpaceBar.\nThis sample application demonstrates the different features of the\nFlexibleSpaceBar when used in a SliverAppBar. This app bar is configured\nto stretch into the overscroll space, and uses the\nFlexibleSpaceBar.stretchModes to apply fadeTitle, blurBackground and\nzoomBackground. The app bar also makes use of CollapseMode.parallax by\ndefault.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.FlexibleSpaceBar.1 mysample\nSee also:\nSliverAppBar, which implements the expanding and contracting.\nAppBar, which is used by SliverAppBar.\nmaterial.io/design/components/app-bars-top.html#behavior\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nFlexibleSpaceBar\nConstructors\nFlexibleSpaceBar({Key? key, Widget? title, Widget? background, bool? centerTitle, EdgeInsetsGeometry? titlePadding, CollapseMode collapseMode = CollapseMode.parallax, List<StretchMode> stretchModes = const <StretchMode>[StretchMode.zoomBackground], double expandedTitleScale = 1.5})\nCreates a flexible space bar.\nconst\nProperties\nbackground\n\u2192 Widget?\nShown behind the title when expanded.\nfinal\ncenterTitle\n\u2192 bool?\nWhether the title should be centered.\nfinal\ncollapseMode\n\u2192 CollapseMode\nCollapse effect while scrolling.\nfinal\nexpandedTitleScale\n\u2192 double\nDefines how much the title is scaled when the FlexibleSpaceBar is expanded\ndue to the user scrolling downwards. The title is scaled uniformly on the\nx and y axes while maintaining its bottom-left position (bottom-center if\ncenterTitle is true).\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nstretchModes\n\u2192 List<StretchMode>\nStretch effect while over-scrolling.\nfinal\ntitle\n\u2192 Widget?\nThe primary contents of the flexible space bar when expanded.\nfinal\ntitlePadding\n\u2192 EdgeInsetsGeometry?\nDefines how far the title is inset from either the widget's\nbottom-left or its center.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<FlexibleSpaceBar>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\ncreateSettings({double? toolbarOpacity, double? minExtent, double? maxExtent, bool? isScrolledUnder, bool? hasLeading, required double currentExtent, required Widget child})\n\u2192 Widget\nWraps a widget that contains an AppBar to convey sizing information down\nto the FlexibleSpaceBar.\nFlutter\nmaterial\nFlexibleSpaceBar class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [FlexibleSpaceBar].\n\nvoid main() => runApp(const MaterialApp(home: FlexibleSpaceBarExampleApp()));\n\nclass FlexibleSpaceBarExampleApp extends StatelessWidget {\n  const FlexibleSpaceBarExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: CustomScrollView(\n        physics: const BouncingScrollPhysics(\n            parent: AlwaysScrollableScrollPhysics()),\n        slivers: <Widget>[\n          SliverAppBar(\n            stretch: true,\n            onStretchTrigger: () {\n              // Function callback for stretch\n              return Future<void>.value();\n            },\n            expandedHeight: 300.0,\n            flexibleSpace: FlexibleSpaceBar(\n              stretchModes: const <StretchMode>[\n                StretchMode.zoomBackground,\n                StretchMode.blurBackground,\n                StretchMode.fadeTitle,\n              ],\n              centerTitle: true,\n              title: const Text('Flight Report'),\n              background: Stack(\n                fit: StackFit.expand,\n                children: <Widget>[\n                  Image.network(\n                    'https://flutter.github.io/assets-for-api-docs/assets/widgets/owl-2.jpg',\n                    fit: BoxFit.cover,\n                  ),\n                  const DecoratedBox(\n                    decoration: BoxDecoration(\n                      gradient: LinearGradient(\n                        begin: Alignment(0.0, 0.5),\n                        end: Alignment.center,\n                        colors: <Color>[\n                          Color(0x60000000),\n                          Color(0x00000000),\n                        ],\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          ),\n          SliverList(\n            delegate: SliverChildListDelegate(\n              const <Widget>[\n                ListTile(\n                  leading: Icon(Icons.wb_sunny),\n                  title: Text('Sunday'),\n                  subtitle: Text('sunny, h: 80, l: 65'),\n                ),\n                ListTile(\n                  leading: Icon(Icons.wb_sunny),\n                  title: Text('Monday'),\n                  subtitle: Text('sunny, h: 80, l: 65'),\n                ),\n                // ListTiles++\n              ],\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/FloatingActionButton-class.html",
  "title": "FloatingActionButton class - material library - Dart API",
  "documentation_content": "FloatingActionButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nFloatingActionButton class\nFloatingActionButton\nbrightness_4\nbrightness_5\ndescription\nFloatingActionButton class\nA Material Design floating action button.\nA floating action button is a circular icon button that hovers over content\nto promote a primary action in the application. Floating action buttons are\nmost commonly used in the Scaffold.floatingActionButton field.\nUse at most a single floating action button per screen. Floating action\nbuttons should be used for positive actions such as \"create\", \"share\", or\n\"navigate\". (If more than one floating action button is used within a\nRoute, then make sure that each button has a unique heroTag, otherwise\nan exception will be thrown.)\nIf the onPressed callback is null, then the button will be disabled and\nwill not react to touch. It is highly discouraged to disable a floating\naction button as there is no indication to the user that the button is\ndisabled. Consider changing the backgroundColor if disabling the floating\naction button.\nThis example shows a FloatingActionButton in its usual position within a\nScaffold. Pressing the button cycles it through a few variations in its\nforegroundColor, backgroundColor, and shape. The button automatically\nanimates its segue from one set of visual parameters to another.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.FloatingActionButton.1 mysample\nThis sample shows all the variants of FloatingActionButton widget as\ndescribed in: https://m3.material.io/components/floating-action-button/overview.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.FloatingActionButton.2 mysample\nThis sample shows FloatingActionButton with additional color mappings as\ndescribed in: https://m3.material.io/components/floating-action-button/overview.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.FloatingActionButton.3 mysample\nSee also:\nScaffold, in which floating action buttons typically live.\nElevatedButton, a filled button whose material elevates when pressed.\nmaterial.io/design/components/buttons-floating-action-button.html\nm3.material.io/components/floating-action-button\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nFloatingActionButton\nConstructors\nFloatingActionButton({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required VoidCallback? onPressed, MouseCursor? mouseCursor, bool mini = false, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool isExtended = false, bool? enableFeedback})\nCreates a circular floating action button.\nconst\nFloatingActionButton.extended({Key? key, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, Color? splashColor, double? highlightElevation, double? disabledElevation, required VoidCallback? onPressed, MouseCursor? mouseCursor = SystemMouseCursors.click, ShapeBorder? shape, bool isExtended = true, MaterialTapTargetSize? materialTapTargetSize, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, double? extendedIconLabelSpacing, EdgeInsetsGeometry? extendedPadding, TextStyle? extendedTextStyle, Widget? icon, required Widget label, bool? enableFeedback})\nCreates a wider StadiumBorder-shaped floating action button with\nan optional icon and a label.\nconst\nFloatingActionButton.large({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required VoidCallback? onPressed, MouseCursor? mouseCursor, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool? enableFeedback})\nCreates a large circular floating action button.\nconst\nFloatingActionButton.small({Key? key, Widget? child, String? tooltip, Color? foregroundColor, Color? backgroundColor, Color? focusColor, Color? hoverColor, Color? splashColor, Object? heroTag = const _DefaultHeroTag(), double? elevation, double? focusElevation, double? hoverElevation, double? highlightElevation, double? disabledElevation, required VoidCallback? onPressed, MouseCursor? mouseCursor, ShapeBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialTapTargetSize? materialTapTargetSize, bool? enableFeedback})\nCreates a small circular floating action button.\nconst\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\nbackgroundColor\n\u2192 Color?\nThe button's background color.\nfinal\nchild\n\u2192 Widget?\nThe widget below this widget in the tree.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ndisabledElevation\n\u2192 double?\nThe z-coordinate at which to place this button when the button is disabled\n(onPressed is null).\nfinal\nelevation\n\u2192 double?\nThe z-coordinate at which to place this button relative to its parent.\nfinal\nenableFeedback\n\u2192 bool?\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinal\nextendedIconLabelSpacing\n\u2192 double?\nThe spacing between the icon and the label for an extended\nFloatingActionButton.\nfinal\nextendedPadding\n\u2192 EdgeInsetsGeometry?\nThe padding for an extended FloatingActionButton's content.\nfinal\nextendedTextStyle\n\u2192 TextStyle?\nThe text style for an extended FloatingActionButton's label.\nfinal\nfocusColor\n\u2192 Color?\nThe color to use for filling the button when the button has input focus.\nfinal\nfocusElevation\n\u2192 double?\nThe z-coordinate at which to place this button relative to its parent when\nthe button has the input focus.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nforegroundColor\n\u2192 Color?\nThe default foreground color for icons and text within the button.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheroTag\n\u2192 Object?\nThe tag to apply to the button's Hero widget.\nfinal\nhighlightElevation\n\u2192 double?\nThe z-coordinate at which to place this button relative to its parent when\nthe user is touching the button.\nfinal\nhoverColor\n\u2192 Color?\nThe color to use for filling the button when the button has a pointer\nhovering over it.\nfinal\nhoverElevation\n\u2192 double?\nThe z-coordinate at which to place this button relative to its parent when\nthe button is enabled and has a pointer hovering over it.\nfinal\nisExtended\n\u2192 bool\nTrue if this is an \"extended\" floating action button.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmaterialTapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the tap target.\nfinal\nmini\n\u2192 bool\nControls the size of this button.\nfinal\nmouseCursor\n\u2192 MouseCursor?\nThe cursor for a mouse pointer when it enters or is hovering over the\nbutton.\nfinal\nonPressed\n\u2192 VoidCallback?\nThe callback that is called when the button is tapped or otherwise activated.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshape\n\u2192 ShapeBorder?\nThe shape of the button's Material.\nfinal\nsplashColor\n\u2192 Color?\nThe splash color for this FloatingActionButton's InkWell.\nfinal\ntooltip\n\u2192 String?\nText that describes the action that will occur when the button is pressed.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nFloatingActionButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [FloatingActionButton].\n\nvoid main() {\n  runApp(const FloatingActionButtonExampleApp());\n}\n\nclass FloatingActionButtonExampleApp extends StatelessWidget {\n  const FloatingActionButtonExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const FloatingActionButtonExample(),\n    );\n  }\n}\n\nclass FloatingActionButtonExample extends StatefulWidget {\n  const FloatingActionButtonExample({super.key});\n\n  @override\n  State<FloatingActionButtonExample> createState() =>\n      _FloatingActionButtonExampleState();\n}\n\nclass _FloatingActionButtonExampleState\n    extends State<FloatingActionButtonExample> {\n  // The FAB's foregroundColor, backgroundColor, and shape\n  static const List<(Color?, Color? background, ShapeBorder?)> customizations =\n      <(Color?, Color?, ShapeBorder?)>[\n    (null, null, null), // The FAB uses its default for null parameters.\n    (null, Colors.green, null),\n    (Colors.white, Colors.green, null),\n    (Colors.white, Colors.green, CircleBorder()),\n  ];\n  int index = 0; // Selects the customization.\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('FloatingActionButton Sample'),\n      ),\n      body: const Center(child: Text('Press the button below!')),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          setState(() {\n            index = (index + 1) % customizations.length;\n          });\n        },\n        foregroundColor: customizations[index].$1,\n        backgroundColor: customizations[index].$2,\n        shape: customizations[index].$3,\n        child: const Icon(Icons.navigation),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [FloatingActionButton].\n\nvoid main() => runApp(const FloatingActionButtonExampleApp());\n\nclass FloatingActionButtonExampleApp extends StatelessWidget {\n  const FloatingActionButtonExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const FloatingActionButtonExample(),\n    );\n  }\n}\n\nclass FloatingActionButtonExample extends StatelessWidget {\n  const FloatingActionButtonExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final ColorScheme colorScheme = Theme.of(context).colorScheme;\n\n    Widget titleBox(String title) {\n      return DecoratedBox(\n        decoration: BoxDecoration(\n          color: colorScheme.inverseSurface,\n          borderRadius: BorderRadius.circular(4),\n        ),\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),\n          child: Text(title,\n              style: TextStyle(color: colorScheme.onInverseSurface)),\n        ),\n      );\n    }\n\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('FAB Additional Color Mappings'),\n      ),\n      body: Center(\n        child: Row(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: <Widget>[\n            // Surface color mapping.\n            Column(\n              mainAxisSize: MainAxisSize.min,\n              children: <Widget>[\n                FloatingActionButton.large(\n                  foregroundColor: colorScheme.primary,\n                  backgroundColor: colorScheme.surface,\n                  onPressed: () {\n                    // Add your onPressed code here!\n                  },\n                  child: const Icon(Icons.edit_outlined),\n                ),\n                const SizedBox(height: 20),\n                titleBox('Surface'),\n              ],\n            ),\n            // Secondary color mapping.\n            Column(\n              mainAxisSize: MainAxisSize.min,\n              children: <Widget>[\n                FloatingActionButton.large(\n                  foregroundColor: colorScheme.onSecondaryContainer,\n                  backgroundColor: colorScheme.secondaryContainer,\n                  onPressed: () {\n                    // Add your onPressed code here!\n                  },\n                  child: const Icon(Icons.edit_outlined),\n                ),\n                const SizedBox(height: 20),\n                titleBox('Secondary'),\n              ],\n            ),\n            // Tertiary color mapping.\n            Column(\n              mainAxisSize: MainAxisSize.min,\n              children: <Widget>[\n                FloatingActionButton.large(\n                  foregroundColor: colorScheme.onTertiaryContainer,\n                  backgroundColor: colorScheme.tertiaryContainer,\n                  onPressed: () {\n                    // Add your onPressed code here!\n                  },\n                  child: const Icon(Icons.edit_outlined),\n                ),\n                const SizedBox(height: 20),\n                titleBox('Tertiary'),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [FloatingActionButton].\n\nvoid main() => runApp(const FloatingActionButtonExampleApp());\n\nclass FloatingActionButtonExampleApp extends StatelessWidget {\n  const FloatingActionButtonExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const FloatingActionButtonExample(),\n    );\n  }\n}\n\nclass FloatingActionButtonExample extends StatelessWidget {\n  const FloatingActionButtonExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('FloatingActionButton Sample'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: <Widget>[\n            Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                const Text('Small'),\n                const SizedBox(width: 16),\n                // An example of the small floating action button.\n                //\n                // https://m3.material.io/components/floating-action-button/specs#669a1be8-7271-48cb-a74d-dd502d73bda4\n                FloatingActionButton.small(\n                  onPressed: () {\n                    // Add your onPressed code here!\n                  },\n                  child: const Icon(Icons.add),\n                ),\n              ],\n            ),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                const Text('Regular'),\n                const SizedBox(width: 16),\n                // An example of the regular floating action button.\n                //\n                // https://m3.material.io/components/floating-action-button/specs#71504201-7bd1-423d-8bb7-07e0291743e5\n                FloatingActionButton(\n                  onPressed: () {\n                    // Add your onPressed code here!\n                  },\n                  child: const Icon(Icons.add),\n                ),\n              ],\n            ),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                const Text('Large'),\n                const SizedBox(width: 16),\n                // An example of the large floating action button.\n                //\n                // https://m3.material.io/components/floating-action-button/specs#9d7d3d6a-bab7-47cb-be32-5596fbd660fe\n                FloatingActionButton.large(\n                  onPressed: () {\n                    // Add your onPressed code here!\n                  },\n                  child: const Icon(Icons.add),\n                ),\n              ],\n            ),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: <Widget>[\n                const Text('Extended'),\n                const SizedBox(width: 16),\n                // An example of the extended floating action button.\n                //\n                // https://m3.material.io/components/extended-fab/specs#686cb8af-87c9-48e8-a3e1-db9da6f6c69b\n                FloatingActionButton.extended(\n                  onPressed: () {\n                    // Add your onPressed code here!\n                  },\n                  label: const Text('Add'),\n                  icon: const Icon(Icons.add),\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/IconButton-class.html",
  "title": "IconButton class - material library - Dart API",
  "documentation_content": "IconButton class - material library - Dart API\nmenu\nFlutter\nmaterial\nIconButton class\nIconButton\nbrightness_4\nbrightness_5\ndescription\nIconButton class\nA Material Design icon button.\nAn icon button is a picture printed on a Material widget that reacts to\ntouches by filling with color (ink).\nIcon buttons are commonly used in the AppBar.actions field, but they can\nbe used in many other places as well.\nIf the onPressed callback is null, then the button will be disabled and\nwill not react to touch.\nRequires one of its ancestors to be a Material widget. In Material Design 3,\nthis requirement no longer exists because this widget builds a subclass of\nButtonStyleButton.\nThe hit region of an icon button will, if possible, be at least\nkMinInteractiveDimension pixels in size, regardless of the actual\niconSize, to satisfy the touch target size\nrequirements in the Material Design specification. The alignment controls\nhow the icon itself is positioned within the hit region.\nThis sample shows an IconButton that uses the Material icon \"volume_up\" to\nincrease the volume.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.IconButton.1 mysample\nIcon sizes\nWhen creating an icon button with an Icon, do not override the\nicon's size with its Icon.size parameter, use the icon button's\niconSize parameter instead. For example do this:\nIconButton(\niconSize: 72,\nicon: const Icon(Icons.favorite),\nonPressed: () {\n// ...\n},\n),\nAvoid doing this:\nIconButton(\nicon: const Icon(Icons.favorite, size: 72),\nonPressed: () {\n// ...\n},\n),\nIf you do, the button's size will be based on the default icon\nsize, not 72, which may produce unexpected layouts and clipping\nissues.\nAdding a filled background\nIcon buttons don't support specifying a background color or other\nbackground decoration because typically the icon is just displayed\non top of the parent widget's background. Icon buttons that appear\nin AppBar.actions are an example of this.\nIt's easy enough to create an icon button with a filled background\nusing the Ink widget. The Ink widget renders a decoration on\nthe underlying Material along with the splash and highlight\nInkResponse contributed by descendant widgets.\nIn this sample the icon button's background color is defined with an Ink\nwidget whose child is an IconButton. The icon button's filled background\nis a light shade of blue, it's a filled circle, and it's as big as the\nbutton is.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.IconButton.2 mysample\nMaterial Design 3 introduced new types (standard and contained) of IconButtons.\nThe default IconButton is the standard type. To create a filled icon button,\nuse IconButton.filled; to create a filled tonal icon button, use IconButton.filledTonal;\nto create a outlined icon button, use IconButton.outlined.\nMaterial Design 3 also treats IconButtons as toggle buttons. In order\nto not break existing apps, the toggle feature can be optionally controlled\nby the isSelected property.\nIf isSelected is null it will behave as a normal button. If isSelected is not\nnull then it will behave as a toggle button. If isSelected is true then it will\nshow selectedIcon, if it false it will show the normal icon.\nIn Material Design 3, both IconTheme and IconButtonTheme are used to override the default style\nof IconButton. If both themes exist, the IconButtonTheme will override IconTheme no matter\nwhich is closer to the IconButton. Each IconButton's property is resolved by the order of\nprecedence: widget property, IconButtonTheme property, IconTheme property and\ninternal default property value.\nIn Material Design 3, the IconButton.visualDensity defaults to VisualDensity.standard\nfor all platforms; otherwise the button will have a rounded rectangle shape if\nthe IconButton.visualDensity is set to VisualDensity.compact. Users can\ncustomize it by using IconButtonTheme, IconButton.style or IconButton.visualDensity.\nThis sample shows creation of IconButton widgets for standard, filled,\nfilled tonal and outlined types, as described in: https://m3.material.io/components/icon-buttons/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.IconButton.3 mysample\nThis sample shows creation of IconButton widgets with toggle feature for\nstandard, filled, filled tonal and outlined types, as described\nin: https://m3.material.io/components/icon-buttons/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.IconButton.4 mysample\nSee also:\nIcons, the library of Material Icons.\nBackButton, an icon button for a \"back\" affordance which adapts to the\ncurrent platform's conventions.\nCloseButton, an icon button for closing pages.\nAppBar, to show a toolbar at the top of an application.\nTextButton, ElevatedButton, OutlinedButton, for buttons with text labels and an optional icon.\nInkResponse and InkWell, for the ink splash effect itself.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nIconButton\nConstructors\nIconButton({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required VoidCallback? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})\nCreates an icon button.\nconst\nIconButton.filled({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required VoidCallback? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})\nCreate a filled variant of IconButton.\nconst\nIconButton.filledTonal({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required VoidCallback? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})\nCreate a filled tonal variant of IconButton.\nconst\nIconButton.outlined({Key? key, double? iconSize, VisualDensity? visualDensity, EdgeInsetsGeometry? padding, AlignmentGeometry? alignment, double? splashRadius, Color? color, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? splashColor, Color? disabledColor, required VoidCallback? onPressed, MouseCursor? mouseCursor, FocusNode? focusNode, bool autofocus = false, String? tooltip, bool? enableFeedback, BoxConstraints? constraints, ButtonStyle? style, bool? isSelected, Widget? selectedIcon, required Widget icon})\nCreate a filled tonal variant of IconButton.\nconst\nProperties\nalignment\n\u2192 AlignmentGeometry?\nDefines how the icon is positioned within the IconButton.\nfinal\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\ncolor\n\u2192 Color?\nThe color to use for the icon inside the button, if the icon is enabled.\nDefaults to leaving this up to the icon widget.\nfinal\nconstraints\n\u2192 BoxConstraints?\nOptional size constraints for the button.\nfinal\ndisabledColor\n\u2192 Color?\nThe color to use for the icon inside the button, if the icon is disabled.\nDefaults to the ThemeData.disabledColor of the current Theme.\nfinal\nenableFeedback\n\u2192 bool?\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinal\nfocusColor\n\u2192 Color?\nThe color for the button when it has the input focus.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhighlightColor\n\u2192 Color?\nThe secondary color of the button when the button is in the down (pressed)\nstate. The highlight color is represented as a solid color that is overlaid over the\nbutton color (if any). If the highlight color has transparency, the button color\nwill show through. The highlight fades in quickly as the button is held down.\nfinal\nhoverColor\n\u2192 Color?\nThe color for the button when a pointer is hovering over it.\nfinal\nicon\n\u2192 Widget\nThe icon to display inside the button.\nfinal\niconSize\n\u2192 double?\nThe size of the icon inside the button.\nfinal\nisSelected\n\u2192 bool?\nThe optional selection state of the icon button.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmouseCursor\n\u2192 MouseCursor?\nThe cursor for a mouse pointer when it enters or is hovering over the\nbutton.\nfinal\nonPressed\n\u2192 VoidCallback?\nThe callback that is called when the button is tapped or otherwise activated.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe padding around the button's icon. The entire padded icon will react\nto input gestures.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselectedIcon\n\u2192 Widget?\nThe icon to display inside the button when isSelected is true. This property\ncan be null. The original icon will be used for both selected and unselected\nstatus if it is null.\nfinal\nsplashColor\n\u2192 Color?\nThe primary color of the button when the button is in the down (pressed) state.\nThe splash is represented as a circular overlay that appears above the\nhighlightColor overlay. The splash overlay has a center point that matches\nthe hit point of the user touch event. The splash overlay will expand to\nfill the button area if the touch is held for long enough time. If the splash\ncolor has transparency then the highlight and button color will show through.\nfinal\nsplashRadius\n\u2192 double?\nThe splash radius.\nfinal\nstyle\n\u2192 ButtonStyle?\nCustomizes this button's appearance.\nfinal\ntooltip\n\u2192 String?\nText that describes the action that will occur when the button is pressed.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the icon button's layout will be.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\nstyleFrom({Color? foregroundColor, Color? backgroundColor, Color? disabledForegroundColor, Color? disabledBackgroundColor, Color? focusColor, Color? hoverColor, Color? highlightColor, Color? shadowColor, Color? surfaceTintColor, double? elevation, Size? minimumSize, Size? fixedSize, Size? maximumSize, double? iconSize, BorderSide? side, OutlinedBorder? shape, EdgeInsetsGeometry? padding, MouseCursor? enabledMouseCursor, MouseCursor? disabledMouseCursor, VisualDensity? visualDensity, MaterialTapTargetSize? tapTargetSize, Duration? animationDuration, bool? enableFeedback, AlignmentGeometry? alignment, InteractiveInkFeatureFactory? splashFactory})\n\u2192 ButtonStyle\nA static convenience method that constructs an icon button\nButtonStyle given simple values. This method is only used for Material 3.\nFlutter\nmaterial\nIconButton class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [IconButton].\n\nvoid main() => runApp(const IconButtonExampleApp());\n\nclass IconButtonExampleApp extends StatelessWidget {\n  const IconButtonExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('IconButton Sample')),\n        body: const IconButtonExample(),\n      ),\n    );\n  }\n}\n\nclass IconButtonExample extends StatelessWidget {\n  const IconButtonExample({super.key});\n\n  @override\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      color: Colors.white,\n      child: Center(\n        child: Ink(\n          decoration: const ShapeDecoration(\n            color: Colors.lightBlue,\n            shape: CircleBorder(),\n          ),\n          child: IconButton(\n            icon: const Icon(Icons.android),\n            color: Colors.white,\n            onPressed: () {},\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [IconButton] with toggle feature.\n\nvoid main() {\n  runApp(const IconButtonToggleApp());\n}\n\nclass IconButtonToggleApp extends StatelessWidget {\n  const IconButtonToggleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        colorSchemeSeed: const Color(0xff6750a4),\n        useMaterial3: true,\n      ),\n      title: 'Icon Button Types',\n      home: const Scaffold(\n        body: DemoIconToggleButtons(),\n      ),\n    );\n  }\n}\n\nclass DemoIconToggleButtons extends StatefulWidget {\n  const DemoIconToggleButtons({super.key});\n\n  @override\n  State<DemoIconToggleButtons> createState() => _DemoIconToggleButtonsState();\n}\n\nclass _DemoIconToggleButtonsState extends State<DemoIconToggleButtons> {\n  bool standardSelected = false;\n  bool filledSelected = false;\n  bool tonalSelected = false;\n  bool outlinedSelected = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n      children: <Widget>[\n        Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            IconButton(\n              isSelected: standardSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: () {\n                setState(() {\n                  standardSelected = !standardSelected;\n                });\n              },\n            ),\n            const SizedBox(width: 10),\n            IconButton(\n              isSelected: standardSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: null,\n            ),\n          ],\n        ),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            IconButton.filled(\n              isSelected: filledSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: () {\n                setState(() {\n                  filledSelected = !filledSelected;\n                });\n              },\n            ),\n            const SizedBox(width: 10),\n            IconButton.filled(\n              isSelected: filledSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: null,\n            ),\n          ],\n        ),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            IconButton.filledTonal(\n              isSelected: tonalSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: () {\n                setState(() {\n                  tonalSelected = !tonalSelected;\n                });\n              },\n            ),\n            const SizedBox(width: 10),\n            IconButton.filledTonal(\n              isSelected: tonalSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: null,\n            ),\n          ],\n        ),\n        Row(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            IconButton.outlined(\n              isSelected: outlinedSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: () {\n                setState(() {\n                  outlinedSelected = !outlinedSelected;\n                });\n              },\n            ),\n            const SizedBox(width: 10),\n            IconButton.outlined(\n              isSelected: outlinedSelected,\n              icon: const Icon(Icons.settings_outlined),\n              selectedIcon: const Icon(Icons.settings),\n              onPressed: null,\n            ),\n          ],\n        ),\n      ],\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [IconButton].\n\nvoid main() {\n  runApp(const IconButtonApp());\n}\n\nclass IconButtonApp extends StatelessWidget {\n  const IconButtonApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      title: 'Icon Button Types',\n      home: const Scaffold(\n        body: ButtonTypesExample(),\n      ),\n    );\n  }\n}\n\nclass ButtonTypesExample extends StatelessWidget {\n  const ButtonTypesExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Padding(\n      padding: EdgeInsets.all(4.0),\n      child: Row(\n        children: <Widget>[\n          Spacer(),\n          ButtonTypesGroup(enabled: true),\n          ButtonTypesGroup(enabled: false),\n          Spacer(),\n        ],\n      ),\n    );\n  }\n}\n\nclass ButtonTypesGroup extends StatelessWidget {\n  const ButtonTypesGroup({super.key, required this.enabled});\n\n  final bool enabled;\n\n  @override\n  Widget build(BuildContext context) {\n    final VoidCallback? onPressed = enabled ? () {} : null;\n\n    return Padding(\n      padding: const EdgeInsets.all(4.0),\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        children: <Widget>[\n          IconButton(\n              icon: const Icon(Icons.filter_drama), onPressed: onPressed),\n\n          // Filled icon button\n          IconButton.filled(\n              onPressed: onPressed, icon: const Icon(Icons.filter_drama)),\n\n          // Filled tonal icon button\n          IconButton.filledTonal(\n              onPressed: onPressed, icon: const Icon(Icons.filter_drama)),\n\n          // Outlined icon button\n          IconButton.outlined(\n              onPressed: onPressed, icon: const Icon(Icons.filter_drama)),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [IconButton].\n\nvoid main() => runApp(const IconButtonExampleApp());\n\nclass IconButtonExampleApp extends StatelessWidget {\n  const IconButtonExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('IconButton Sample')),\n        body: const Center(\n          child: IconButtonExample(),\n        ),\n      ),\n    );\n  }\n}\n\ndouble _volume = 0.0;\n\nclass IconButtonExample extends StatefulWidget {\n  const IconButtonExample({super.key});\n\n  @override\n  State<IconButtonExample> createState() => _IconButtonExampleState();\n}\n\nclass _IconButtonExampleState extends State<IconButtonExample> {\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      mainAxisSize: MainAxisSize.min,\n      children: <Widget>[\n        IconButton(\n          icon: const Icon(Icons.volume_up),\n          tooltip: 'Increase volume by 10',\n          onPressed: () {\n            setState(() {\n              _volume += 10;\n            });\n          },\n        ),\n        Text('Volume : $_volume'),\n      ],\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/Ink-class.html",
  "title": "Ink class - material library - Dart API",
  "documentation_content": "Ink class - material library - Dart API\nmenu\nFlutter\nmaterial\nInk class\nInk\nbrightness_4\nbrightness_5\ndescription\nInk class\nA convenience widget for drawing images and other decorations on Material\nwidgets, so that InkWell and InkResponse splashes will render over them.\nInk splashes and highlights, as rendered by InkWell and InkResponse,\ndraw on the actual underlying Material, under whatever widgets are drawn\nover the material (such as Text and Icons). If an opaque image is drawn\nover the Material (maybe using a Container or DecoratedBox), these ink\neffects will not be visible, as they will be entirely obscured by the opaque\ngraphics drawn above the Material.\nThis widget draws the given Decoration directly on the Material, in the\nsame way that InkWell and InkResponse draw there. This allows the\nsplashes to be drawn above the otherwise opaque graphics.\nAn alternative solution is to use a MaterialType.transparency material\nabove the opaque graphics, so that the ink responses from InkWells and\nInkResponses will be drawn on the transparent material on top of the\nopaque graphics, rather than under the opaque graphics on the underlying\nMaterial.\nLimitations\nThis widget is subject to the same limitations as other ink effects, as\ndescribed in the documentation for Material. Most notably, the position of\nan Ink widget must not change during the lifetime of the Material object\nunless a LayoutChangedNotification is dispatched each frame that the\nposition changes. This is done automatically for ListView and other\nscrolling widgets, but is not done for animated transitions such as\nSlideTransition.\nAdditionally, if multiple Ink widgets paint on the same Material in the\nsame location, their relative order is not guaranteed. The decorations will\nbe painted in the order that they were added to the material, which\ngenerally speaking will match the order they are given in the widget tree,\nbut this order may appear to be somewhat random in more dynamic situations.\nThis example shows how a Material widget can have a yellow rectangle drawn\non it using Ink, while still having ink effects over the yellow rectangle:\nlink\ncontent_copy\nMaterial(\ncolor: Colors.teal[900],\nchild: Center(\nchild: Ink(\ncolor: Colors.yellow,\nwidth: 200.0,\nheight: 100.0,\nchild: InkWell(\nonTap: () { /* ... */ },\nchild: const Center(\nchild: Text('YELLOW'),\n)\n),\n),\n),\n)\nThe following example shows how an image can be printed on a Material\nwidget with an InkWell above it:\nlink\ncontent_copy\nMaterial(\ncolor: Colors.grey[800],\nchild: Center(\nchild: Ink.image(\nimage: const AssetImage('cat.jpeg'),\nfit: BoxFit.cover,\nwidth: 300.0,\nheight: 200.0,\nchild: InkWell(\nonTap: () { /* ... */ },\nchild: const Align(\nalignment: Alignment.topLeft,\nchild: Padding(\npadding: EdgeInsets.all(10.0),\nchild: Text(\n'KITTEN',\nstyle: TextStyle(\nfontWeight: FontWeight.w900,\ncolor: Colors.white,\n),\n),\n),\n)\n),\n),\n),\n)\nWhat to do if you want to clip this Ink.image?\nWrapping the Ink in a clipping widget directly will not work since the\nMaterial it will be printed on is responsible for clipping.\nIn this example the image is not being clipped as expected. This is because\nit is being rendered onto the Scaffold body Material, which isn't wrapped in\nthe ClipRRect.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Ink.3 mysample\nOne solution would be to deliberately wrap the Ink.image in a Material.\nThis makes sure the Material that the image is painted on is also responsible\nfor clipping said content.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.Ink.4 mysample\nSee also:\nContainer, a more generic form of this widget which paints itself,\nrather that deferring to the nearest Material widget.\nInkDecoration, the InkFeature subclass used by this widget to paint\non Material widgets.\nInkWell and InkResponse, which also draw on Material widgets.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nInk\nConstructors\nInk({Key? key, EdgeInsetsGeometry? padding, Color? color, Decoration? decoration, double? width, double? height, Widget? child})\nPaints a decoration (which can be a simple color) on a Material.\nInk.image({Key? key, EdgeInsetsGeometry? padding, required ImageProvider<Object> image, ImageErrorListener? onImageError, ColorFilter? colorFilter, BoxFit? fit, AlignmentGeometry alignment = Alignment.center, Rect? centerSlice, ImageRepeat repeat = ImageRepeat.noRepeat, bool matchTextDirection = false, double? width, double? height, Widget? child})\nCreates a widget that shows an image (obtained from an ImageProvider) on\na Material.\nProperties\nchild\n\u2192 Widget?\nThe child contained by the container.\nfinal\ndecoration\n\u2192 Decoration?\nThe decoration to paint on the nearest ancestor Material widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nheight\n\u2192 double?\nA height to apply to the decoration and the child. The height includes\nany padding.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\npadding\n\u2192 EdgeInsetsGeometry?\nEmpty space to inscribe inside the decoration. The child, if any, is\nplaced inside this padding.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nwidth\n\u2192 double?\nA width to apply to the decoration and the child. The width includes\nany padding.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<Ink>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nInk class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Image.frameBuilder].\n\nvoid main() {\n  runApp(MaterialApp(\n    home: Scaffold(\n      appBar: AppBar(title: const Text('Image.frameBuilder Sample')),\n      body: const Center(\n        child: ImageClipExample(\n          image: NetworkImage(\n              'https://flutter.github.io/assets-for-api-docs/assets/widgets/puffin.jpg'),\n        ),\n      ),\n    ),\n  ));\n}\n\nclass ImageClipExample extends StatelessWidget {\n  const ImageClipExample({super.key, required this.image});\n\n  final ImageProvider image;\n\n  @override\n  Widget build(BuildContext context) {\n    return ClipRRect(\n      borderRadius: BorderRadius.circular(100),\n      child: Material(\n        child: Ink.image(\n          fit: BoxFit.fill,\n          width: 300,\n          height: 300,\n          image: image,\n          child: InkWell(\n            onTap: () {/* ... */},\n            child: const Align(\n              child: Padding(\n                padding: EdgeInsets.all(10.0),\n                child: Text(\n                  'PUFFIN',\n                  style: TextStyle(\n                    fontWeight: FontWeight.w900,\n                    color: Colors.white,\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [Image.frameBuilder].\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('Image.frameBuilder Sample')),\n        body: const Center(\n          child: ImageClipExample(\n            image: NetworkImage(\n                'https://flutter.github.io/assets-for-api-docs/assets/widgets/puffin.jpg'),\n          ),\n        ),\n      ),\n    ),\n  );\n}\n\nclass ImageClipExample extends StatelessWidget {\n  const ImageClipExample({super.key, required this.image});\n\n  final ImageProvider image;\n\n  @override\n  Widget build(BuildContext context) {\n    return ClipRRect(\n      borderRadius: BorderRadius.circular(100),\n      child: Ink.image(\n        fit: BoxFit.fill,\n        width: 300,\n        height: 300,\n        image: image,\n        child: InkWell(\n          onTap: () {/* ... */},\n          child: const Align(\n            child: Padding(\n              padding: EdgeInsets.all(10.0),\n              child: Text(\n                'PUFFIN',\n                style: TextStyle(\n                  fontWeight: FontWeight.w900,\n                  color: Colors.white,\n                ),\n              ),\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InkWell-class.html",
  "title": "InkWell class - material library - Dart API",
  "documentation_content": "InkWell class - material library - Dart API\nmenu\nFlutter\nmaterial\nInkWell class\nInkWell\nbrightness_4\nbrightness_5\ndescription\nInkWell class\nA rectangular area of a Material that responds to touch.\nFor a variant of this widget that does not clip splashes, see InkResponse.\nThe following diagram shows how an InkWell looks when tapped, when using\ndefault values.\nThe InkWell widget must have a Material widget as an ancestor. The\nMaterial widget is where the ink reactions are actually painted. This\nmatches the Material Design premise wherein the Material is what is\nactually reacting to touches by spreading ink.\nIf a Widget uses this class directly, it should include the following line\nat the top of its build function to call debugCheckHasMaterial:\nassert(debugCheckHasMaterial(context));\nTroubleshooting\nThe ink splashes aren't visible!\nIf there is an opaque graphic, e.g. painted using a Container, Image, or\nDecoratedBox, between the Material widget and the InkWell widget, then\nthe splash won't be visible because it will be under the opaque graphic.\nThis is because ink splashes draw on the underlying Material itself, as\nif the ink was spreading inside the material.\nThe Ink widget can be used as a replacement for Image, Container, or\nDecoratedBox to ensure that the image or decoration also paints in the\nMaterial itself, below the ink.\nIf this is not possible for some reason, e.g. because you are using an\nopaque CustomPaint widget, alternatively consider using a second\nMaterial above the opaque widget but below the InkWell (as an\nancestor to the ink well). The MaterialType.transparency material\nkind can be used for this purpose.\nInkWell isn't clipping properly\nIf you want to clip an InkWell or any Ink widgets you need to keep in mind\nthat the Material that the Ink will be printed on is responsible for clipping.\nThis means you can't wrap the Ink widget in a clipping widget directly,\nsince this will leave the Material not clipped (and by extension the printed\nInk widgets as well).\nAn easy solution is to deliberately wrap the Ink widgets you want to clip\nin a Material, and wrap that in a clipping widget instead. See Ink for\nan example.\nThe ink splashes don't track the size of an animated container\nIf the size of an InkWell's Material ancestor changes while the InkWell's\nsplashes are expanding, you may notice that the splashes aren't clipped\ncorrectly. This can't be avoided.\nAn example of this situation is as follows:\nTap the container to cause it to grow. Then, tap it again and hold before\nthe widget reaches its maximum size to observe the clipped ink splash.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InkWell.1 mysample\nAn InkWell's splashes will not properly update to conform to changes if the\nsize of its underlying Material, where the splashes are rendered, changes\nduring animation. You should avoid using InkWells within Material widgets\nthat are changing size.\nSee also:\nGestureDetector, for listening for gestures without ink splashes.\nElevatedButton and TextButton, two kinds of buttons in Material Design.\nInkResponse, a variant of InkWell that doesn't force a rectangular\nshape on the ink reaction.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nInkResponse\nInkWell\nConstructors\nInkWell({Key? key, Widget? child, GestureTapCallback? onTap, GestureTapCallback? onDoubleTap, GestureLongPressCallback? onLongPress, GestureTapDownCallback? onTapDown, GestureTapUpCallback? onTapUp, GestureTapCallback? onTapCancel, GestureTapCallback? onSecondaryTap, GestureTapUpCallback? onSecondaryTapUp, GestureTapDownCallback? onSecondaryTapDown, GestureTapCallback? onSecondaryTapCancel, ValueChanged<bool>? onHighlightChanged, ValueChanged<bool>? onHover, MouseCursor? mouseCursor, Color? focusColor, Color? hoverColor, Color? highlightColor, MaterialStateProperty<Color?>? overlayColor, Color? splashColor, InteractiveInkFeatureFactory? splashFactory, double? radius, BorderRadius? borderRadius, ShapeBorder? customBorder, bool? enableFeedback = true, bool excludeFromSemantics = false, FocusNode? focusNode, bool canRequestFocus = true, ValueChanged<bool>? onFocusChange, bool autofocus = false, MaterialStatesController? statesController, Duration? hoverDuration})\nCreates an ink well.\nconst\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinalinherited\nborderRadius\n\u2192 BorderRadius?\nThe border radius of the containing rectangle. This is effective only if\nhighlightShape is BoxShape.rectangle.\nfinalinherited\ncanRequestFocus\n\u2192 bool\nIf true, this widget may request the primary focus.\nfinalinherited\nchild\n\u2192 Widget?\nThe widget below this widget in the tree.\nfinalinherited\ncontainedInkWell\n\u2192 bool\nWhether this ink response should be clipped its bounds.\nfinalinherited\ncustomBorder\n\u2192 ShapeBorder?\nThe custom clip border.\nfinalinherited\nenableFeedback\n\u2192 bool\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinalinherited\nexcludeFromSemantics\n\u2192 bool\nWhether to exclude the gestures introduced by this widget from the\nsemantics tree.\nfinalinherited\nfocusColor\n\u2192 Color?\nThe color of the ink response when the parent widget is focused. If this\nproperty is null then the focus color of the theme,\nThemeData.focusColor, will be used.\nfinalinherited\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhighlightColor\n\u2192 Color?\nThe highlight color of the ink response when pressed. If this property is\nnull then the highlight color of the theme, ThemeData.highlightColor,\nwill be used.\nfinalinherited\nhighlightShape\n\u2192 BoxShape\nThe shape (e.g., circle, rectangle) to use for the highlight drawn around\nthis part of the material when pressed, hovered over, or focused.\nfinalinherited\nhoverColor\n\u2192 Color?\nThe color of the ink response when a pointer is hovering over it. If this\nproperty is null then the hover color of the theme,\nThemeData.hoverColor, will be used.\nfinalinherited\nhoverDuration\n\u2192 Duration?\nThe duration of the animation that animates the hover effect.\nfinalinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nmouseCursor\n\u2192 MouseCursor?\nThe cursor for a mouse pointer when it enters or is hovering over the\nwidget.\nfinalinherited\nonDoubleTap\n\u2192 GestureTapCallback?\nCalled when the user double taps this part of the material.\nfinalinherited\nonFocusChange\n\u2192 ValueChanged<bool>?\nHandler called when the focus changes.\nfinalinherited\nonHighlightChanged\n\u2192 ValueChanged<bool>?\nCalled when this part of the material either becomes highlighted or stops\nbeing highlighted.\nfinalinherited\nonHover\n\u2192 ValueChanged<bool>?\nCalled when a pointer enters or exits the ink response area.\nfinalinherited\nonLongPress\n\u2192 GestureLongPressCallback?\nCalled when the user long-presses on this part of the material.\nfinalinherited\nonSecondaryTap\n\u2192 GestureTapCallback?\nCalled when the user taps this part of the material with a secondary button.\nfinalinherited\nonSecondaryTapCancel\n\u2192 GestureTapCallback?\nCalled when the user cancels a secondary button tap that was started on\nthis part of the material.\nfinalinherited\nonSecondaryTapDown\n\u2192 GestureTapDownCallback?\nCalled when the user taps down on this part of the material with a\nsecondary button.\nfinalinherited\nonSecondaryTapUp\n\u2192 GestureTapUpCallback?\nCalled when the user releases a secondary button tap that was started on\nthis part of the material. onSecondaryTap is called immediately after.\nfinalinherited\nonTap\n\u2192 GestureTapCallback?\nCalled when the user taps this part of the material.\nfinalinherited\nonTapCancel\n\u2192 GestureTapCallback?\nCalled when the user cancels a tap that was started on this part of the\nmaterial.\nfinalinherited\nonTapDown\n\u2192 GestureTapDownCallback?\nCalled when the user taps down this part of the material.\nfinalinherited\nonTapUp\n\u2192 GestureTapUpCallback?\nCalled when the user releases a tap that was started on this part of the\nmaterial. onTap is called immediately after.\nfinalinherited\noverlayColor\n\u2192 MaterialStateProperty<Color?>?\nDefines the ink response focus, hover, and splash colors.\nfinalinherited\nradius\n\u2192 double?\nThe radius of the ink splash.\nfinalinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsplashColor\n\u2192 Color?\nThe splash color of the ink response. If this property is null then the\nsplash color of the theme, ThemeData.splashColor, will be used.\nfinalinherited\nsplashFactory\n\u2192 InteractiveInkFeatureFactory?\nDefines the appearance of the splash.\nfinalinherited\nstatesController\n\u2192 MaterialStatesController?\nRepresents the interactive \"state\" of this widget in terms of\na set of MaterialStates, like MaterialState.pressed and\nMaterialState.focused.\nfinalinherited\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\ninherited\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugCheckContext(BuildContext context)\n\u2192 bool\nAsserts that the given context satisfies the prerequisites for\nthis class.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\ngetRectCallback(RenderBox referenceBox)\n\u2192 RectCallback?\nThe rectangle to use for the highlight effect and for clipping\nthe splash effects if containedInkWell is true.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nInkWell class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InkWell].\n\nvoid main() => runApp(const InkWellExampleApp());\n\nclass InkWellExampleApp extends StatelessWidget {\n  const InkWellExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InkWell Sample')),\n        body: const Center(\n          child: InkWellExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass InkWellExample extends StatefulWidget {\n  const InkWellExample({super.key});\n\n  @override\n  State<InkWellExample> createState() => _InkWellExampleState();\n}\n\nclass _InkWellExampleState extends State<InkWellExample> {\n  double sideLength = 50;\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedContainer(\n      height: sideLength,\n      width: sideLength,\n      duration: const Duration(seconds: 2),\n      curve: Curves.easeIn,\n      child: Material(\n        color: Colors.yellow,\n        child: InkWell(\n          onTap: () {\n            setState(() {\n              sideLength == 50 ? sideLength = 100 : sideLength = 50;\n            });\n          },\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputChip-class.html",
  "title": "InputChip class - material library - Dart API",
  "documentation_content": "InputChip class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputChip class\nInputChip\nbrightness_4\nbrightness_5\ndescription\nInputChip class\nA Material Design input chip.\nInput chips represent a complex piece of information, such as an entity\n(person, place, or thing) or conversational text, in a compact form.\nInput chips can be made selectable by setting onSelected, deletable by\nsetting onDeleted, and pressable like a button with onPressed. They have\na label, and they can have a leading icon (see avatar) and a trailing\nicon (deleteIcon). Colors and padding can be customized.\nRequires one of its ancestors to be a Material widget.\nInput chips work together with other UI elements. They can appear:\nIn a Wrap widget.\nIn a horizontally scrollable list, for example configured such as a\nListView with ListView.scrollDirection set to Axis.horizontal.\nThis example shows how to create InputChips with onSelected and\nonDeleted callbacks. When the user taps the chip, the chip will be selected.\nWhen the user taps the delete icon, the chip will be deleted.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputChip.1 mysample\nThe following example shows how to generate InputChips from\nuser text input. When the user enters a pizza topping in the text field,\nthe user is presented with a list of suggestions. When selecting one of the\nsuggestions, an InputChip is generated in the text field.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputChip.2 mysample\nMaterial Design 3\nInputChip can be used for Input chips from Material Design 3.\nIf ThemeData.useMaterial3 is true, then InputChip\nwill be styled to match the Material Design 3 specification for Input\nchips.\nSee also:\nChip, a chip that displays information and can be deleted.\nChoiceChip, allows a single selection from a set of options. Choice\nchips contain related descriptive text or categories.\nFilterChip, uses tags or descriptive words as a way to filter content.\nActionChip, represents an action related to primary content.\nCircleAvatar, which shows images or initials of people.\nWrap, A widget that displays its children in multiple horizontal or\nvertical runs.\nmaterial.io/design/components/chips.html\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nInputChip\nImplemented types\nChipAttributes\nDeletableChipAttributes\nSelectableChipAttributes\nCheckmarkableChipAttributes\nDisabledChipAttributes\nTappableChipAttributes\nConstructors\nInputChip({Key? key, Widget? avatar, required Widget label, TextStyle? labelStyle, EdgeInsetsGeometry? labelPadding, bool selected = false, bool isEnabled = true, ValueChanged<bool>? onSelected, Widget? deleteIcon, VoidCallback? onDeleted, Color? deleteIconColor, String? deleteButtonTooltipMessage, VoidCallback? onPressed, double? pressElevation, Color? disabledColor, Color? selectedColor, String? tooltip, BorderSide? side, OutlinedBorder? shape, Clip clipBehavior = Clip.none, FocusNode? focusNode, bool autofocus = false, MaterialStateProperty<Color?>? color, Color? backgroundColor, EdgeInsetsGeometry? padding, VisualDensity? visualDensity, MaterialTapTargetSize? materialTapTargetSize, double? elevation, Color? shadowColor, Color? surfaceTintColor, IconThemeData? iconTheme, Color? selectedShadowColor, bool? showCheckmark, Color? checkmarkColor, ShapeBorder avatarBorder = const CircleBorder()})\nCreates an InputChip.\nconst\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\navatar\n\u2192 Widget?\nA widget to display prior to the chip's label.\nfinal\navatarBorder\n\u2192 ShapeBorder\nThe shape of the translucent highlight painted over the avatar when the\nselected property is true.\nfinal\nbackgroundColor\n\u2192 Color?\nColor to be used for the unselected, enabled chip's background.\nfinal\ncheckmarkColor\n\u2192 Color?\nColor of the chip's check mark when a check mark is visible.\nfinal\nclipBehavior\n\u2192 Clip\nThe content will be clipped (or not) according to this option.\nfinal\ncolor\n\u2192 MaterialStateProperty<Color?>?\nThe color that fills the chip, in all MaterialStates.\nfinal\ndeleteButtonTooltipMessage\n\u2192 String?\nThe message to be used for the chip's delete button tooltip.\nfinal\ndeleteIcon\n\u2192 Widget?\nThe icon displayed when onDeleted is set.\nfinal\ndeleteIconColor\n\u2192 Color?\nUsed to define the delete icon's color with an IconTheme that\ncontains the icon.\nfinal\ndisabledColor\n\u2192 Color?\nThe color used for the chip's background to indicate that it is not\nenabled.\nfinal\nelevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\niconTheme\n\u2192 IconThemeData?\nTheme used for all icons in the chip.\nfinal\nisEnabled\n\u2192 bool\nWhether or not this chip is enabled for input.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nlabel\n\u2192 Widget\nThe primary content of the chip.\nfinal\nlabelPadding\n\u2192 EdgeInsetsGeometry?\nThe padding around the label widget.\nfinal\nlabelStyle\n\u2192 TextStyle?\nThe style to be applied to the chip's label.\nfinal\nmaterialTapTargetSize\n\u2192 MaterialTapTargetSize?\nConfigures the minimum size of the tap target.\nfinal\nonDeleted\n\u2192 VoidCallback?\nCalled when the user taps the deleteIcon to delete the chip.\nfinal\nonPressed\n\u2192 VoidCallback?\nCalled when the user taps the chip.\nfinal\nonSelected\n\u2192 ValueChanged<bool>?\nCalled when the chip should change between selected and de-selected\nstates.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe padding between the contents of the chip and the outside shape.\nfinal\npressElevation\n\u2192 double?\nElevation to be applied on the chip relative to its parent during the\npress motion.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselected\n\u2192 bool\nWhether or not this chip is selected.\nfinal\nselectedColor\n\u2192 Color?\nColor to be used for the chip's background, indicating that it is\nselected.\nfinal\nselectedShadowColor\n\u2192 Color?\nColor of the chip's shadow when the elevation is greater than 0 and the\nchip is selected.\nfinal\nshadowColor\n\u2192 Color?\nColor of the chip's shadow when the elevation is greater than 0.\nfinal\nshape\n\u2192 OutlinedBorder?\nThe OutlinedBorder to draw around the chip.\nfinal\nshowCheckmark\n\u2192 bool?\nWhether or not to show a check mark when\nSelectableChipAttributes.selected is true.\nfinal\nside\n\u2192 BorderSide?\nThe color and weight of the chip's outline.\nfinal\nsurfaceTintColor\n\u2192 Color?\nColor of the chip's surface tint overlay when its elevation is\ngreater than 0.\nfinal\ntooltip\n\u2192 String?\nTooltip string to be used for the body area (where the label and avatar\nare) of the chip.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the chip's layout will be.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nInputChip class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\nvoid main() => runApp(const ChipApp());\n\nclass ChipApp extends StatelessWidget {\n  const ChipApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          colorSchemeSeed: const Color(0xff6750a4), useMaterial3: true),\n      home: const InputChipExample(),\n    );\n  }\n}\n\nclass InputChipExample extends StatefulWidget {\n  const InputChipExample({super.key});\n\n  @override\n  State<InputChipExample> createState() => _InputChipExampleState();\n}\n\nclass _InputChipExampleState extends State<InputChipExample> {\n  int inputs = 3;\n  int? selectedIndex;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('InputChip Sample'),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Wrap(\n              alignment: WrapAlignment.center,\n              spacing: 5.0,\n              children: List<Widget>.generate(\n                inputs,\n                (int index) {\n                  return InputChip(\n                    label: Text('Person ${index + 1}'),\n                    selected: selectedIndex == index,\n                    onSelected: (bool selected) {\n                      setState(() {\n                        if (selectedIndex == index) {\n                          selectedIndex = null;\n                        } else {\n                          selectedIndex = index;\n                        }\n                      });\n                    },\n                    onDeleted: () {\n                      setState(() {\n                        inputs = inputs - 1;\n                      });\n                    },\n                  );\n                },\n              ).toList(),\n            ),\n            const SizedBox(height: 10),\n            ElevatedButton(\n              onPressed: () {\n                setState(() {\n                  inputs = 3;\n                });\n              },\n              child: const Text('Reset'),\n            )\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'dart:async';\n\nimport 'package:flutter/material.dart';\n\nconst List<String> _pizzaToppings = <String>[\n  'Olives',\n  'Tomato',\n  'Cheese',\n  'Pepperoni',\n  'Bacon',\n  'Onion',\n  'Jalapeno',\n  'Mushrooms',\n  'Pineapple',\n];\n\nvoid main() => runApp(const EditableChipFieldApp());\n\nclass EditableChipFieldApp extends StatelessWidget {\n  const EditableChipFieldApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const EditableChipFieldExample(),\n    );\n  }\n}\n\nclass EditableChipFieldExample extends StatefulWidget {\n  const EditableChipFieldExample({super.key});\n\n  @override\n  EditableChipFieldExampleState createState() {\n    return EditableChipFieldExampleState();\n  }\n}\n\nclass EditableChipFieldExampleState extends State<EditableChipFieldExample> {\n  final FocusNode _chipFocusNode = FocusNode();\n  List<String> _toppings = <String>[_pizzaToppings.first];\n  List<String> _suggestions = <String>[];\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Editable Chip Field Sample'),\n      ),\n      body: Column(\n        children: <Widget>[\n          Padding(\n            padding: const EdgeInsets.symmetric(horizontal: 16),\n            child: ChipsInput<String>(\n              values: _toppings,\n              decoration: const InputDecoration(\n                prefixIcon: Icon(Icons.local_pizza_rounded),\n                hintText: 'Search for toppings',\n              ),\n              strutStyle: const StrutStyle(fontSize: 15),\n              onChanged: _onChanged,\n              onSubmitted: _onSubmitted,\n              chipBuilder: _chipBuilder,\n              onTextChanged: _onSearchChanged,\n            ),\n          ),\n          if (_suggestions.isNotEmpty)\n            Expanded(\n              child: ListView.builder(\n                itemCount: _suggestions.length,\n                itemBuilder: (BuildContext context, int index) {\n                  return ToppingSuggestion(\n                    _suggestions[index],\n                    onTap: _selectSuggestion,\n                  );\n                },\n              ),\n            ),\n        ],\n      ),\n    );\n  }\n\n  Future<void> _onSearchChanged(String value) async {\n    final List<String> results = await _suggestionCallback(value);\n    setState(() {\n      _suggestions = results\n          .where((String topping) => !_toppings.contains(topping))\n          .toList();\n    });\n  }\n\n  Widget _chipBuilder(BuildContext context, String topping) {\n    return ToppingInputChip(\n      topping: topping,\n      onDeleted: _onChipDeleted,\n      onSelected: _onChipTapped,\n    );\n  }\n\n  void _selectSuggestion(String topping) {\n    setState(() {\n      _toppings.add(topping);\n      _suggestions = <String>[];\n    });\n  }\n\n  void _onChipTapped(String topping) {}\n\n  void _onChipDeleted(String topping) {\n    setState(() {\n      _toppings.remove(topping);\n      _suggestions = <String>[];\n    });\n  }\n\n  void _onSubmitted(String text) {\n    if (text.trim().isNotEmpty) {\n      setState(() {\n        _toppings = <String>[..._toppings, text.trim()];\n      });\n    } else {\n      _chipFocusNode.unfocus();\n      setState(() {\n        _toppings = <String>[];\n      });\n    }\n  }\n\n  void _onChanged(List<String> data) {\n    setState(() {\n      _toppings = data;\n    });\n  }\n\n  FutureOr<List<String>> _suggestionCallback(String text) {\n    if (text.isNotEmpty) {\n      return _pizzaToppings.where((String topping) {\n        return topping.toLowerCase().contains(text.toLowerCase());\n      }).toList();\n    }\n    return const <String>[];\n  }\n}\n\nclass ChipsInput<T> extends StatefulWidget {\n  const ChipsInput({\n    super.key,\n    required this.values,\n    this.decoration = const InputDecoration(),\n    this.style,\n    this.strutStyle,\n    required this.chipBuilder,\n    required this.onChanged,\n    this.onChipTapped,\n    this.onSubmitted,\n    this.onTextChanged,\n  });\n\n  final List<T> values;\n  final InputDecoration decoration;\n  final TextStyle? style;\n  final StrutStyle? strutStyle;\n\n  final ValueChanged<List<T>> onChanged;\n  final ValueChanged<T>? onChipTapped;\n  final ValueChanged<String>? onSubmitted;\n  final ValueChanged<String>? onTextChanged;\n\n  final Widget Function(BuildContext context, T data) chipBuilder;\n\n  @override\n  ChipsInputState<T> createState() => ChipsInputState<T>();\n}\n\nclass ChipsInputState<T> extends State<ChipsInput<T>> {\n  @visibleForTesting\n  late final ChipsInputEditingController<T> controller;\n\n  String _previousText = '';\n  TextSelection? _previousSelection;\n\n  @override\n  void initState() {\n    super.initState();\n\n    controller = ChipsInputEditingController<T>(\n      <T>[...widget.values],\n      widget.chipBuilder,\n    );\n    controller.addListener(_textListener);\n  }\n\n  @override\n  void dispose() {\n    controller.removeListener(_textListener);\n    controller.dispose();\n\n    super.dispose();\n  }\n\n  void _textListener() {\n    final String currentText = controller.text;\n\n    if (_previousSelection != null) {\n      final int currentNumber = countReplacements(currentText);\n      final int previousNumber = countReplacements(_previousText);\n\n      final int cursorEnd = _previousSelection!.extentOffset;\n      final int cursorStart = _previousSelection!.baseOffset;\n\n      final List<T> values = <T>[...widget.values];\n\n      // If the current number and the previous number of replacements are different, then\n      // the user has deleted the InputChip using the keyboard. In this case, we trigger\n      // the onChanged callback. We need to be sure also that the current number of\n      // replacements is different from the input chip to avoid double-deletion.\n      if (currentNumber < previousNumber && currentNumber != values.length) {\n        if (cursorStart == cursorEnd) {\n          values.removeRange(cursorStart - 1, cursorEnd);\n        } else {\n          if (cursorStart > cursorEnd) {\n            values.removeRange(cursorEnd, cursorStart);\n          } else {\n            values.removeRange(cursorStart, cursorEnd);\n          }\n        }\n        widget.onChanged(values);\n      }\n    }\n\n    _previousText = currentText;\n    _previousSelection = controller.selection;\n  }\n\n  static int countReplacements(String text) {\n    return text.codeUnits\n        .where(\n            (int u) => u == ChipsInputEditingController.kObjectReplacementChar)\n        .length;\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    controller.updateValues(<T>[...widget.values]);\n\n    return TextField(\n      minLines: 1,\n      maxLines: 3,\n      textInputAction: TextInputAction.done,\n      style: widget.style,\n      strutStyle: widget.strutStyle,\n      controller: controller,\n      onChanged: (String value) =>\n          widget.onTextChanged?.call(controller.textWithoutReplacements),\n      onSubmitted: (String value) =>\n          widget.onSubmitted?.call(controller.textWithoutReplacements),\n    );\n  }\n}\n\nclass ChipsInputEditingController<T> extends TextEditingController {\n  ChipsInputEditingController(this.values, this.chipBuilder)\n      : super(\n          text: String.fromCharCode(kObjectReplacementChar) * values.length,\n        );\n\n  // This constant character acts as a placeholder in the TextField text value.\n  // There will be one character for each of the InputChip displayed.\n  static const int kObjectReplacementChar = 0xFFFE;\n\n  List<T> values;\n\n  final Widget Function(BuildContext context, T data) chipBuilder;\n\n  /// Called whenever chip is either added or removed\n  /// from the outside the context of the text field.\n  void updateValues(List<T> values) {\n    if (values.length != this.values.length) {\n      final String char = String.fromCharCode(kObjectReplacementChar);\n      final int length = values.length;\n      value = TextEditingValue(\n        text: char * length,\n        selection: TextSelection.collapsed(offset: length),\n      );\n      this.values = values;\n    }\n  }\n\n  String get textWithoutReplacements {\n    final String char = String.fromCharCode(kObjectReplacementChar);\n    return text.replaceAll(RegExp(char), '');\n  }\n\n  String get textWithReplacements => text;\n\n  @override\n  TextSpan buildTextSpan(\n      {required BuildContext context,\n      TextStyle? style,\n      required bool withComposing}) {\n    final Iterable<WidgetSpan> chipWidgets =\n        values.map((T v) => WidgetSpan(child: chipBuilder(context, v)));\n\n    return TextSpan(\n      style: style,\n      children: <InlineSpan>[\n        ...chipWidgets,\n        if (textWithoutReplacements.isNotEmpty)\n          TextSpan(text: textWithoutReplacements)\n      ],\n    );\n  }\n}\n\nclass ToppingSuggestion extends StatelessWidget {\n  const ToppingSuggestion(this.topping, {super.key, this.onTap});\n\n  final String topping;\n  final ValueChanged<String>? onTap;\n\n  @override\n  Widget build(BuildContext context) {\n    return ListTile(\n      key: ObjectKey(topping),\n      leading: CircleAvatar(\n        child: Text(\n          topping[0].toUpperCase(),\n        ),\n      ),\n      title: Text(topping),\n      onTap: () => onTap?.call(topping),\n    );\n  }\n}\n\nclass ToppingInputChip extends StatelessWidget {\n  const ToppingInputChip({\n    super.key,\n    required this.topping,\n    required this.onDeleted,\n    required this.onSelected,\n  });\n\n  final String topping;\n  final ValueChanged<String> onDeleted;\n  final ValueChanged<String> onSelected;\n\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.only(right: 3),\n      child: InputChip(\n        key: ObjectKey(topping),\n        label: Text(topping),\n        avatar: CircleAvatar(\n          child: Text(topping[0].toUpperCase()),\n        ),\n        onDeleted: () => onDeleted(topping),\n        onSelected: (bool value) => onSelected(topping),\n        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,\n        padding: const EdgeInsets.all(2),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputChip/onDeleted.html",
  "title": "onDeleted property - InputChip class - material library - Dart API",
  "documentation_content": "onDeleted property - InputChip class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputChip\nonDeleted property\nonDeleted\nbrightness_4\nbrightness_5\ndescription\nonDeleted property\n@override\nVoidCallback?\nonDeleted\nfinal\nCalled when the user taps the deleteIcon to delete the chip.\nIf null, the delete button will not appear on the chip.\nThe chip will not automatically remove itself: this just tells the app\nthat the user tapped the delete button. In order to delete the chip, you\nhave to do something similar to the following sample:\nThis sample shows how to use onDeleted to remove an entry when the\ndelete button is tapped.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=chip.DeletableChipAttributes.onDeleted.1 mysample\nImplementation\n@override\nfinal VoidCallback? onDeleted;\nFlutter\nmaterial\nInputChip\nonDeleted property\nInputChip class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [DeletableChipAttributes.onDeleted].\n\nvoid main() => runApp(const OnDeletedExampleApp());\n\nclass OnDeletedExampleApp extends StatelessWidget {\n  const OnDeletedExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(\n            title: const Text('DeletableChipAttributes.onDeleted Sample')),\n        body: const Center(\n          child: OnDeletedExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass Actor {\n  const Actor(this.name, this.initials);\n  final String name;\n  final String initials;\n}\n\nclass CastList extends StatefulWidget {\n  const CastList({super.key});\n\n  @override\n  State createState() => CastListState();\n}\n\nclass CastListState extends State<CastList> {\n  final List<Actor> _cast = <Actor>[\n    const Actor('Aaron Burr', 'AB'),\n    const Actor('Alexander Hamilton', 'AH'),\n    const Actor('Eliza Hamilton', 'EH'),\n    const Actor('James Madison', 'JM'),\n  ];\n\n  Iterable<Widget> get actorWidgets {\n    return _cast.map((Actor actor) {\n      return Padding(\n        padding: const EdgeInsets.all(4.0),\n        child: Chip(\n          avatar: CircleAvatar(child: Text(actor.initials)),\n          label: Text(actor.name),\n          onDeleted: () {\n            setState(() {\n              _cast.removeWhere((Actor entry) {\n                return entry.name == actor.name;\n              });\n            });\n          },\n        ),\n      );\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Wrap(\n      children: actorWidgets.toList(),\n    );\n  }\n}\n\nclass OnDeletedExample extends StatefulWidget {\n  const OnDeletedExample({super.key});\n\n  @override\n  State<OnDeletedExample> createState() => _OnDeletedExampleState();\n}\n\nclass _OnDeletedExampleState extends State<OnDeletedExample> {\n  @override\n  Widget build(BuildContext context) {\n    return const CastList();\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration-class.html",
  "title": "InputDecoration class - material library - Dart API",
  "documentation_content": "InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration class\nInputDecoration\nbrightness_4\nbrightness_5\ndescription\nInputDecoration class\nThe border, labels, icons, and styles used to decorate a Material\nDesign text field.\nThe TextField and InputDecorator classes use InputDecoration objects\nto describe their decoration. (In fact, this class is merely the\nconfiguration of an InputDecorator, which does all the heavy lifting.)\nThis sample shows how to style a TextField using an InputDecorator. The\nTextField displays a \"send message\" icon to the left of the input area,\nwhich is surrounded by a border an all sides. It displays the hintText\ninside the input area to help the user understand what input is required. It\ndisplays the helperText and counterText below the input area.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.1 mysample\nThis sample shows how to style a \"collapsed\" TextField using an\nInputDecorator. The collapsed TextField surrounds the hint text and\ninput area with a border, but does not add padding around them.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.2 mysample\nThis sample shows how to create a TextField with hint text, a red border\non all sides, and an error message. To display a red border and error\nmessage, provide errorText to the InputDecoration constructor.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.3 mysample\nThis sample shows how to style a TextField with a round border and\nadditional text before and after the input area. It displays \"Prefix\" before\nthe input area, and \"Suffix\" after the input area.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.4 mysample\nThis sample shows how to style a TextField with a prefixIcon that changes color\nbased on the MaterialState. The color defaults to gray, be blue while focused\nand red if in an error state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.5 mysample\nThis sample shows how to style a TextField with a prefixIcon that changes color\nbased on the MaterialState through the use of ThemeData. The color defaults\nto gray, be blue while focused and red if in an error state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.6 mysample\nSee also:\nTextField, which is a text input widget that uses an\nInputDecoration.\nInputDecorator, which is a widget that draws an InputDecoration\naround an input child widget.\nDecoration and DecoratedBox, for drawing borders and backgrounds\naround a child widget.\nAnnotations\n@immutable\nConstructors\nInputDecoration({Widget? icon, Color? iconColor, Widget? label, String? labelText, TextStyle? labelStyle, TextStyle? floatingLabelStyle, String? helperText, TextStyle? helperStyle, int? helperMaxLines, String? hintText, TextStyle? hintStyle, TextDirection? hintTextDirection, int? hintMaxLines, Duration? hintFadeDuration, Widget? error, String? errorText, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, bool? isCollapsed, bool? isDense, EdgeInsetsGeometry? contentPadding, Widget? prefixIcon, BoxConstraints? prefixIconConstraints, Widget? prefix, String? prefixText, TextStyle? prefixStyle, Color? prefixIconColor, Widget? suffixIcon, Widget? suffix, String? suffixText, TextStyle? suffixStyle, Color? suffixIconColor, BoxConstraints? suffixIconConstraints, Widget? counter, String? counterText, TextStyle? counterStyle, bool? filled, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool enabled = true, String? semanticCounterText, bool? alignLabelWithHint, BoxConstraints? constraints})\nCreates a bundle of the border, labels, icons, and styles used to\ndecorate a Material Design text field.\nconst\nInputDecoration.collapsed({required String? hintText, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, TextStyle? hintStyle, TextDirection? hintTextDirection, bool? filled = false, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? border = InputBorder.none, bool enabled = true})\nDefines an InputDecorator that is the same size as the input field.\nconst\nProperties\nalignLabelWithHint\n\u2192 bool?\nTypically set to true when the InputDecorator contains a multiline\nTextField (TextField.maxLines is null or > 1) to override the default\nbehavior of aligning the label with the center of the TextField.\nfinal\nborder\n\u2192 InputBorder?\nThe shape of the border to draw around the decoration's container.\nfinal\nconstraints\n\u2192 BoxConstraints?\nDefines minimum and maximum sizes for the InputDecorator.\nfinal\ncontentPadding\n\u2192 EdgeInsetsGeometry?\nThe padding for the input decoration's container.\nfinal\ncounter\n\u2192 Widget?\nOptional custom counter widget to go in the place otherwise occupied by\ncounterText. If this property is non null, then counterText is\nignored.\nfinal\ncounterStyle\n\u2192 TextStyle?\nThe style to use for the counterText.\nfinal\ncounterText\n\u2192 String?\nOptional text to place below the line as a character count.\nfinal\ndisabledBorder\n\u2192 InputBorder?\nThe border to display when the InputDecorator is disabled and is not\nshowing an error.\nfinal\nenabled\n\u2192 bool\nIf false helperText,errorText, and counterText are not displayed,\nand the opacity of the remaining visual elements is reduced.\nfinal\nenabledBorder\n\u2192 InputBorder?\nThe border to display when the InputDecorator is enabled and is not\nshowing an error.\nfinal\nerror\n\u2192 Widget?\nOptional widget that appears below the InputDecorator.child and the border.\nfinal\nerrorBorder\n\u2192 InputBorder?\nThe border to display when the InputDecorator does not have the focus and\nis showing an error.\nfinal\nerrorMaxLines\n\u2192 int?\nThe maximum number of lines the errorText can occupy.\nfinal\nerrorStyle\n\u2192 TextStyle?\nThe style to use for the InputDecoration.errorText.\nfinal\nerrorText\n\u2192 String?\nText that appears below the InputDecorator.child and the border.\nfinal\nfillColor\n\u2192 Color?\nThe base fill color of the decoration's container color.\nfinal\nfilled\n\u2192 bool?\nIf true the decoration's container is filled with fillColor.\nfinal\nfloatingLabelAlignment\n\u2192 FloatingLabelAlignment?\nDefines where the floating label should be displayed.\nfinal\nfloatingLabelBehavior\n\u2192 FloatingLabelBehavior?\nDefines how the floating label should behave.\nfinal\nfloatingLabelStyle\n\u2192 TextStyle?\nThe style to use for InputDecoration.labelText when the label is\nabove (i.e., vertically adjacent to) the input field.\nfinal\nfocusColor\n\u2192 Color?\nThe fill color of the decoration's container when it has the input focus.\nfinal\nfocusedBorder\n\u2192 InputBorder?\nThe border to display when the InputDecorator has the focus and is not\nshowing an error.\nfinal\nfocusedErrorBorder\n\u2192 InputBorder?\nThe border to display when the InputDecorator has the focus and is\nshowing an error.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyoverride\nhelperMaxLines\n\u2192 int?\nThe maximum number of lines the helperText can occupy.\nfinal\nhelperStyle\n\u2192 TextStyle?\nThe style to use for the helperText.\nfinal\nhelperText\n\u2192 String?\nText that provides context about the InputDecorator.child's value, such\nas how the value will be used.\nfinal\nhintFadeDuration\n\u2192 Duration?\nThe duration of the hintText fade in and fade out animations.\nfinal\nhintMaxLines\n\u2192 int?\nThe maximum number of lines the hintText can occupy.\nfinal\nhintStyle\n\u2192 TextStyle?\nThe style to use for the hintText.\nfinal\nhintText\n\u2192 String?\nText that suggests what sort of input the field accepts.\nfinal\nhintTextDirection\n\u2192 TextDirection?\nThe direction to use for the hintText.\nfinal\nhoverColor\n\u2192 Color?\nThe color of the highlight for the decoration shown if the container\nis being hovered over by a mouse.\nfinal\nicon\n\u2192 Widget?\nAn icon to show before the input field and outside of the decoration's\ncontainer.\nfinal\niconColor\n\u2192 Color?\nThe color of the icon.\nfinal\nisCollapsed\n\u2192 bool?\nWhether the decoration is the same size as the input field.\nfinal\nisDense\n\u2192 bool?\nWhether the InputDecorator.child is part of a dense form (i.e., uses less vertical\nspace).\nfinal\nlabel\n\u2192 Widget?\nOptional widget that describes the input field.\nfinal\nlabelStyle\n\u2192 TextStyle?\nThe style to use for InputDecoration.labelText when the label is on top\nof the input field.\nfinal\nlabelText\n\u2192 String?\nOptional text that describes the input field.\nfinal\nprefix\n\u2192 Widget?\nOptional widget to place on the line before the input.\nfinal\nprefixIcon\n\u2192 Widget?\nAn icon that appears before the prefix or prefixText and before\nthe editable part of the text field, within the decoration's container.\nfinal\nprefixIconColor\n\u2192 Color?\nOptional color of the prefixIcon\nfinal\nprefixIconConstraints\n\u2192 BoxConstraints?\nThe constraints for the prefix icon.\nfinal\nprefixStyle\n\u2192 TextStyle?\nThe style to use for the prefixText.\nfinal\nprefixText\n\u2192 String?\nOptional text prefix to place on the line before the input.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsemanticCounterText\n\u2192 String?\nA semantic label for the counterText.\nfinal\nsuffix\n\u2192 Widget?\nOptional widget to place on the line after the input.\nfinal\nsuffixIcon\n\u2192 Widget?\nAn icon that appears after the editable part of the text field and\nafter the suffix or suffixText, within the decoration's container.\nfinal\nsuffixIconColor\n\u2192 Color?\nOptional color of the suffixIcon.\nfinal\nsuffixIconConstraints\n\u2192 BoxConstraints?\nThe constraints for the suffix icon.\nfinal\nsuffixStyle\n\u2192 TextStyle?\nThe style to use for the suffixText.\nfinal\nsuffixText\n\u2192 String?\nOptional text suffix to place on the line after the input.\nfinal\nMethods\napplyDefaults(InputDecorationTheme theme)\n\u2192 InputDecoration\nUsed by widgets like TextField and InputDecorator to create a new\nInputDecoration with default values taken from the theme.\ncopyWith({Widget? icon, Color? iconColor, Widget? label, String? labelText, TextStyle? labelStyle, TextStyle? floatingLabelStyle, String? helperText, TextStyle? helperStyle, int? helperMaxLines, String? hintText, TextStyle? hintStyle, TextDirection? hintTextDirection, Duration? hintFadeDuration, int? hintMaxLines, Widget? error, String? errorText, TextStyle? errorStyle, int? errorMaxLines, FloatingLabelBehavior? floatingLabelBehavior, FloatingLabelAlignment? floatingLabelAlignment, bool? isCollapsed, bool? isDense, EdgeInsetsGeometry? contentPadding, Widget? prefixIcon, Widget? prefix, String? prefixText, BoxConstraints? prefixIconConstraints, TextStyle? prefixStyle, Color? prefixIconColor, Widget? suffixIcon, Widget? suffix, String? suffixText, TextStyle? suffixStyle, Color? suffixIconColor, BoxConstraints? suffixIconConstraints, Widget? counter, String? counterText, TextStyle? counterStyle, bool? filled, Color? fillColor, Color? focusColor, Color? hoverColor, InputBorder? errorBorder, InputBorder? focusedBorder, InputBorder? focusedErrorBorder, InputBorder? disabledBorder, InputBorder? enabledBorder, InputBorder? border, bool? enabled, String? semanticCounterText, bool? alignLabelWithHint, BoxConstraints? constraints})\n\u2192 InputDecoration\nCreates a copy of this input decoration with the given fields replaced\nby the new values.\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoString()\n\u2192 String\nA string representation of this object.\noverride\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\noverride\nFlutter\nmaterial\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration].\n\nvoid main() => runApp(const InputDecorationExampleApp());\n\nclass InputDecorationExampleApp extends StatelessWidget {\n  const InputDecorationExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const InputDecorationExample(),\n      ),\n    );\n  }\n}\n\nclass InputDecorationExample extends StatelessWidget {\n  const InputDecorationExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextFormField(\n      initialValue: 'abc',\n      decoration: const InputDecoration(\n        prefix: Text('Prefix'),\n        suffix: Text('Suffix'),\n        border: OutlineInputBorder(),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration].\n\nvoid main() => runApp(const MaterialStateExampleApp());\n\nclass MaterialStateExampleApp extends StatelessWidget {\n  const MaterialStateExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const MaterialStateExample(),\n      ),\n    );\n  }\n}\n\nclass MaterialStateExample extends StatelessWidget {\n  const MaterialStateExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextFormField(\n      initialValue: 'abc',\n      decoration: InputDecoration(\n        prefixIcon: const Icon(Icons.person),\n        prefixIconColor:\n            MaterialStateColor.resolveWith((Set<MaterialState> states) {\n          if (states.contains(MaterialState.focused)) {\n            return Colors.green;\n          }\n          if (states.contains(MaterialState.error)) {\n            return Colors.red;\n          }\n          return Colors.grey;\n        }),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration].\n\nvoid main() => runApp(const InputDecorationExampleApp());\n\nclass InputDecorationExampleApp extends StatelessWidget {\n  const InputDecorationExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const InputDecorationExample(),\n      ),\n    );\n  }\n}\n\nclass InputDecorationExample extends StatelessWidget {\n  const InputDecorationExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const TextField(\n      decoration: InputDecoration(\n        hintText: 'Hint Text',\n        errorText: 'Error Text',\n        border: OutlineInputBorder(),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration].\n\nvoid main() => runApp(const MaterialStateExampleApp());\n\nclass MaterialStateExampleApp extends StatelessWidget {\n  const MaterialStateExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const MaterialStateExample(),\n      ),\n    );\n  }\n}\n\nclass MaterialStateExample extends StatelessWidget {\n  const MaterialStateExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    final ThemeData themeData = Theme.of(context);\n    return Theme(\n      data: themeData.copyWith(\n        inputDecorationTheme: themeData.inputDecorationTheme.copyWith(\n          prefixIconColor: MaterialStateColor.resolveWith(\n            (Set<MaterialState> states) {\n              if (states.contains(MaterialState.focused)) {\n                return Colors.green;\n              }\n              if (states.contains(MaterialState.error)) {\n                return Colors.red;\n              }\n              return Colors.grey;\n            },\n          ),\n        ),\n      ),\n      child: TextFormField(\n        initialValue: 'abc',\n        decoration: const InputDecoration(\n          prefixIcon: Icon(Icons.person),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration].\n\nvoid main() => runApp(const InputDecorationExampleApp());\n\nclass InputDecorationExampleApp extends StatelessWidget {\n  const InputDecorationExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const InputDecorationExample(),\n      ),\n    );\n  }\n}\n\nclass InputDecorationExample extends StatelessWidget {\n  const InputDecorationExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const TextField(\n      decoration: InputDecoration.collapsed(\n        hintText: 'Hint Text',\n        border: OutlineInputBorder(),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration].\n\nvoid main() => runApp(const InputDecorationExampleApp());\n\nclass InputDecorationExampleApp extends StatelessWidget {\n  const InputDecorationExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const InputDecorationExample(),\n      ),\n    );\n  }\n}\n\nclass InputDecorationExample extends StatelessWidget {\n  const InputDecorationExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const TextField(\n      decoration: InputDecoration(\n        icon: Icon(Icons.send),\n        hintText: 'Hint Text',\n        helperText: 'Helper Text',\n        counterText: '0 characters',\n        border: OutlineInputBorder(),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration/floatingLabelStyle.html",
  "title": "floatingLabelStyle property - InputDecoration class - material library - Dart API",
  "documentation_content": "floatingLabelStyle property - InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration\nfloatingLabelStyle property\nfloatingLabelStyle\nbrightness_4\nbrightness_5\ndescription\nfloatingLabelStyle property\nTextStyle?\nfloatingLabelStyle\nfinal\nThe style to use for InputDecoration.labelText when the label is\nabove (i.e., vertically adjacent to) the input field.\nWhen the InputDecoration.labelText is on top of the input field, the\ntext uses the labelStyle instead.\nIf floatingLabelStyle is a MaterialStateTextStyle, then the effective\ntext style can depend on the MaterialState.focused state, i.e.\nif the TextField is focused or not.\nIf null, defaults to labelStyle.\nSpecifying this style will override the default behavior\nof InputDecoration that changes the color of the label to the\nInputDecoration.errorStyle color or ColorScheme.error.\nIt's possible to override the label style for just the error state, or\njust the default state, or both.\nIn this example the floatingLabelStyle is specified with a\nMaterialStateProperty which resolves to a text style whose color depends\non the decorator's error state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.floatingLabelStyle.1 mysample\nImplementation\nfinal TextStyle? floatingLabelStyle;\nFlutter\nmaterial\nInputDecoration\nfloatingLabelStyle property\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecorator].\n\nvoid main() => runApp(const FloatingLabelStyleErrorExampleApp());\n\nclass FloatingLabelStyleErrorExampleApp extends StatelessWidget {\n  const FloatingLabelStyleErrorExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecorator Sample')),\n        body: const Center(\n          child: InputDecoratorExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass InputDecoratorExample extends StatelessWidget {\n  const InputDecoratorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextFormField(\n      decoration: InputDecoration(\n        border: const OutlineInputBorder(),\n        labelText: 'Name',\n        // The MaterialStateProperty's value is a text style that is orange\n        // by default, but the theme's error color if the input decorator\n        // is in its error state.\n        floatingLabelStyle: MaterialStateTextStyle.resolveWith(\n          (Set<MaterialState> states) {\n            final Color color = states.contains(MaterialState.error)\n                ? Theme.of(context).colorScheme.error\n                : Colors.orange;\n            return TextStyle(color: color, letterSpacing: 1.3);\n          },\n        ),\n      ),\n      validator: (String? value) {\n        if (value == null || value == '') {\n          return 'Enter name';\n        }\n        return null;\n      },\n      autovalidateMode: AutovalidateMode.always,\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration/label.html",
  "title": "label property - InputDecoration class - material library - Dart API",
  "documentation_content": "label property - InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration\nlabel property\nlabel\nbrightness_4\nbrightness_5\ndescription\nlabel property\nWidget?\nlabel\nfinal\nOptional widget that describes the input field.\nWhen the input field is empty and unfocused, the label is displayed on\ntop of the input field (i.e., at the same location on the screen where\ntext may be entered in the input field). When the input field receives\nfocus (or if the field is non-empty), depending on floatingLabelAlignment,\nthe label moves above, either vertically adjacent to, or to the center of\nthe input field.\nThis can be used, for example, to add multiple TextStyle's to a label that would\notherwise be specified using labelText, which only takes one TextStyle.\nThis example shows a TextField with a Text.rich widget as the label.\nThe widget contains multiple Text widgets with different TextStyle's.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.label.1 mysample\nOnly one of label and labelText can be specified.\nImplementation\nfinal Widget? label;\nFlutter\nmaterial\nInputDecoration\nlabel property\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration.label].\n\nvoid main() => runApp(const LabelExampleApp());\n\nclass LabelExampleApp extends StatelessWidget {\n  const LabelExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration.label Sample')),\n        body: const LabelExample(),\n      ),\n    );\n  }\n}\n\nclass LabelExample extends StatelessWidget {\n  const LabelExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Center(\n      child: TextField(\n        decoration: InputDecoration(\n          label: Text.rich(\n            TextSpan(\n              children: <InlineSpan>[\n                WidgetSpan(\n                  child: Text(\n                    'Username',\n                  ),\n                ),\n                WidgetSpan(\n                  child: Text(\n                    '*',\n                    style: TextStyle(color: Colors.red),\n                  ),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration/labelStyle.html",
  "title": "labelStyle property - InputDecoration class - material library - Dart API",
  "documentation_content": "labelStyle property - InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration\nlabelStyle property\nlabelStyle\nbrightness_4\nbrightness_5\ndescription\nlabelStyle property\nTextStyle?\nlabelStyle\nfinal\nThe style to use for InputDecoration.labelText when the label is on top\nof the input field.\nIf labelStyle is a MaterialStateTextStyle, then the effective\ntext style can depend on the MaterialState.focused state, i.e.\nif the TextField is focused or not.\nWhen the InputDecoration.labelText is above (i.e., vertically adjacent to)\nthe input field, the text uses the floatingLabelStyle instead.\nIf null, defaults to a value derived from the base TextStyle for the\ninput field and the current Theme.\nSpecifying this style will override the default behavior\nof InputDecoration that changes the color of the label to the\nInputDecoration.errorStyle color or ColorScheme.error.\nIt's possible to override the label style for just the error state, or\njust the default state, or both.\nIn this example the labelStyle is specified with a MaterialStateProperty\nwhich resolves to a text style whose color depends on the decorator's\nerror state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.labelStyle.1 mysample\nImplementation\nfinal TextStyle? labelStyle;\nFlutter\nmaterial\nInputDecoration\nlabelStyle property\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecorator].\n\nvoid main() => runApp(const LabelStyleErrorExampleApp());\n\nclass LabelStyleErrorExampleApp extends StatelessWidget {\n  const LabelStyleErrorExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecorator Sample')),\n        body: const Center(\n          child: InputDecoratorExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass InputDecoratorExample extends StatelessWidget {\n  const InputDecoratorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextFormField(\n      decoration: InputDecoration(\n        border: const OutlineInputBorder(),\n        labelText: 'Name',\n        // The MaterialStateProperty's value is a text style that is orange\n        // by default, but the theme's error color if the input decorator\n        // is in its error state.\n        labelStyle: MaterialStateTextStyle.resolveWith(\n          (Set<MaterialState> states) {\n            final Color color = states.contains(MaterialState.error)\n                ? Theme.of(context).colorScheme.error\n                : Colors.orange;\n            return TextStyle(color: color, letterSpacing: 1.3);\n          },\n        ),\n      ),\n      validator: (String? value) {\n        if (value == null || value == '') {\n          return 'Enter name';\n        }\n        return null;\n      },\n      autovalidateMode: AutovalidateMode.always,\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration/prefixIcon.html",
  "title": "prefixIcon property - InputDecoration class - material library - Dart API",
  "documentation_content": "prefixIcon property - InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration\nprefixIcon property\nprefixIcon\nbrightness_4\nbrightness_5\ndescription\nprefixIcon property\nWidget?\nprefixIcon\nfinal\nAn icon that appears before the prefix or prefixText and before\nthe editable part of the text field, within the decoration's container.\nThe size and color of the prefix icon is configured automatically using an\nIconTheme and therefore does not need to be explicitly given in the\nicon widget.\nThe prefix icon is constrained with a minimum size of 48px by 48px, but\ncan be expanded beyond that. Anything larger than 24px will require\nadditional padding to ensure it matches the Material Design spec of 12px\npadding between the left edge of the input and leading edge of the prefix\nicon. The following snippet shows how to pad the leading edge of the\nprefix icon:\nprefixIcon: Padding(\npadding: const EdgeInsetsDirectional.only(start: 12.0),\nchild: _myIcon, // _myIcon is a 48px-wide widget.\n)\nThe decoration's container is the area which is filled if filled is true\nand bordered per the border. It's the area adjacent to icon and above\nthe widgets that contain helperText, errorText, and counterText.\nThe prefix icon alignment can be changed using Align with a fixed widthFactor and\nheightFactor.\nThis example shows how the prefix icon alignment can be changed using Align with\na fixed widthFactor and heightFactor.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.prefixIcon.1 mysample\nSee also:\nIcon and ImageIcon, which are typically used to show icons.\nprefix and prefixText, which are other ways to show content\nbefore the text field (but after the icon).\nsuffixIcon, which is the same but on the trailing edge.\nAlign A widget that aligns its child within itself and optionally\nsizes itself based on the child's size.\nImplementation\nfinal Widget? prefixIcon;\nFlutter\nmaterial\nInputDecoration\nprefixIcon property\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecorator].\n\nvoid main() => runApp(const PrefixIconExampleApp());\n\nclass PrefixIconExampleApp extends StatelessWidget {\n  const PrefixIconExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const Scaffold(body: InputDecoratorExample()),\n    );\n  }\n}\n\nclass InputDecoratorExample extends StatelessWidget {\n  const InputDecoratorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const TextField(\n      decoration: InputDecoration(\n        border: OutlineInputBorder(),\n        labelText: 'Enter name',\n        prefixIcon: Align(\n          widthFactor: 1.0,\n          heightFactor: 1.0,\n          child: Icon(\n            Icons.person,\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration/prefixIconConstraints.html",
  "title": "prefixIconConstraints property - InputDecoration class - material library - Dart API",
  "documentation_content": "prefixIconConstraints property - InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration\nprefixIconConstraints property\nprefixIconConstraints\nbrightness_4\nbrightness_5\ndescription\nprefixIconConstraints property\nBoxConstraints?\nprefixIconConstraints\nfinal\nThe constraints for the prefix icon.\nThis can be used to modify the BoxConstraints surrounding prefixIcon.\nThis property is particularly useful for getting the decoration's height\nless than 48px. This can be achieved by setting isDense to true and\nsetting the constraints' minimum height and width to a value lower than\n48px.\nThis example shows the differences between two TextField widgets when\nprefixIconConstraints is set to the default value and when one is not.\nThe isDense property must be set to true to be able to\nset the constraints smaller than 48px.\nIf null, BoxConstraints with a minimum width and height of 48px is\nused.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.prefixIconConstraints.1 mysample\nImplementation\nfinal BoxConstraints? prefixIconConstraints;\nFlutter\nmaterial\nInputDecoration\nprefixIconConstraints property\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration.prefixIconConstraints].\n\nvoid main() => runApp(const PrefixIconConstraintsExampleApp());\n\nclass PrefixIconConstraintsExampleApp extends StatelessWidget {\n  const PrefixIconConstraintsExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const PrefixIconConstraintsExample(),\n      ),\n    );\n  }\n}\n\nclass PrefixIconConstraintsExample extends StatelessWidget {\n  const PrefixIconConstraintsExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Padding(\n      padding: EdgeInsets.symmetric(horizontal: 8.0),\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          TextField(\n            decoration: InputDecoration(\n              hintText: 'Normal Icon Constraints',\n              prefixIcon: Icon(Icons.search),\n            ),\n          ),\n          SizedBox(height: 10),\n          TextField(\n            decoration: InputDecoration(\n              isDense: true,\n              hintText: 'Smaller Icon Constraints',\n              prefixIcon: Icon(Icons.search),\n              prefixIconConstraints: BoxConstraints(\n                minHeight: 32,\n                minWidth: 32,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration/suffixIcon.html",
  "title": "suffixIcon property - InputDecoration class - material library - Dart API",
  "documentation_content": "suffixIcon property - InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration\nsuffixIcon property\nsuffixIcon\nbrightness_4\nbrightness_5\ndescription\nsuffixIcon property\nWidget?\nsuffixIcon\nfinal\nAn icon that appears after the editable part of the text field and\nafter the suffix or suffixText, within the decoration's container.\nThe size and color of the suffix icon is configured automatically using an\nIconTheme and therefore does not need to be explicitly given in the\nicon widget.\nThe suffix icon is constrained with a minimum size of 48px by 48px, but\ncan be expanded beyond that. Anything larger than 24px will require\nadditional padding to ensure it matches the Material Design spec of 12px\npadding between the right edge of the input and trailing edge of the\nprefix icon. The following snippet shows how to pad the trailing edge of\nthe suffix icon:\nsuffixIcon: Padding(\npadding: const EdgeInsetsDirectional.only(end: 12.0),\nchild: _myIcon, // myIcon is a 48px-wide widget.\n)\nThe decoration's container is the area which is filled if filled is\ntrue and bordered per the border. It's the area adjacent to\nicon and above the widgets that contain helperText,\nerrorText, and counterText.\nThe suffix icon alignment can be changed using Align with a fixed widthFactor and\nheightFactor.\nThis example shows how the suffix icon alignment can be changed using Align with\na fixed widthFactor and heightFactor.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.suffixIcon.1 mysample\nSee also:\nIcon and ImageIcon, which are typically used to show icons.\nsuffix and suffixText, which are other ways to show content\nafter the text field (but before the icon).\nprefixIcon, which is the same but on the leading edge.\nAlign A widget that aligns its child within itself and optionally\nsizes itself based on the child's size.\nImplementation\nfinal Widget? suffixIcon;\nFlutter\nmaterial\nInputDecoration\nsuffixIcon property\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecorator].\n\nvoid main() => runApp(const SuffixIconExampleApp());\n\nclass SuffixIconExampleApp extends StatelessWidget {\n  const SuffixIconExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const Scaffold(body: InputDecoratorExample()),\n    );\n  }\n}\n\nclass InputDecoratorExample extends StatelessWidget {\n  const InputDecoratorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const TextField(\n      decoration: InputDecoration(\n        border: OutlineInputBorder(),\n        labelText: 'Enter password',\n        suffixIcon: Align(\n          widthFactor: 1.0,\n          heightFactor: 1.0,\n          child: Icon(\n            Icons.remove_red_eye,\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecoration/suffixIconConstraints.html",
  "title": "suffixIconConstraints property - InputDecoration class - material library - Dart API",
  "documentation_content": "suffixIconConstraints property - InputDecoration class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecoration\nsuffixIconConstraints property\nsuffixIconConstraints\nbrightness_4\nbrightness_5\ndescription\nsuffixIconConstraints property\nBoxConstraints?\nsuffixIconConstraints\nfinal\nThe constraints for the suffix icon.\nThis can be used to modify the BoxConstraints surrounding suffixIcon.\nThis property is particularly useful for getting the decoration's height\nless than 48px. This can be achieved by setting isDense to true and\nsetting the constraints' minimum height and width to a value lower than\n48px.\nIf null, a BoxConstraints with a minimum width and height of 48px is\nused.\nThis example shows the differences between two TextField widgets when\nsuffixIconConstraints is set to the default value and when one is not.\nThe isDense property must be set to true to be able to\nset the constraints smaller than 48px.\nIf null, BoxConstraints with a minimum width and height of 48px is\nused.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.suffixIconConstraints.1 mysample\nImplementation\nfinal BoxConstraints? suffixIconConstraints;\nFlutter\nmaterial\nInputDecoration\nsuffixIconConstraints property\nInputDecoration class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecoration.suffixIconConstraints].\n\nvoid main() => runApp(const SuffixIconConstraintsExampleApp());\n\nclass SuffixIconConstraintsExampleApp extends StatelessWidget {\n  const SuffixIconConstraintsExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecoration Sample')),\n        body: const SuffixIconConstraintsExample(),\n      ),\n    );\n  }\n}\n\nclass SuffixIconConstraintsExample extends StatelessWidget {\n  const SuffixIconConstraintsExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const Padding(\n      padding: EdgeInsets.symmetric(horizontal: 8.0),\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: <Widget>[\n          TextField(\n            decoration: InputDecoration(\n              hintText: 'Normal Icon Constraints',\n              suffixIcon: Icon(Icons.search),\n            ),\n          ),\n          SizedBox(height: 10),\n          TextField(\n            decoration: InputDecoration(\n              isDense: true,\n              hintText: 'Smaller Icon Constraints',\n              suffixIcon: Icon(Icons.search),\n              suffixIconConstraints: BoxConstraints(\n                minHeight: 32,\n                minWidth: 32,\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecorationTheme/floatingLabelStyle.html",
  "title": "floatingLabelStyle property - InputDecorationTheme class - material library - Dart API",
  "documentation_content": "floatingLabelStyle property - InputDecorationTheme class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecorationTheme\nfloatingLabelStyle property\nfloatingLabelStyle\nbrightness_4\nbrightness_5\ndescription\nfloatingLabelStyle property\nTextStyle?\nfloatingLabelStyle\nfinal\nThe style to use for InputDecoration.labelText when the label is\nabove (i.e., vertically adjacent to) the input field.\nWhen the InputDecoration.labelText is on top of the input field, the\ntext uses the labelStyle instead.\nIf floatingLabelStyle is a MaterialStateTextStyle, then the effective\ntext style can depend on the MaterialState.focused state, i.e.\nif the TextField is focused or not.\nIf null, defaults to labelStyle.\nSpecifying this style will override the default behavior\nof InputDecoration that changes the color of the label to the\nInputDecoration.errorStyle color or ColorScheme.error.\nIt's possible to override the label style for just the error state, or\njust the default state, or both.\nIn this example the floatingLabelStyle is specified with a\nMaterialStateProperty which resolves to a text style whose color depends\non the decorator's error state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.floatingLabelStyle.1 mysample\nImplementation\nfinal TextStyle? floatingLabelStyle;\nFlutter\nmaterial\nInputDecorationTheme\nfloatingLabelStyle property\nInputDecorationTheme class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecorator].\n\nvoid main() => runApp(const FloatingLabelStyleErrorExampleApp());\n\nclass FloatingLabelStyleErrorExampleApp extends StatelessWidget {\n  const FloatingLabelStyleErrorExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecorator Sample')),\n        body: const Center(\n          child: InputDecoratorExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass InputDecoratorExample extends StatelessWidget {\n  const InputDecoratorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextFormField(\n      decoration: InputDecoration(\n        border: const OutlineInputBorder(),\n        labelText: 'Name',\n        // The MaterialStateProperty's value is a text style that is orange\n        // by default, but the theme's error color if the input decorator\n        // is in its error state.\n        floatingLabelStyle: MaterialStateTextStyle.resolveWith(\n          (Set<MaterialState> states) {\n            final Color color = states.contains(MaterialState.error)\n                ? Theme.of(context).colorScheme.error\n                : Colors.orange;\n            return TextStyle(color: color, letterSpacing: 1.3);\n          },\n        ),\n      ),\n      validator: (String? value) {\n        if (value == null || value == '') {\n          return 'Enter name';\n        }\n        return null;\n      },\n      autovalidateMode: AutovalidateMode.always,\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/InputDecorationTheme/labelStyle.html",
  "title": "labelStyle property - InputDecorationTheme class - material library - Dart API",
  "documentation_content": "labelStyle property - InputDecorationTheme class - material library - Dart API\nmenu\nFlutter\nmaterial\nInputDecorationTheme\nlabelStyle property\nlabelStyle\nbrightness_4\nbrightness_5\ndescription\nlabelStyle property\nTextStyle?\nlabelStyle\nfinal\nThe style to use for InputDecoration.labelText when the label is on top\nof the input field.\nIf labelStyle is a MaterialStateTextStyle, then the effective\ntext style can depend on the MaterialState.focused state, i.e.\nif the TextField is focused or not.\nWhen the InputDecoration.labelText is above (i.e., vertically adjacent to)\nthe input field, the text uses the floatingLabelStyle instead.\nIf null, defaults to a value derived from the base TextStyle for the\ninput field and the current Theme.\nSpecifying this style will override the default behavior\nof InputDecoration that changes the color of the label to the\nInputDecoration.errorStyle color or ColorScheme.error.\nIt's possible to override the label style for just the error state, or\njust the default state, or both.\nIn this example the labelStyle is specified with a MaterialStateProperty\nwhich resolves to a text style whose color depends on the decorator's\nerror state.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.InputDecoration.labelStyle.1 mysample\nImplementation\nfinal TextStyle? labelStyle;\nFlutter\nmaterial\nInputDecorationTheme\nlabelStyle property\nInputDecorationTheme class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [InputDecorator].\n\nvoid main() => runApp(const LabelStyleErrorExampleApp());\n\nclass LabelStyleErrorExampleApp extends StatelessWidget {\n  const LabelStyleErrorExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: Scaffold(\n        appBar: AppBar(title: const Text('InputDecorator Sample')),\n        body: const Center(\n          child: InputDecoratorExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass InputDecoratorExample extends StatelessWidget {\n  const InputDecoratorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return TextFormField(\n      decoration: InputDecoration(\n        border: const OutlineInputBorder(),\n        labelText: 'Name',\n        // The MaterialStateProperty's value is a text style that is orange\n        // by default, but the theme's error color if the input decorator\n        // is in its error state.\n        labelStyle: MaterialStateTextStyle.resolveWith(\n          (Set<MaterialState> states) {\n            final Color color = states.contains(MaterialState.error)\n                ? Theme.of(context).colorScheme.error\n                : Colors.orange;\n            return TextStyle(color: color, letterSpacing: 1.3);\n          },\n        ),\n      ),\n      validator: (String? value) {\n        if (value == null || value == '') {\n          return 'Enter name';\n        }\n        return null;\n      },\n      autovalidateMode: AutovalidateMode.always,\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/LinearProgressIndicator-class.html",
  "title": "LinearProgressIndicator class - material library - Dart API",
  "documentation_content": "LinearProgressIndicator class - material library - Dart API\nmenu\nFlutter\nmaterial\nLinearProgressIndicator class\nLinearProgressIndicator\nbrightness_4\nbrightness_5\ndescription\nLinearProgressIndicator class\nA Material Design linear progress indicator, also known as a progress bar.\nA widget that shows progress along a line. There are two kinds of linear\nprogress indicators:\nDeterminate. Determinate progress indicators have a specific value at\neach point in time, and the value should increase monotonically from 0.0\nto 1.0, at which time the indicator is complete. To create a determinate\nprogress indicator, use a non-null value between 0.0 and 1.0.\nIndeterminate. Indeterminate progress indicators do not have a specific\nvalue at each point in time and instead indicate that progress is being\nmade without indicating how much progress remains. To create an\nindeterminate progress indicator, use a null value.\nThe indicator line is displayed with valueColor, an animated value. To\nspecify a constant color value use: AlwaysStoppedAnimation<Color>(color).\nThe minimum height of the indicator can be specified using minHeight.\nThe indicator can be made taller by wrapping the widget with a SizedBox.\nThis example shows a LinearProgressIndicator with a changing value.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.LinearProgressIndicator.1 mysample\nThis sample shows the creation of a LinearProgressIndicator with a changing value.\nWhen toggling the switch, LinearProgressIndicator uses a determinate value.\nAs described in: https://m3.material.io/components/progress-indicators/overview\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.LinearProgressIndicator.2 mysample\nSee also:\nCircularProgressIndicator, which shows progress along a circular arc.\nRefreshIndicator, which automatically displays a CircularProgressIndicator\nwhen the underlying vertical scrollable is overscrolled.\nmaterial.io/design/components/progress-indicators.html#linear-progress-indicators\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nProgressIndicator\nLinearProgressIndicator\nConstructors\nLinearProgressIndicator({Key? key, double? value, Color? backgroundColor, Color? color, Animation<Color?>? valueColor, double? minHeight, String? semanticsLabel, String? semanticsValue, BorderRadiusGeometry borderRadius = BorderRadius.zero})\nCreates a linear progress indicator.\nconst\nProperties\nbackgroundColor\n\u2192 Color?\nColor of the track being filled by the linear indicator.\nread-onlyoverride\nborderRadius\n\u2192 BorderRadiusGeometry\nThe border radius of both the indicator and the track.\nfinal\ncolor\n\u2192 Color?\nThe progress indicator's color.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nminHeight\n\u2192 double?\nThe minimum height of the line used to draw the linear indicator.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nsemanticsLabel\n\u2192 String?\nThe SemanticsProperties.label for this progress indicator.\nfinalinherited\nsemanticsValue\n\u2192 String?\nThe SemanticsProperties.value for this progress indicator.\nfinalinherited\nvalue\n\u2192 double?\nIf non-null, the value of this progress indicator.\nfinalinherited\nvalueColor\n\u2192 Animation<Color?>?\nThe progress indicator's color as an animated value.\nfinalinherited\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<LinearProgressIndicator>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nLinearProgressIndicator class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [LinearProgressIndicator].\n\nvoid main() => runApp(const ProgressIndicatorApp());\n\nclass ProgressIndicatorApp extends StatelessWidget {\n  const ProgressIndicatorApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n          useMaterial3: true, colorSchemeSeed: const Color(0xff6750a4)),\n      home: const ProgressIndicatorExample(),\n    );\n  }\n}\n\nclass ProgressIndicatorExample extends StatefulWidget {\n  const ProgressIndicatorExample({super.key});\n\n  @override\n  State<ProgressIndicatorExample> createState() =>\n      _ProgressIndicatorExampleState();\n}\n\nclass _ProgressIndicatorExampleState extends State<ProgressIndicatorExample>\n    with TickerProviderStateMixin {\n  late AnimationController controller;\n  bool determinate = false;\n\n  @override\n  void initState() {\n    controller = AnimationController(\n      /// [AnimationController]s can be created with `vsync: this` because of\n      /// [TickerProviderStateMixin].\n      vsync: this,\n      duration: const Duration(seconds: 2),\n    )..addListener(() {\n        setState(() {});\n      });\n    controller.repeat();\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Padding(\n        padding: const EdgeInsets.all(20.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            const Text(\n              'Linear progress indicator',\n              style: TextStyle(fontSize: 20),\n            ),\n            const SizedBox(height: 30),\n            LinearProgressIndicator(\n              value: controller.value,\n              semanticsLabel: 'Linear progress indicator',\n            ),\n            const SizedBox(height: 10),\n            Row(\n              children: <Widget>[\n                Expanded(\n                  child: Text(\n                    'determinate Mode',\n                    style: Theme.of(context).textTheme.titleSmall,\n                  ),\n                ),\n                Switch(\n                  value: determinate,\n                  onChanged: (bool value) {\n                    setState(() {\n                      determinate = value;\n                      if (determinate) {\n                        controller.stop();\n                      } else {\n                        controller\n                          ..forward(from: controller.value)\n                          ..repeat();\n                      }\n                    });\n                  },\n                ),\n              ],\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [LinearProgressIndicator].\n\nvoid main() => runApp(const ProgressIndicatorApp());\n\nclass ProgressIndicatorApp extends StatelessWidget {\n  const ProgressIndicatorApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: ProgressIndicatorExample(),\n    );\n  }\n}\n\nclass ProgressIndicatorExample extends StatefulWidget {\n  const ProgressIndicatorExample({super.key});\n\n  @override\n  State<ProgressIndicatorExample> createState() =>\n      _ProgressIndicatorExampleState();\n}\n\nclass _ProgressIndicatorExampleState extends State<ProgressIndicatorExample>\n    with TickerProviderStateMixin {\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    controller = AnimationController(\n      /// [AnimationController]s can be created with `vsync: this` because of\n      /// [TickerProviderStateMixin].\n      vsync: this,\n      duration: const Duration(seconds: 5),\n    )..addListener(() {\n        setState(() {});\n      });\n    controller.repeat(reverse: true);\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Padding(\n        padding: const EdgeInsets.all(20.0),\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n          children: <Widget>[\n            const Text(\n              'Linear progress indicator with a fixed color',\n              style: TextStyle(fontSize: 20),\n            ),\n            LinearProgressIndicator(\n              value: controller.value,\n              semanticsLabel: 'Linear progress indicator',\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ListTile-class.html",
  "title": "ListTile class - material library - Dart API",
  "documentation_content": "ListTile class - material library - Dart API\nmenu\nFlutter\nmaterial\nListTile class\nListTile\nbrightness_4\nbrightness_5\ndescription\nListTile class\nA single fixed-height row that typically contains some text as well as\na leading or trailing icon.\nA list tile contains one to three lines of text optionally flanked by icons or\nother widgets, such as check boxes. The icons (or other widgets) for the\ntile are defined with the leading and trailing parameters. The first\nline of text is not optional and is specified with title. The value of\nsubtitle, which is optional, will occupy the space allocated for an\nadditional line of text, or two lines if isThreeLine is true. If dense\nis true then the overall height of this tile and the size of the\nDefaultTextStyles that wrap the title and subtitle widget are reduced.\nIt is the responsibility of the caller to ensure that title does not wrap,\nand to ensure that subtitle doesn't wrap (if isThreeLine is false) or\nwraps to two lines (if it is true).\nThe heights of the leading and trailing widgets are constrained\naccording to the\nMaterial spec.\nAn exception is made for one-line ListTiles for accessibility. Please\nsee the example below to see how to adhere to both Material spec and\naccessibility requirements.\nThe leading and trailing widgets can expand as far as they wish\nhorizontally, so ensure that they are properly constrained.\nList tiles are typically used in ListViews, or arranged in Columns in\nDrawers and Cards.\nThis widget requires a Material widget ancestor in the tree to paint\nitself on, which is typically provided by the app's Scaffold.\nThe tileColor, selectedTileColor, focusColor, and hoverColor\nare not painted by the ListTile itself but by the Material widget\nancestor. In this case, one can wrap a Material widget around the\nListTile, e.g.:\nlink\ncontent_copy\nconst ColoredBox(\ncolor: Colors.green,\nchild: Material(\nchild: ListTile(\ntitle: Text('ListTile with red background'),\ntileColor: Colors.red,\n),\n),\n)\nPerformance considerations when wrapping ListTile with Material\nWrapping a large number of ListTiles individually with Materials\nis expensive. Consider only wrapping the ListTiles that require it\nor include a common Material ancestor where possible.\nListTile must be wrapped in a Material widget to animate tileColor,\nselectedTileColor, focusColor, and hoverColor as these colors\nare not drawn by the list tile itself but by the material widget ancestor.\nThis example showcases how ListTile needs to be wrapped in a Material\nwidget to animate colors.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.2 mysample\nThis example uses a ListView to demonstrate different configurations of\nListTiles in Cards.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.3 mysample\nThis sample shows the creation of a ListTile using ThemeData.useMaterial3 flag,\nas described in: https://m3.material.io/components/lists/overview.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.4 mysample\nThis sample shows ListTile's textColor and iconColor can use\nMaterialStateColor color to change the color of the text and icon\nwhen the ListTile is enabled, selected, or disabled.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.5 mysample\nThis sample shows ListTile.titleAlignment can be used to configure the\nleading and trailing widgets alignment relative to the title and\nsubtitle widgets.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.6 mysample\nTo use a ListTile within a Row, it needs to be wrapped in an\nExpanded widget. ListTile requires fixed width constraints,\nwhereas a Row does not constrain its children.\nlink\ncontent_copy\nconst Row(\nchildren: <Widget>[\nExpanded(\nchild: ListTile(\nleading: FlutterLogo(),\ntitle: Text('These ListTiles are expanded '),\n),\n),\nExpanded(\nchild: ListTile(\ntrailing: FlutterLogo(),\ntitle: Text('to fill the available space.'),\n),\n),\n],\n)\nTiles can be much more elaborate. Here is a tile which can be tapped, but\nwhich is disabled when the _act variable is not 2. When the tile is\ntapped, the whole row has an ink splash effect (see InkWell).\nlink\ncontent_copy\nListTile(\nleading: const Icon(Icons.flight_land),\ntitle: const Text(\"Trix's airplane\"),\nsubtitle: _act != 2 ? const Text('The airplane is only in Act II.') : null,\nenabled: _act == 2,\nonTap: () { /* react to the tile being tapped */ }\n)\nTo be accessible, tappable leading and trailing widgets have to\nbe at least 48x48 in size. However, to adhere to the Material spec,\ntrailing and leading widgets in one-line ListTiles should visually be\nat most 32 (dense: true) or 40 (dense: false) in height, which may\nconflict with the accessibility requirement.\nFor this reason, a one-line ListTile allows the height of leading\nand trailing widgets to be constrained by the height of the ListTile.\nThis allows for the creation of tappable leading and trailing widgets\nthat are large enough, but it is up to the developer to ensure that\ntheir widgets follow the Material spec.\nHere is an example of a one-line, non-dense ListTile with a\ntappable leading widget that adheres to accessibility requirements and\nthe Material spec. To adjust the use case below for a one-line, dense\nListTile, adjust the vertical padding to 8.0.\nlink\ncontent_copy\nListTile(\nleading: GestureDetector(\nbehavior: HitTestBehavior.translucent,\nonTap: () {},\nchild: Container(\nwidth: 48,\nheight: 48,\npadding: const EdgeInsets.symmetric(vertical: 4.0),\nalignment: Alignment.center,\nchild: const CircleAvatar(),\n),\n),\ntitle: const Text('title'),\ndense: false,\n)\nThe ListTile layout isn't exactly what I want\nIf the way ListTile pads and positions its elements isn't quite what\nyou're looking for, it's easy to create custom list items with a\ncombination of other widgets, such as Rows and Columns.\nHere is an example of a custom list item that resembles a YouTube-related\nvideo list item created with Expanded and Container widgets.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.10 mysample\nHere is an example of an article list item with multiline titles and\nsubtitles. It utilizes Rows and Columns, as well as Expanded and\nAspectRatio widgets to organize its layout.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.11 mysample\nSee also:\nListTileTheme, which defines visual properties for ListTiles.\nListView, which can display an arbitrary number of ListTiles\nin a scrolling list.\nCircleAvatar, which shows an icon representing a person and is often\nused as the leading element of a ListTile.\nCard, which can be used with Column to show a few ListTiles.\nDivider, which can be used to separate ListTiles.\nListTile.divideTiles, a utility for inserting Dividers in between ListTiles.\nCheckboxListTile, RadioListTile, and SwitchListTile, widgets\nthat combine ListTile with other controls.\nMaterial 3 ListTile specifications are referenced from m3.material.io/components/lists/specs\nand Material 2 ListTile specifications are referenced from material.io/design/components/lists.html\nCookbook: Use lists\nCookbook: Implement swipe to dismiss\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatelessWidget\nListTile\nConstructors\nListTile({Key? key, Widget? leading, Widget? title, Widget? subtitle, Widget? trailing, bool isThreeLine = false, bool? dense, VisualDensity? visualDensity, ShapeBorder? shape, ListTileStyle? style, Color? selectedColor, Color? iconColor, Color? textColor, TextStyle? titleTextStyle, TextStyle? subtitleTextStyle, TextStyle? leadingAndTrailingTextStyle, EdgeInsetsGeometry? contentPadding, bool enabled = true, GestureTapCallback? onTap, GestureLongPressCallback? onLongPress, ValueChanged<bool>? onFocusChange, MouseCursor? mouseCursor, bool selected = false, Color? focusColor, Color? hoverColor, Color? splashColor, FocusNode? focusNode, bool autofocus = false, Color? tileColor, Color? selectedTileColor, bool? enableFeedback, double? horizontalTitleGap, double? minVerticalPadding, double? minLeadingWidth, ListTileTitleAlignment? titleAlignment})\nCreates a list tile.\nconst\nProperties\nautofocus\n\u2192 bool\nTrue if this widget will be selected as the initial focus when no other\nnode in its scope is currently focused.\nfinal\ncontentPadding\n\u2192 EdgeInsetsGeometry?\nThe tile's internal padding.\nfinal\ndense\n\u2192 bool?\nWhether this list tile is part of a vertically dense list.\nfinal\nenabled\n\u2192 bool\nWhether this list tile is interactive.\nfinal\nenableFeedback\n\u2192 bool?\nWhether detected gestures should provide acoustic and/or haptic feedback.\nfinal\nfocusColor\n\u2192 Color?\nThe color for the tile's Material when it has the input focus.\nfinal\nfocusNode\n\u2192 FocusNode?\nAn optional focus node to use as the focus node for this widget.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nhorizontalTitleGap\n\u2192 double?\nThe horizontal gap between the titles and the leading/trailing widgets.\nfinal\nhoverColor\n\u2192 Color?\nThe color for the tile's Material when a pointer is hovering over it.\nfinal\niconColor\n\u2192 Color?\nDefines the default color for leading and trailing icons.\nfinal\nisThreeLine\n\u2192 bool\nWhether this list tile is intended to display three lines of text.\nfinal\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nleading\n\u2192 Widget?\nA widget to display before the title.\nfinal\nleadingAndTrailingTextStyle\n\u2192 TextStyle?\nThe text style for ListTile's leading and trailing.\nfinal\nminLeadingWidth\n\u2192 double?\nThe minimum width allocated for the ListTile.leading widget.\nfinal\nminVerticalPadding\n\u2192 double?\nThe minimum padding on the top and bottom of the title and subtitle widgets.\nfinal\nmouseCursor\n\u2192 MouseCursor?\nThe cursor for a mouse pointer when it enters or is hovering over the\nwidget.\nfinal\nonFocusChange\n\u2192 ValueChanged<bool>?\nHandler called when the focus changes.\nfinal\nonLongPress\n\u2192 GestureLongPressCallback?\nCalled when the user long-presses on this list tile.\nfinal\nonTap\n\u2192 GestureTapCallback?\nCalled when the user taps this list tile.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nselected\n\u2192 bool\nIf this tile is also enabled then icons and text are rendered with the same color.\nfinal\nselectedColor\n\u2192 Color?\nDefines the color used for icons and text when the list tile is selected.\nfinal\nselectedTileColor\n\u2192 Color?\nDefines the background color of ListTile when selected is true.\nfinal\nshape\n\u2192 ShapeBorder?\nDefines the tile's InkWell.customBorder and Ink.decoration shape.\nfinal\nsplashColor\n\u2192 Color?\nThe color of splash for the tile's Material.\nfinal\nstyle\n\u2192 ListTileStyle?\nDefines the font used for the title.\nfinal\nsubtitle\n\u2192 Widget?\nAdditional content displayed below the title.\nfinal\nsubtitleTextStyle\n\u2192 TextStyle?\nThe text style for ListTile's subtitle.\nfinal\ntextColor\n\u2192 Color?\nDefines the text color for the title, subtitle, leading, and trailing.\nfinal\ntileColor\n\u2192 Color?\nDefines the background color of ListTile when selected is false.\nfinal\ntitle\n\u2192 Widget?\nThe primary content of the list tile.\nfinal\ntitleAlignment\n\u2192 ListTileTitleAlignment?\nDefines how ListTile.leading and ListTile.trailing are\nvertically aligned relative to the ListTile's titles\n(ListTile.title and ListTile.subtitle).\nfinal\ntitleTextStyle\n\u2192 TextStyle?\nThe text style for ListTile's title.\nfinal\ntrailing\n\u2192 Widget?\nA widget to display after the title.\nfinal\nvisualDensity\n\u2192 VisualDensity?\nDefines how compact the list tile's layout will be.\nfinal\nMethods\nbuild(BuildContext context)\n\u2192 Widget\nDescribes the part of the user interface represented by this widget.\noverride\ncreateElement()\n\u2192 StatelessElement\nCreates a StatelessElement to manage this widget's location in the tree.\ninherited\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\noverride\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\ndivideTiles({BuildContext? context, required Iterable<Widget> tiles, Color? color})\n\u2192 Iterable<Widget>\nAdd a one pixel border in between each tile. If color isn't specified the\nThemeData.dividerColor of the context's Theme is used.\nFlutter\nmaterial\nListTile class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for custom list items.\n\nvoid main() => runApp(const CustomListItemApp());\n\nclass CustomListItemApp extends StatelessWidget {\n  const CustomListItemApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const CustomListItemExample(),\n    );\n  }\n}\n\nclass _ArticleDescription extends StatelessWidget {\n  const _ArticleDescription({\n    required this.title,\n    required this.subtitle,\n    required this.author,\n    required this.publishDate,\n    required this.readDuration,\n  });\n\n  final String title;\n  final String subtitle;\n  final String author;\n  final String publishDate;\n  final String readDuration;\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      crossAxisAlignment: CrossAxisAlignment.start,\n      children: <Widget>[\n        Text(\n          title,\n          maxLines: 2,\n          overflow: TextOverflow.ellipsis,\n          style: const TextStyle(\n            fontWeight: FontWeight.bold,\n          ),\n        ),\n        const Padding(padding: EdgeInsets.only(bottom: 2.0)),\n        Expanded(\n          child: Text(\n            subtitle,\n            maxLines: 2,\n            overflow: TextOverflow.ellipsis,\n            style: const TextStyle(\n              fontSize: 12.0,\n              color: Colors.black54,\n            ),\n          ),\n        ),\n        Text(\n          author,\n          style: const TextStyle(\n            fontSize: 12.0,\n            color: Colors.black87,\n          ),\n        ),\n        Text(\n          '$publishDate - $readDuration',\n          style: const TextStyle(\n            fontSize: 12.0,\n            color: Colors.black54,\n          ),\n        ),\n      ],\n    );\n  }\n}\n\nclass CustomListItemTwo extends StatelessWidget {\n  const CustomListItemTwo({\n    super.key,\n    required this.thumbnail,\n    required this.title,\n    required this.subtitle,\n    required this.author,\n    required this.publishDate,\n    required this.readDuration,\n  });\n\n  final Widget thumbnail;\n  final String title;\n  final String subtitle;\n  final String author;\n  final String publishDate;\n  final String readDuration;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 10.0),\n      child: SizedBox(\n        height: 100,\n        child: Row(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: <Widget>[\n            AspectRatio(\n              aspectRatio: 1.0,\n              child: thumbnail,\n            ),\n            Expanded(\n              child: Padding(\n                padding: const EdgeInsets.fromLTRB(20.0, 0.0, 2.0, 0.0),\n                child: _ArticleDescription(\n                  title: title,\n                  subtitle: subtitle,\n                  author: author,\n                  publishDate: publishDate,\n                  readDuration: readDuration,\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n}\n\nclass CustomListItemExample extends StatelessWidget {\n  const CustomListItemExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Custom List Item Sample')),\n      body: ListView(\n        padding: const EdgeInsets.all(10.0),\n        children: <Widget>[\n          CustomListItemTwo(\n            thumbnail: Container(\n              decoration: const BoxDecoration(color: Colors.pink),\n            ),\n            title: 'Flutter 1.0 Launch',\n            subtitle: 'Flutter continues to improve and expand its horizons. '\n                'This text should max out at two lines and clip',\n            author: 'Dash',\n            publishDate: 'Dec 28',\n            readDuration: '5 mins',\n          ),\n          CustomListItemTwo(\n            thumbnail: Container(\n              decoration: const BoxDecoration(color: Colors.blue),\n            ),\n            title: 'Flutter 1.2 Release - Continual updates to the framework',\n            subtitle: 'Flutter once again improves and makes updates.',\n            author: 'Flutter',\n            publishDate: 'Feb 26',\n            readDuration: '12 mins',\n          ),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ListTile].\n\nvoid main() => runApp(const ListTileApp());\n\nclass ListTileApp extends StatelessWidget {\n  const ListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const ListTileExample(),\n    );\n  }\n}\n\nclass ListTileExample extends StatelessWidget {\n  const ListTileExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('ListTile Sample')),\n      body: ListView(\n        children: const <Widget>[\n          ListTile(\n            leading: CircleAvatar(child: Text('A')),\n            title: Text('Headline'),\n            subtitle: Text('Supporting text'),\n            trailing: Icon(Icons.favorite_rounded),\n          ),\n          Divider(height: 0),\n          ListTile(\n            leading: CircleAvatar(child: Text('B')),\n            title: Text('Headline'),\n            subtitle: Text(\n                'Longer supporting text to demonstrate how the text wraps and how the leading and trailing widgets are centered vertically with the text.'),\n            trailing: Icon(Icons.favorite_rounded),\n          ),\n          Divider(height: 0),\n          ListTile(\n            leading: CircleAvatar(child: Text('C')),\n            title: Text('Headline'),\n            subtitle: Text(\n                \"Longer supporting text to demonstrate how the text wraps and how setting 'ListTile.isThreeLine = true' aligns leading and trailing widgets to the top vertically with the text.\"),\n            trailing: Icon(Icons.favorite_rounded),\n            isThreeLine: true,\n          ),\n          Divider(height: 0),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ListTile].\n\nvoid main() => runApp(const ListTileApp());\n\nclass ListTileApp extends StatelessWidget {\n  const ListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const ListTileExample(),\n    );\n  }\n}\n\nclass ListTileExample extends StatelessWidget {\n  const ListTileExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('ListTile Sample')),\n      body: ListView(\n        children: const <Widget>[\n          Card(child: ListTile(title: Text('One-line ListTile'))),\n          Card(\n            child: ListTile(\n              leading: FlutterLogo(),\n              title: Text('One-line with leading widget'),\n            ),\n          ),\n          Card(\n            child: ListTile(\n              title: Text('One-line with trailing widget'),\n              trailing: Icon(Icons.more_vert),\n            ),\n          ),\n          Card(\n            child: ListTile(\n              leading: FlutterLogo(),\n              title: Text('One-line with both widgets'),\n              trailing: Icon(Icons.more_vert),\n            ),\n          ),\n          Card(\n            child: ListTile(\n              title: Text('One-line dense ListTile'),\n              dense: true,\n            ),\n          ),\n          Card(\n            child: ListTile(\n              leading: FlutterLogo(size: 56.0),\n              title: Text('Two-line ListTile'),\n              subtitle: Text('Here is a second line'),\n              trailing: Icon(Icons.more_vert),\n            ),\n          ),\n          Card(\n            child: ListTile(\n              leading: FlutterLogo(size: 72.0),\n              title: Text('Three-line ListTile'),\n              subtitle:\n                  Text('A sufficiently long subtitle warrants three lines.'),\n              trailing: Icon(Icons.more_vert),\n              isThreeLine: true,\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ListTile].\n\nvoid main() => runApp(const ListTileApp());\n\nclass ListTileApp extends StatelessWidget {\n  const ListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const ListTileExample(),\n    );\n  }\n}\n\nclass ListTileExample extends StatefulWidget {\n  const ListTileExample({super.key});\n\n  @override\n  State<ListTileExample> createState() => _ListTileExampleState();\n}\n\nclass _ListTileExampleState extends State<ListTileExample> {\n  bool _selected = false;\n  bool _enabled = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('ListTile Sample')),\n      body: Center(\n        child: ListTile(\n          enabled: _enabled,\n          selected: _selected,\n          onTap: () {\n            setState(() {\n              // This is called when the user toggles the switch.\n              _selected = !_selected;\n            });\n          },\n          // This sets text color and icon color to red when list tile is disabled and\n          // green when list tile is selected, otherwise sets it to black.\n          iconColor:\n              MaterialStateColor.resolveWith((Set<MaterialState> states) {\n            if (states.contains(MaterialState.disabled)) {\n              return Colors.red;\n            }\n            if (states.contains(MaterialState.selected)) {\n              return Colors.green;\n            }\n            return Colors.black;\n          }),\n          // This sets text color and icon color to red when list tile is disabled and\n          // green when list tile is selected, otherwise sets it to black.\n          textColor:\n              MaterialStateColor.resolveWith((Set<MaterialState> states) {\n            if (states.contains(MaterialState.disabled)) {\n              return Colors.red;\n            }\n            if (states.contains(MaterialState.selected)) {\n              return Colors.green;\n            }\n            return Colors.black;\n          }),\n          leading: const Icon(Icons.person),\n          title: const Text('Headline'),\n          subtitle: Text('Enabled: $_enabled, Selected: $_selected'),\n          trailing: Switch(\n            onChanged: (bool? value) {\n              // This is called when the user toggles the switch.\n              setState(() {\n                _enabled = value!;\n              });\n            },\n            value: _enabled,\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ListTile].\n\nvoid main() => runApp(const ListTileApp());\n\nclass ListTileApp extends StatelessWidget {\n  const ListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const ListTileExample(),\n    );\n  }\n}\n\nclass ListTileExample extends StatefulWidget {\n  const ListTileExample({super.key});\n\n  @override\n  State<ListTileExample> createState() => _ListTileExampleState();\n}\n\nclass _ListTileExampleState extends State<ListTileExample> {\n  ListTileTitleAlignment? titleAlignment;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('ListTile.titleAlignment Sample')),\n      body: Column(\n        children: <Widget>[\n          const Divider(),\n          ListTile(\n            titleAlignment: titleAlignment,\n            leading: Checkbox(\n              value: true,\n              onChanged: (bool? value) {},\n            ),\n            title: const Text('Headline Text'),\n            subtitle: const Text(\n                'Tapping on the trailing widget will show a menu that allows you to change the title alignment. The title alignment is set to threeLine by default if `ThemeData.useMaterial3` is true. Otherwise, defaults to titleHeight.'),\n            trailing: PopupMenuButton<ListTileTitleAlignment>(\n              onSelected: (ListTileTitleAlignment? value) {\n                setState(() {\n                  titleAlignment = value;\n                });\n              },\n              itemBuilder: (BuildContext context) =>\n                  <PopupMenuEntry<ListTileTitleAlignment>>[\n                const PopupMenuItem<ListTileTitleAlignment>(\n                  value: ListTileTitleAlignment.threeLine,\n                  child: Text('threeLine'),\n                ),\n                const PopupMenuItem<ListTileTitleAlignment>(\n                  value: ListTileTitleAlignment.titleHeight,\n                  child: Text('titleHeight'),\n                ),\n                const PopupMenuItem<ListTileTitleAlignment>(\n                  value: ListTileTitleAlignment.top,\n                  child: Text('top'),\n                ),\n                const PopupMenuItem<ListTileTitleAlignment>(\n                  value: ListTileTitleAlignment.center,\n                  child: Text('center'),\n                ),\n                const PopupMenuItem<ListTileTitleAlignment>(\n                  value: ListTileTitleAlignment.bottom,\n                  child: Text('bottom'),\n                ),\n              ],\n            ),\n          ),\n          const Divider(),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for custom list items.\n\nvoid main() => runApp(const CustomListItemApp());\n\nclass CustomListItemApp extends StatelessWidget {\n  const CustomListItemApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: CustomListItemExample(),\n    );\n  }\n}\n\nclass CustomListItem extends StatelessWidget {\n  const CustomListItem({\n    super.key,\n    required this.thumbnail,\n    required this.title,\n    required this.user,\n    required this.viewCount,\n  });\n\n  final Widget thumbnail;\n  final String title;\n  final String user;\n  final int viewCount;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 5.0),\n      child: Row(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          Expanded(\n            flex: 2,\n            child: thumbnail,\n          ),\n          Expanded(\n            flex: 3,\n            child: _VideoDescription(\n              title: title,\n              user: user,\n              viewCount: viewCount,\n            ),\n          ),\n          const Icon(\n            Icons.more_vert,\n            size: 16.0,\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass _VideoDescription extends StatelessWidget {\n  const _VideoDescription({\n    required this.title,\n    required this.user,\n    required this.viewCount,\n  });\n\n  final String title;\n  final String user;\n  final int viewCount;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n      padding: const EdgeInsets.fromLTRB(5.0, 0.0, 0.0, 0.0),\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.start,\n        children: <Widget>[\n          Text(\n            title,\n            style: const TextStyle(\n              fontWeight: FontWeight.w500,\n              fontSize: 14.0,\n            ),\n          ),\n          const Padding(padding: EdgeInsets.symmetric(vertical: 2.0)),\n          Text(\n            user,\n            style: const TextStyle(fontSize: 10.0),\n          ),\n          const Padding(padding: EdgeInsets.symmetric(vertical: 1.0)),\n          Text(\n            '$viewCount views',\n            style: const TextStyle(fontSize: 10.0),\n          ),\n        ],\n      ),\n    );\n  }\n}\n\nclass CustomListItemExample extends StatelessWidget {\n  const CustomListItemExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Custom List Item Sample')),\n      body: ListView(\n        padding: const EdgeInsets.all(8.0),\n        itemExtent: 106.0,\n        children: <CustomListItem>[\n          CustomListItem(\n            user: 'Flutter',\n            viewCount: 999000,\n            thumbnail: Container(\n              decoration: const BoxDecoration(color: Colors.blue),\n            ),\n            title: 'The Flutter YouTube Channel',\n          ),\n          CustomListItem(\n            user: 'Dash',\n            viewCount: 884000,\n            thumbnail: Container(\n              decoration: const BoxDecoration(color: Colors.yellow),\n            ),\n            title: 'Announcing Flutter 1.0',\n          ),\n        ],\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ListTile].\n\nvoid main() => runApp(const ListTileApp());\n\nclass ListTileApp extends StatelessWidget {\n  const ListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(\n        listTileTheme: const ListTileThemeData(\n          textColor: Colors.white,\n        ),\n        useMaterial3: true,\n      ),\n      home: const ListTileExample(),\n    );\n  }\n}\n\nclass ListTileExample extends StatefulWidget {\n  const ListTileExample({super.key});\n\n  @override\n  State<ListTileExample> createState() => _ListTileExampleState();\n}\n\nclass _ListTileExampleState extends State<ListTileExample>\n    with TickerProviderStateMixin {\n  late final AnimationController _fadeController;\n  late final AnimationController _sizeController;\n  late final Animation<double> _fadeAnimation;\n  late final Animation<double> _sizeAnimation;\n\n  @override\n  void initState() {\n    super.initState();\n    _fadeController = AnimationController(\n      duration: const Duration(seconds: 1),\n      vsync: this,\n    )..repeat(reverse: true);\n\n    _sizeController = AnimationController(\n      duration: const Duration(milliseconds: 850),\n      vsync: this,\n    )..repeat(reverse: true);\n\n    _fadeAnimation = CurvedAnimation(\n      parent: _fadeController,\n      curve: Curves.easeInOut,\n    );\n\n    _sizeAnimation = CurvedAnimation(\n      parent: _sizeController,\n      curve: Curves.easeOut,\n    );\n  }\n\n  @override\n  void dispose() {\n    _fadeController.dispose();\n    _sizeController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('ListTile Samples')),\n      body: Column(\n        mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n        children: <Widget>[\n          Hero(\n            tag: 'ListTile-Hero',\n            // Wrap the ListTile in a Material widget so the ListTile has someplace\n            // to draw the animated colors during the hero transition.\n            child: Material(\n              child: ListTile(\n                title: const Text('ListTile with Hero'),\n                subtitle: const Text('Tap here for Hero transition'),\n                tileColor: Colors.cyan,\n                onTap: () {\n                  Navigator.push(\n                    context,\n                    MaterialPageRoute<Widget>(builder: (BuildContext context) {\n                      return Scaffold(\n                        appBar: AppBar(title: const Text('ListTile Hero')),\n                        body: Center(\n                          child: Hero(\n                            tag: 'ListTile-Hero',\n                            child: Material(\n                              child: ListTile(\n                                title: const Text('ListTile with Hero'),\n                                subtitle: const Text('Tap here to go back'),\n                                tileColor: Colors.blue[700],\n                                onTap: () {\n                                  Navigator.pop(context);\n                                },\n                              ),\n                            ),\n                          ),\n                        ),\n                      );\n                    }),\n                  );\n                },\n              ),\n            ),\n          ),\n          FadeTransition(\n            opacity: _fadeAnimation,\n            // Wrap the ListTile in a Material widget so the ListTile has someplace\n            // to draw the animated colors during the fade transition.\n            child: const Material(\n              child: ListTile(\n                title: Text('ListTile with FadeTransition'),\n                selectedTileColor: Colors.green,\n                selectedColor: Colors.white,\n                selected: true,\n              ),\n            ),\n          ),\n          SizedBox(\n            height: 100,\n            child: Center(\n              child: SizeTransition(\n                sizeFactor: _sizeAnimation,\n                axisAlignment: -1.0,\n                // Wrap the ListTile in a Material widget so the ListTile has someplace\n                // to draw the animated colors during the size transition.\n                child: const Material(\n                  child: ListTile(\n                    title: Text('ListTile with SizeTransition'),\n                    tileColor: Colors.red,\n                    minVerticalPadding: 25.0,\n                  ),\n                ),\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/ListTile/selected.html",
  "title": "selected property - ListTile class - material library - Dart API",
  "documentation_content": "selected property - ListTile class - material library - Dart API\nmenu\nFlutter\nmaterial\nListTile\nselected property\nselected\nbrightness_4\nbrightness_5\ndescription\nselected property\nbool\nselected\nfinal\nIf this tile is also enabled then icons and text are rendered with the same color.\nBy default the selected color is the theme's primary color. The selected color\ncan be overridden with a ListTileTheme.\nHere is an example of using a StatefulWidget to keep track of the\nselected index, and using that to set the selected property on the\ncorresponding ListTile.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.ListTile.selected.1 mysample\nImplementation\nfinal bool selected;\nFlutter\nmaterial\nListTile\nselected property\nListTile class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [ListTile.selected].\n\nvoid main() => runApp(const ListTileApp());\n\nclass ListTileApp extends StatelessWidget {\n  const ListTileApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      theme: ThemeData(useMaterial3: true),\n      home: const ListTileExample(),\n    );\n  }\n}\n\nclass ListTileExample extends StatefulWidget {\n  const ListTileExample({super.key});\n\n  @override\n  State<ListTileExample> createState() => _ListTileExampleState();\n}\n\nclass _ListTileExampleState extends State<ListTileExample> {\n  int _selectedIndex = 0;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Custom List Item Sample')),\n      body: ListView.builder(\n        itemCount: 10,\n        itemBuilder: (BuildContext context, int index) {\n          return ListTile(\n            title: Text('Item $index'),\n            selected: index == _selectedIndex,\n            onTap: () {\n              setState(() {\n                _selectedIndex = index;\n              });\n            },\n          );\n        },\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/MaterialBanner-class.html",
  "title": "MaterialBanner class - material library - Dart API",
  "documentation_content": "MaterialBanner class - material library - Dart API\nmenu\nFlutter\nmaterial\nMaterialBanner class\nMaterialBanner\nbrightness_4\nbrightness_5\ndescription\nMaterialBanner class\nA Material Design banner.\nA banner displays an important, succinct message, and provides actions for\nusers to address (or dismiss the banner). A user action is required for it\nto be dismissed.\nBanners should be displayed at the top of the screen, below a top app bar.\nThey are persistent and non-modal, allowing the user to either ignore them or\ninteract with them at any time.\nBanners placed directly into the widget tree are static.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.MaterialBanner.1 mysample\nMaterialBanner's can also be presented through a ScaffoldMessenger.\nHere is an example where ScaffoldMessengerState.showMaterialBanner() is used to show the MaterialBanner.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.MaterialBanner.2 mysample\nThe actions will be placed beside the content if there is only one.\nOtherwise, the actions will be placed below the content. Use\nforceActionsBelow to override this behavior.\nIf the actions placed below the content, they will be laid out in a row.\nIf there isn't sufficient room to display everything, they are laid out\nin a column instead.\nThe actions and content must be provided. An optional leading widget\n(typically an Image) can also be provided. The contentTextStyle and\nbackgroundColor can be provided to customize the banner.\nThis widget is unrelated to the widgets library Banner widget.\nInheritance\nObject\nDiagnosticableTree\nWidget\nStatefulWidget\nMaterialBanner\nConstructors\nMaterialBanner({Key? key, required Widget content, TextStyle? contentTextStyle, required List<Widget> actions, double? elevation, Widget? leading, Color? backgroundColor, Color? surfaceTintColor, Color? shadowColor, Color? dividerColor, EdgeInsetsGeometry? padding, EdgeInsetsGeometry? margin, EdgeInsetsGeometry? leadingPadding, bool forceActionsBelow = false, OverflowBarAlignment overflowAlignment = OverflowBarAlignment.end, Animation<double>? animation, VoidCallback? onVisible})\nCreates a MaterialBanner.\nconst\nProperties\nactions\n\u2192 List<Widget>\nThe set of actions that are displayed at the bottom or trailing side of\nthe MaterialBanner.\nfinal\nanimation\n\u2192 Animation<double>?\nThe animation driving the entrance and exit of the material banner when presented by the ScaffoldMessenger.\nfinal\nbackgroundColor\n\u2192 Color?\nThe color of the surface of this MaterialBanner.\nfinal\ncontent\n\u2192 Widget\nThe content of the MaterialBanner.\nfinal\ncontentTextStyle\n\u2192 TextStyle?\nStyle for the text in the content of the MaterialBanner.\nfinal\ndividerColor\n\u2192 Color?\nThe color of the divider.\nfinal\nelevation\n\u2192 double?\nThe z-coordinate at which to place the material banner.\nfinal\nforceActionsBelow\n\u2192 bool\nAn override to force the actions to be below the content regardless of\nhow many there are.\nfinal\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nkey\n\u2192 Key?\nControls how one widget replaces another widget in the tree.\nfinalinherited\nleading\n\u2192 Widget?\nThe (optional) leading widget of the MaterialBanner.\nfinal\nleadingPadding\n\u2192 EdgeInsetsGeometry?\nThe amount of space by which to inset the leading widget.\nfinal\nmargin\n\u2192 EdgeInsetsGeometry?\nEmpty space to surround the MaterialBanner.\nfinal\nonVisible\n\u2192 VoidCallback?\nCalled the first time that the material banner is visible within a Scaffold when presented by the ScaffoldMessenger.\nfinal\noverflowAlignment\n\u2192 OverflowBarAlignment\nThe horizontal alignment of the actions when the actions laid out in a column.\nfinal\npadding\n\u2192 EdgeInsetsGeometry?\nThe amount of space by which to inset the content.\nfinal\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nshadowColor\n\u2192 Color?\nThe color of the shadow below the MaterialBanner.\nfinal\nsurfaceTintColor\n\u2192 Color?\nThe color used as an overlay on backgroundColor to indicate elevation.\nfinal\nMethods\ncreateElement()\n\u2192 StatefulElement\nCreates a StatefulElement to manage this widget's location in the tree.\ninherited\ncreateState()\n\u2192 State<MaterialBanner>\nCreates the mutable state for this widget at a given location in the tree.\noverride\ndebugDescribeChildren()\n\u2192 List<DiagnosticsNode>\nReturns a list of DiagnosticsNode objects describing this node's\nchildren.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringDeep({String prefixLineOne = '', String? prefixOtherLines, DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a string representation of this node and its descendants.\ninherited\ntoStringShallow({String joiner = ', ', DiagnosticLevel minLevel = DiagnosticLevel.debug})\n\u2192 String\nReturns a one-line detailed description of the object.\ninherited\ntoStringShort()\n\u2192 String\nA short, textual description of this widget.\ninherited\nwithAnimation(Animation<double> newAnimation, {Key? fallbackKey})\n\u2192 MaterialBanner\nCreates a copy of this material banner but with the animation replaced with the given animation.\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\ncreateAnimationController({required TickerProvider vsync})\n\u2192 AnimationController\nCreates an animation controller useful for driving a MaterialBanner's entrance and exit animation.\nFlutter\nmaterial\nMaterialBanner class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [MaterialBanner].\n\nvoid main() => runApp(const MaterialBannerExampleApp());\n\nclass MaterialBannerExampleApp extends StatelessWidget {\n  const MaterialBannerExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: MaterialBannerExample(),\n    );\n  }\n}\n\nclass MaterialBannerExample extends StatelessWidget {\n  const MaterialBannerExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('The MaterialBanner is below'),\n      ),\n      body: Center(\n        child: ElevatedButton(\n          child: const Text('Show MaterialBanner'),\n          onPressed: () => ScaffoldMessenger.of(context).showMaterialBanner(\n            const MaterialBanner(\n              padding: EdgeInsets.all(20),\n              content: Text('Hello, I am a Material Banner'),\n              leading: Icon(Icons.agriculture_outlined),\n              backgroundColor: Colors.green,\n              actions: <Widget>[\n                TextButton(\n                  onPressed: null,\n                  child: Text('DISMISS'),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [MaterialBanner].\n\nvoid main() => runApp(const MaterialBannerExampleApp());\n\nclass MaterialBannerExampleApp extends StatelessWidget {\n  const MaterialBannerExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: MaterialBannerExample(),\n    );\n  }\n}\n\nclass MaterialBannerExample extends StatelessWidget {\n  const MaterialBannerExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('The MaterialBanner is below'),\n      ),\n      body: const MaterialBanner(\n        padding: EdgeInsets.all(20),\n        content: Text('Hello, I am a Material Banner'),\n        leading: Icon(Icons.agriculture_outlined),\n        backgroundColor: Color(0xFFE0E0E0),\n        actions: <Widget>[\n          TextButton(\n            onPressed: null,\n            child: Text('OPEN'),\n          ),\n          TextButton(\n            onPressed: null,\n            child: Text('DISMISS'),\n          ),\n        ],\n      ),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/MaterialStateBorderSide-class.html",
  "title": "MaterialStateBorderSide class - material library - Dart API",
  "documentation_content": "MaterialStateBorderSide class - material library - Dart API\nmenu\nFlutter\nmaterial\nMaterialStateBorderSide class\nMaterialStateBorderSide\nbrightness_4\nbrightness_5\ndescription\nMaterialStateBorderSide class\nabstract\nDefines a BorderSide whose value depends on a set of MaterialStates\nwhich represent the interactive state of a component.\nTo use a MaterialStateBorderSide, you should create a subclass of a\nMaterialStateBorderSide and override the abstract resolve method.\nThis class enables existing widget implementations with BorderSide\nproperties to be extended to also effectively support MaterialStateProperty<BorderSide>\nproperty values. MaterialStateBorderSide should only be used with widgets that document\ntheir support, like ActionChip.side.\nThis example defines a subclass of MaterialStateBorderSide, that resolves\nto a red border side when its widget is selected.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.MaterialStateBorderSide.1 mysample\nThis class should only be used for parameters which are documented to take\nMaterialStateBorderSide, otherwise only the default state will be used.\nInheritance\nObject\nBorderSide\nMaterialStateBorderSide\nImplemented types\nMaterialStateProperty<BorderSide?>\nConstructors\nMaterialStateBorderSide()\nAbstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.\nconst\nProperties\ncolor\n\u2192 Color\nThe color of this side of the border.\nfinalinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nstrokeAlign\n\u2192 double\nThe relative position of the stroke on a BorderSide in an\nOutlinedBorder or Border.\nfinalinherited\nstrokeInset\n\u2192 double\nGet the amount of the stroke width that lies inside of the BorderSide.\nread-onlyinherited\nstrokeOffset\n\u2192 double\nThe offset of the stroke, taking into account the stroke alignment.\nread-onlyinherited\nstrokeOutset\n\u2192 double\nGet the amount of the stroke width that lies outside of the BorderSide.\nread-onlyinherited\nstyle\n\u2192 BorderStyle\nThe style of this side of the border.\nfinalinherited\nwidth\n\u2192 double\nThe width of this side of the border, in logical pixels.\nfinalinherited\nMethods\ncopyWith({Color? color, double? width, BorderStyle? style, double? strokeAlign})\n\u2192 BorderSide\nCreates a copy of this border but with the given fields replaced with the new values.\ninherited\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nresolve(Set<MaterialState> states)\n\u2192 BorderSide?\nReturns a BorderSide that's to be used when a Material component is\nin the specified state. Return null to defer to the default value of the\nwidget or theme.\noverride\nscale(double t)\n\u2192 BorderSide\nCreates a copy of this border side description but with the width scaled\nby the factor t.\ninherited\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoPaint()\n\u2192 Paint\nCreate a Paint object that, if used to stroke a line, will draw the line\nin this border's style.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringShort()\n\u2192 String\nA brief description of this object, usually just the runtimeType and the\nhashCode.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nStatic Methods\nresolveWith(MaterialPropertyResolver<BorderSide?> callback)\n\u2192 MaterialStateBorderSide\nCreates a MaterialStateBorderSide from a\nMaterialPropertyResolver<BorderSide?> callback function.\noverride\nFlutter\nmaterial\nMaterialStateBorderSide class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [MaterialStateBorderSide].\n\nvoid main() => runApp(const MaterialStateBorderSideExampleApp());\n\nclass MaterialStateBorderSideExampleApp extends StatelessWidget {\n  const MaterialStateBorderSideExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('MaterialStateBorderSide Sample')),\n        body: const Center(\n          child: MaterialStateBorderSideExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass MaterialStateBorderSideExample extends StatefulWidget {\n  const MaterialStateBorderSideExample({super.key});\n\n  @override\n  State<MaterialStateBorderSideExample> createState() =>\n      _MaterialStateBorderSideExampleState();\n}\n\nclass _MaterialStateBorderSideExampleState\n    extends State<MaterialStateBorderSideExample> {\n  bool isSelected = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return FilterChip(\n      label: const Text('Select chip'),\n      selected: isSelected,\n      onSelected: (bool value) {\n        setState(() {\n          isSelected = value;\n        });\n      },\n      side: MaterialStateBorderSide.resolveWith((Set<MaterialState> states) {\n        if (states.contains(MaterialState.selected)) {\n          return const BorderSide(color: Colors.red);\n        }\n        return null; // Defer to default value on the theme or widget.\n      }),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/MaterialStateMouseCursor-class.html",
  "title": "MaterialStateMouseCursor class - material library - Dart API",
  "documentation_content": "MaterialStateMouseCursor class - material library - Dart API\nmenu\nFlutter\nmaterial\nMaterialStateMouseCursor class\nMaterialStateMouseCursor\nbrightness_4\nbrightness_5\ndescription\nMaterialStateMouseCursor class\nabstract\nDefines a MouseCursor whose value depends on a set of MaterialStates which\nrepresent the interactive state of a component.\nThis kind of MouseCursor is useful when the set of interactive\nactions a widget supports varies with its state. For example, a\nmouse pointer hovering over a disabled ListTile should not\ndisplay SystemMouseCursors.click, since a disabled list tile\ndoesn't respond to mouse clicks. ListTile's default mouse cursor\nis a MaterialStateMouseCursor.clickable, which resolves to\nSystemMouseCursors.basic when the button is disabled.\nTo use a MaterialStateMouseCursor, you should create a subclass of\nMaterialStateMouseCursor and implement the abstract resolve method.\nThis example defines a mouse cursor that resolves to\nSystemMouseCursors.forbidden when its widget is disabled.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.MaterialStateMouseCursor.1 mysample\nThis class should only be used for parameters which are documented to take\nMaterialStateMouseCursor, otherwise only the default state will be used.\nSee also:\nMouseCursor for introduction on the mouse cursor system.\nSystemMouseCursors, which defines cursors that are supported by\nnative platforms.\nInheritance\nObject\nMouseCursor\nMaterialStateMouseCursor\nImplemented types\nMaterialStateProperty<MouseCursor>\nConstructors\nMaterialStateMouseCursor()\nAbstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.\nconst\nProperties\ndebugDescription\n\u2192 String\nA very short description of the mouse cursor.\nread-onlyinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nMethods\ncreateSession(int device)\n\u2192 MouseCursorSession\nAssociate a pointing device to this cursor.\noverride\ndebugFillProperties(DiagnosticPropertiesBuilder properties)\n\u2192 void\nAdd additional properties associated with the node.\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\nresolve(Set<MaterialState> states)\n\u2192 MouseCursor\nReturns a MouseCursor that's to be used when a Material component is in\nthe specified state.\noverride\ntoDiagnosticsNode({String? name, DiagnosticsTreeStyle? style})\n\u2192 DiagnosticsNode\nReturns a debug representation of the object that is used by debugging\ntools and by DiagnosticsNode.toStringDeep.\ninherited\ntoString({DiagnosticLevel minLevel = DiagnosticLevel.info})\n\u2192 String\nA string representation of this object.\ninherited\ntoStringShort()\n\u2192 String\nA brief description of this object, usually just the runtimeType and the\nhashCode.\ninherited\nOperators\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nConstants\nclickable\n\u2192 const MaterialStateMouseCursor\nA mouse cursor for clickable material widgets, which resolves differently\nwhen the widget is disabled.\n_EnabledAndDisabledMouseCursor(enabledCursor: SystemMouseCursors.click, disabledCursor: SystemMouseCursors.basic, name: 'clickable')\ntextable\n\u2192 const MaterialStateMouseCursor\nA mouse cursor for material widgets related to text, which resolves differently\nwhen the widget is disabled.\n_EnabledAndDisabledMouseCursor(enabledCursor: SystemMouseCursors.text, disabledCursor: SystemMouseCursors.basic, name: 'textable')\nFlutter\nmaterial\nMaterialStateMouseCursor class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [MaterialStateMouseCursor].\n\nvoid main() => runApp(const MaterialStateMouseCursorExampleApp());\n\nclass MaterialStateMouseCursorExampleApp extends StatelessWidget {\n  const MaterialStateMouseCursorExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Scaffold(\n        appBar: AppBar(title: const Text('MaterialStateMouseCursor Sample')),\n        body: const Center(\n          child: MaterialStateMouseCursorExample(),\n        ),\n      ),\n    );\n  }\n}\n\nclass ListTileCursor extends MaterialStateMouseCursor {\n  const ListTileCursor();\n\n  @override\n  MouseCursor resolve(Set<MaterialState> states) {\n    if (states.contains(MaterialState.disabled)) {\n      return SystemMouseCursors.forbidden;\n    }\n    return SystemMouseCursors.click;\n  }\n\n  @override\n  String get debugDescription => 'ListTileCursor()';\n}\n\nclass MaterialStateMouseCursorExample extends StatelessWidget {\n  const MaterialStateMouseCursorExample({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const ListTile(\n      title: Text('Disabled ListTile'),\n      enabled: false,\n      mouseCursor: ListTileCursor(),\n    );\n  }\n}\n"
  ]
 },
 {
  "url": "https://api.flutter.dev/./api_flutter_dev/flutter/material/MaterialStateOutlinedBorder-class.html",
  "title": "MaterialStateOutlinedBorder class - material library - Dart API",
  "documentation_content": "MaterialStateOutlinedBorder class - material library - Dart API\nmenu\nFlutter\nmaterial\nMaterialStateOutlinedBorder class\nMaterialStateOutlinedBorder\nbrightness_4\nbrightness_5\ndescription\nMaterialStateOutlinedBorder class\nabstract\nDefines an OutlinedBorder whose value depends on a set of MaterialStates\nwhich represent the interactive state of a component.\nTo use a MaterialStateOutlinedBorder, you should create a subclass of an\nOutlinedBorder and implement MaterialStateOutlinedBorder's abstract\nresolve method.\nThis example defines a subclass of RoundedRectangleBorder and an\nimplementation of MaterialStateOutlinedBorder, that resolves to\nRoundedRectangleBorder when its widget is selected.\nlink\nTo create a local project with this code sample, run:\nflutter create --sample=material.MaterialStateOutlinedBorder.1 mysample\nThis class should only be used for parameters which are documented to take\nMaterialStateOutlinedBorder, otherwise only the default state will be used.\nSee also:\nShapeBorder the base class for shape outlines.\nInheritance\nObject\nShapeBorder\nOutlinedBorder\nMaterialStateOutlinedBorder\nImplemented types\nMaterialStateProperty<OutlinedBorder?>\nConstructors\nMaterialStateOutlinedBorder()\nAbstract const constructor. This constructor enables subclasses to provide\nconst constructors so that they can be used in const expressions.\nconst\nProperties\ndimensions\n\u2192 EdgeInsetsGeometry\nThe widths of the sides of this border represented as an EdgeInsets.\nread-onlyinherited\nhashCode\n\u2192 int\nThe hash code for this object.\nread-onlyinherited\npreferPaintInterior\n\u2192 bool\nReports whether paintInterior is implemented.\nread-onlyinherited\nruntimeType\n\u2192 Type\nA representation of the runtime type of the object.\nread-onlyinherited\nside\n\u2192 BorderSide\nThe border outline's color and weight.\nfinalinherited\nMethods\nadd(ShapeBorder other, {bool reversed = false})\n\u2192 ShapeBorder?\nAttempts to create a new object that represents the amalgamation of this\nborder and the other border.\ninherited\ncopyWith({BorderSide? side})\n\u2192 OutlinedBorder\nReturns a copy of this OutlinedBorder that draws its outline with the\nspecified side, if side is non-null.\ninherited\ngetInnerPath(Rect rect, {TextDirection? textDirection})\n\u2192 Path\nCreate a Path that describes the inner edge of the border.\ninherited\ngetOuterPath(Rect rect, {TextDirection? textDirection})\n\u2192 Path\nCreate a Path that describes the outer edge of the border.\ninherited\nlerpFrom(ShapeBorder? a, double t)\n\u2192 ShapeBorder?\nLinearly interpolates from another ShapeBorder (possibly of another\nclass) to this.\ninherited\nlerpTo(ShapeBorder? b, double t)\n\u2192 ShapeBorder?\nLinearly interpolates from this to another ShapeBorder (possibly of\nanother class).\ninherited\nnoSuchMethod(Invocation invocation)\n\u2192 dynamic\nInvoked when a nonexistent method or property is accessed.\ninherited\npaint(Canvas canvas, Rect rect, {TextDirection? textDirection})\n\u2192 void\nPaints the border within the given Rect on the given Canvas.\ninherited\npaintInterior(Canvas canvas, Rect rect, Paint paint, {TextDirection? textDirection})\n\u2192 void\nPaint a canvas with the appropriate shape.\ninherited\nresolve(Set<MaterialState> states)\n\u2192 OutlinedBorder?\nReturns an OutlinedBorder that's to be used when a Material component is\nin the specified state. Return null to defer to the default value of the\nwidget or theme.\noverride\nscale(double t)\n\u2192 ShapeBorder\nCreates a copy of this border, scaled by the factor t.\ninherited\ntoString()\n\u2192 String\nA string representation of this object.\ninherited\nOperators\noperator +(ShapeBorder other)\n\u2192 ShapeBorder\nCreates a new border consisting of the two borders on either side of the\noperator.\ninherited\noperator ==(Object other)\n\u2192 bool\nThe equality operator.\ninherited\nFlutter\nmaterial\nMaterialStateOutlinedBorder class",
  "code_examples": [
   "import 'package:flutter/material.dart';\n\n/// Flutter code sample for [MaterialStateOutlinedBorder].\n\nvoid main() => runApp(const MaterialStateOutlinedBorderExampleApp());\n\nclass MaterialStateOutlinedBorderExampleApp extends StatelessWidget {\n  const MaterialStateOutlinedBorderExampleApp({super.key});\n\n  @override\n  Widget build(BuildContext context) {\n    return const MaterialApp(\n      home: MaterialStateOutlinedBorderExample(),\n    );\n  }\n}\n\nclass SelectedBorder extends RoundedRectangleBorder\n    implements MaterialStateOutlinedBorder {\n  const SelectedBorder();\n\n  @override\n  OutlinedBorder? resolve(Set<MaterialState> states) {\n    if (states.contains(MaterialState.selected)) {\n      return const RoundedRectangleBorder();\n    }\n    return null; // Defer to default value on the theme or widget.\n  }\n}\n\nclass MaterialStateOutlinedBorderExample extends StatefulWidget {\n  const MaterialStateOutlinedBorderExample({super.key});\n\n  @override\n  State<MaterialStateOutlinedBorderExample> createState() =>\n      _MaterialStateOutlinedBorderExampleState();\n}\n\nclass _MaterialStateOutlinedBorderExampleState\n    extends State<MaterialStateOutlinedBorderExample> {\n  bool isSelected = true;\n\n  @override\n  Widget build(BuildContext context) {\n    return Material(\n      child: FilterChip(\n        label: const Text('Select chip'),\n        selected: isSelected,\n        onSelected: (bool value) {\n          setState(() {\n            isSelected = value;\n          });\n        },\n        shape: const SelectedBorder(),\n      ),\n    );\n  }\n}\n"
  ]
 }
]